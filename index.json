{
  "README.html": {
    "href": "README.html",
    "title": "Heir | Heir Docs",
    "summary": "Heir Contributions Though I cannot guarantee the lifetime or dedication of this project, contributions are welcome and encouraged and I will review them ASAP. Community Join the Discord community! https://discord.gg/AEbNTEVNAd"
  },
  "api/Heir.AST.Abstract.AssignmentTarget.html": {
    "href": "api/Heir.AST.Abstract.AssignmentTarget.html",
    "title": "Class AssignmentTarget | Heir Docs",
    "summary": "Class AssignmentTarget Namespace Heir.AST.Abstract Assembly Heir.dll public abstract class AssignmentTarget : Expression Inheritance object SyntaxNode Expression AssignmentTarget Derived Name ElementAccess MemberAccess Inherited Members Expression.Accept<R>(Expression.IVisitor<R>) SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Heir.AST.Abstract.Expression.IVisitor-1.html": {
    "href": "api/Heir.AST.Abstract.Expression.IVisitor-1.html",
    "title": "Interface Expression.IVisitor<R> | Heir Docs",
    "summary": "Interface Expression.IVisitor<R> Namespace Heir.AST.Abstract Assembly Heir.dll public interface Expression.IVisitor<out R> Type Parameters R Methods VisitArrayLiteralExpression(ArrayLiteral) R VisitArrayLiteralExpression(ArrayLiteral arrayLiteral) Parameters arrayLiteral ArrayLiteral Returns R VisitArrayTypeRef(ArrayType) R VisitArrayTypeRef(ArrayType arrayType) Parameters arrayType ArrayType Returns R VisitAssignmentOpExpression(AssignmentOp) R VisitAssignmentOpExpression(AssignmentOp assignmentOp) Parameters assignmentOp AssignmentOp Returns R VisitBinaryOpExpression(BinaryOp) R VisitBinaryOpExpression(BinaryOp binaryOp) Parameters binaryOp BinaryOp Returns R VisitElementAccessExpression(ElementAccess) R VisitElementAccessExpression(ElementAccess elementAccess) Parameters elementAccess ElementAccess Returns R VisitFunctionTypeRef(FunctionType) R VisitFunctionTypeRef(FunctionType functionType) Parameters functionType FunctionType Returns R VisitIdentifierNameExpression(IdentifierName) R VisitIdentifierNameExpression(IdentifierName identifierName) Parameters identifierName IdentifierName Returns R VisitIntersectionTypeRef(IntersectionType) R VisitIntersectionTypeRef(IntersectionType intersectionType) Parameters intersectionType IntersectionType Returns R VisitInvocationExpression(Invocation) R VisitInvocationExpression(Invocation invocation) Parameters invocation Invocation Returns R VisitLiteralExpression(Literal) R VisitLiteralExpression(Literal literal) Parameters literal Literal Returns R VisitMemberAccessExpression(MemberAccess) R VisitMemberAccessExpression(MemberAccess memberAccess) Parameters memberAccess MemberAccess Returns R VisitNameOfExpression(NameOf) R VisitNameOfExpression(NameOf nameOf) Parameters nameOf NameOf Returns R VisitNoOp(NoOp) R VisitNoOp(NoOp noOp) Parameters noOp NoOp Returns R VisitNoOp(NoOpType) R VisitNoOp(NoOpType noOp) Parameters noOp NoOpType Returns R VisitObjectLiteralExpression(ObjectLiteral) R VisitObjectLiteralExpression(ObjectLiteral objectLiteral) Parameters objectLiteral ObjectLiteral Returns R VisitParameter(Parameter) R VisitParameter(Parameter parameter) Parameters parameter Parameter Returns R VisitParenthesizedExpression(Parenthesized) R VisitParenthesizedExpression(Parenthesized parenthesized) Parameters parenthesized Parenthesized Returns R VisitParenthesizedTypeRef(ParenthesizedType) R VisitParenthesizedTypeRef(ParenthesizedType parenthesizedType) Parameters parenthesizedType ParenthesizedType Returns R VisitPostfixOpExpression(PostfixOp) R VisitPostfixOpExpression(PostfixOp postfixOp) Parameters postfixOp PostfixOp Returns R VisitSingularTypeRef(SingularType) R VisitSingularTypeRef(SingularType singularType) Parameters singularType SingularType Returns R VisitTypeParameter(TypeParameter) R VisitTypeParameter(TypeParameter typeParameter) Parameters typeParameter TypeParameter Returns R VisitUnaryOpExpression(UnaryOp) R VisitUnaryOpExpression(UnaryOp unaryOp) Parameters unaryOp UnaryOp Returns R VisitUnionTypeRef(UnionType) R VisitUnionTypeRef(UnionType unionType) Parameters unionType UnionType Returns R"
  },
  "api/Heir.AST.Abstract.Expression.html": {
    "href": "api/Heir.AST.Abstract.Expression.html",
    "title": "Class Expression | Heir Docs",
    "summary": "Class Expression Namespace Heir.AST.Abstract Assembly Heir.dll public abstract class Expression : SyntaxNode Inheritance object SyntaxNode Expression Derived AssignmentTarget TypeRef BinaryOp Invocation Literal NameOf NoOp Parameter Parenthesized PostfixOp UnaryOp Inherited Members SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Accept<R>(IVisitor<R>) public abstract R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R"
  },
  "api/Heir.AST.Abstract.INodeVisitor-1.html": {
    "href": "api/Heir.AST.Abstract.INodeVisitor-1.html",
    "title": "Interface INodeVisitor<T> | Heir Docs",
    "summary": "Interface INodeVisitor<T> Namespace Heir.AST.Abstract Assembly Heir.dll public interface INodeVisitor<out T> : Expression.IVisitor<T>, Statement.IVisitor<T> Type Parameters T Inherited Members Expression.IVisitor<T>.VisitIdentifierNameExpression(IdentifierName) Expression.IVisitor<T>.VisitAssignmentOpExpression(AssignmentOp) Expression.IVisitor<T>.VisitUnaryOpExpression(UnaryOp) Expression.IVisitor<T>.VisitPostfixOpExpression(PostfixOp) Expression.IVisitor<T>.VisitBinaryOpExpression(BinaryOp) Expression.IVisitor<T>.VisitParenthesizedExpression(Parenthesized) Expression.IVisitor<T>.VisitLiteralExpression(Literal) Expression.IVisitor<T>.VisitObjectLiteralExpression(ObjectLiteral) Expression.IVisitor<T>.VisitArrayLiteralExpression(ArrayLiteral) Expression.IVisitor<T>.VisitNoOp(NoOp) Expression.IVisitor<T>.VisitNoOp(NoOpType) Expression.IVisitor<T>.VisitSingularTypeRef(SingularType) Expression.IVisitor<T>.VisitParenthesizedTypeRef(ParenthesizedType) Expression.IVisitor<T>.VisitUnionTypeRef(UnionType) Expression.IVisitor<T>.VisitIntersectionTypeRef(IntersectionType) Expression.IVisitor<T>.VisitFunctionTypeRef(FunctionType) Expression.IVisitor<T>.VisitArrayTypeRef(ArrayType) Expression.IVisitor<T>.VisitParameter(Parameter) Expression.IVisitor<T>.VisitInvocationExpression(Invocation) Expression.IVisitor<T>.VisitElementAccessExpression(ElementAccess) Expression.IVisitor<T>.VisitMemberAccessExpression(MemberAccess) Expression.IVisitor<T>.VisitNameOfExpression(NameOf) Expression.IVisitor<T>.VisitTypeParameter(TypeParameter) Statement.IVisitor<T>.VisitSyntaxTree(SyntaxTree) Statement.IVisitor<T>.VisitVariableDeclaration(VariableDeclaration) Statement.IVisitor<T>.VisitBlock(Block) Statement.IVisitor<T>.VisitExpressionStatement(ExpressionStatement) Statement.IVisitor<T>.VisitNoOp(NoOpStatement) Statement.IVisitor<T>.VisitReturnStatement(Return) Statement.IVisitor<T>.VisitFunctionDeclaration(FunctionDeclaration) Statement.IVisitor<T>.VisitIfStatement(If) Statement.IVisitor<T>.VisitWhileStatement(While) Statement.IVisitor<T>.VisitInterfaceField(InterfaceField) Statement.IVisitor<T>.VisitInterfaceDeclaration(InterfaceDeclaration) Statement.IVisitor<T>.VisitBreakStatement(Break) Statement.IVisitor<T>.VisitContinueStatement(Continue) Statement.IVisitor<T>.VisitEnumDeclaration(EnumDeclaration) Statement.IVisitor<T>.VisitEnumMember(EnumMember)"
  },
  "api/Heir.AST.Abstract.INodeVisitor.html": {
    "href": "api/Heir.AST.Abstract.INodeVisitor.html",
    "title": "Interface INodeVisitor | Heir Docs",
    "summary": "Interface INodeVisitor Namespace Heir.AST.Abstract Assembly Heir.dll public interface INodeVisitor : INodeVisitor<Void>, Expression.IVisitor<Void>, Statement.IVisitor<Void> Inherited Members Expression.IVisitor<Void>.VisitIdentifierNameExpression(IdentifierName) Expression.IVisitor<Void>.VisitAssignmentOpExpression(AssignmentOp) Expression.IVisitor<Void>.VisitUnaryOpExpression(UnaryOp) Expression.IVisitor<Void>.VisitPostfixOpExpression(PostfixOp) Expression.IVisitor<Void>.VisitBinaryOpExpression(BinaryOp) Expression.IVisitor<Void>.VisitParenthesizedExpression(Parenthesized) Expression.IVisitor<Void>.VisitLiteralExpression(Literal) Expression.IVisitor<Void>.VisitObjectLiteralExpression(ObjectLiteral) Expression.IVisitor<Void>.VisitArrayLiteralExpression(ArrayLiteral) Expression.IVisitor<Void>.VisitNoOp(NoOp) Expression.IVisitor<Void>.VisitNoOp(NoOpType) Expression.IVisitor<Void>.VisitSingularTypeRef(SingularType) Expression.IVisitor<Void>.VisitParenthesizedTypeRef(ParenthesizedType) Expression.IVisitor<Void>.VisitUnionTypeRef(UnionType) Expression.IVisitor<Void>.VisitIntersectionTypeRef(IntersectionType) Expression.IVisitor<Void>.VisitFunctionTypeRef(FunctionType) Expression.IVisitor<Void>.VisitArrayTypeRef(ArrayType) Expression.IVisitor<Void>.VisitParameter(Parameter) Expression.IVisitor<Void>.VisitInvocationExpression(Invocation) Expression.IVisitor<Void>.VisitElementAccessExpression(ElementAccess) Expression.IVisitor<Void>.VisitMemberAccessExpression(MemberAccess) Expression.IVisitor<Void>.VisitNameOfExpression(NameOf) Expression.IVisitor<Void>.VisitTypeParameter(TypeParameter) Statement.IVisitor<Void>.VisitSyntaxTree(SyntaxTree) Statement.IVisitor<Void>.VisitVariableDeclaration(VariableDeclaration) Statement.IVisitor<Void>.VisitBlock(Block) Statement.IVisitor<Void>.VisitExpressionStatement(ExpressionStatement) Statement.IVisitor<Void>.VisitNoOp(NoOpStatement) Statement.IVisitor<Void>.VisitReturnStatement(Return) Statement.IVisitor<Void>.VisitFunctionDeclaration(FunctionDeclaration) Statement.IVisitor<Void>.VisitIfStatement(If) Statement.IVisitor<Void>.VisitWhileStatement(While) Statement.IVisitor<Void>.VisitInterfaceField(InterfaceField) Statement.IVisitor<Void>.VisitInterfaceDeclaration(InterfaceDeclaration) Statement.IVisitor<Void>.VisitBreakStatement(Break) Statement.IVisitor<Void>.VisitContinueStatement(Continue) Statement.IVisitor<Void>.VisitEnumDeclaration(EnumDeclaration) Statement.IVisitor<Void>.VisitEnumMember(EnumMember)"
  },
  "api/Heir.AST.Abstract.Name.html": {
    "href": "api/Heir.AST.Abstract.Name.html",
    "title": "Class Name | Heir Docs",
    "summary": "Class Name Namespace Heir.AST.Abstract Assembly Heir.dll public abstract class Name : AssignmentTarget Inheritance object SyntaxNode Expression AssignmentTarget Name Derived IdentifierName Inherited Members Expression.Accept<R>(Expression.IVisitor<R>) SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods ToString() Returns a string that represents the current object. public override abstract string ToString() Returns string A string that represents the current object."
  },
  "api/Heir.AST.Abstract.Statement.IVisitor-1.html": {
    "href": "api/Heir.AST.Abstract.Statement.IVisitor-1.html",
    "title": "Interface Statement.IVisitor<R> | Heir Docs",
    "summary": "Interface Statement.IVisitor<R> Namespace Heir.AST.Abstract Assembly Heir.dll public interface Statement.IVisitor<out R> Type Parameters R Methods VisitBlock(Block) R VisitBlock(Block block) Parameters block Block Returns R VisitBreakStatement(Break) R VisitBreakStatement(Break @break) Parameters break Break Returns R VisitContinueStatement(Continue) R VisitContinueStatement(Continue @continue) Parameters continue Continue Returns R VisitEnumDeclaration(EnumDeclaration) R VisitEnumDeclaration(EnumDeclaration enumDeclaration) Parameters enumDeclaration EnumDeclaration Returns R VisitEnumMember(EnumMember) R VisitEnumMember(EnumMember enumMember) Parameters enumMember EnumMember Returns R VisitExpressionStatement(ExpressionStatement) R VisitExpressionStatement(ExpressionStatement expressionStatement) Parameters expressionStatement ExpressionStatement Returns R VisitFunctionDeclaration(FunctionDeclaration) R VisitFunctionDeclaration(FunctionDeclaration functionDeclaration) Parameters functionDeclaration FunctionDeclaration Returns R VisitIfStatement(If) R VisitIfStatement(If @if) Parameters if If Returns R VisitInterfaceDeclaration(InterfaceDeclaration) R VisitInterfaceDeclaration(InterfaceDeclaration interfaceDeclaration) Parameters interfaceDeclaration InterfaceDeclaration Returns R VisitInterfaceField(InterfaceField) R VisitInterfaceField(InterfaceField interfaceField) Parameters interfaceField InterfaceField Returns R VisitNoOp(NoOpStatement) R VisitNoOp(NoOpStatement noOp) Parameters noOp NoOpStatement Returns R VisitReturnStatement(Return) R VisitReturnStatement(Return @return) Parameters return Return Returns R VisitSyntaxTree(SyntaxTree) R VisitSyntaxTree(SyntaxTree tree) Parameters tree SyntaxTree Returns R VisitVariableDeclaration(VariableDeclaration) R VisitVariableDeclaration(VariableDeclaration variableDeclaration) Parameters variableDeclaration VariableDeclaration Returns R VisitWhileStatement(While) R VisitWhileStatement(While @while) Parameters while While Returns R"
  },
  "api/Heir.AST.Abstract.Statement.html": {
    "href": "api/Heir.AST.Abstract.Statement.html",
    "title": "Class Statement | Heir Docs",
    "summary": "Class Statement Namespace Heir.AST.Abstract Assembly Heir.dll public abstract class Statement : SyntaxNode Inheritance object SyntaxNode Statement Derived Block Break Continue EnumDeclaration EnumMember ExpressionStatement FunctionDeclaration If InterfaceDeclaration InterfaceField NoOpStatement Return VariableDeclaration While Inherited Members SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Accept<R>(IVisitor<R>) public abstract R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R"
  },
  "api/Heir.AST.Abstract.SyntaxNode.html": {
    "href": "api/Heir.AST.Abstract.SyntaxNode.html",
    "title": "Class SyntaxNode | Heir Docs",
    "summary": "Class SyntaxNode Namespace Heir.AST.Abstract Assembly Heir.dll public abstract class SyntaxNode Inheritance object SyntaxNode Derived Expression Statement BoundSyntaxNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFirstToken() public Token GetFirstToken() Returns Token GetLastToken() public Token GetLastToken() Returns Token GetTokens() public abstract List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.Abstract.TypeRef.html": {
    "href": "api/Heir.AST.Abstract.TypeRef.html",
    "title": "Class TypeRef | Heir Docs",
    "summary": "Class TypeRef Namespace Heir.AST.Abstract Assembly Heir.dll public abstract class TypeRef : Expression Inheritance object SyntaxNode Expression TypeRef Derived ArrayType FunctionType IntersectionType NoOpType ParenthesizedType SingularType TypeParameter UnionType Inherited Members Expression.Accept<R>(Expression.IVisitor<R>) SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Heir.AST.Abstract.Void.html": {
    "href": "api/Heir.AST.Abstract.Void.html",
    "title": "Struct Void | Heir Docs",
    "summary": "Struct Void Namespace Heir.AST.Abstract Assembly Heir.dll public struct Void Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Heir.AST.Abstract.html": {
    "href": "api/Heir.AST.Abstract.html",
    "title": "Namespace Heir.AST.Abstract | Heir Docs",
    "summary": "Namespace Heir.AST.Abstract Classes AssignmentTarget Expression Name Statement SyntaxNode TypeRef Structs Void Interfaces Expression.IVisitor<R> INodeVisitor INodeVisitor<T> Statement.IVisitor<R>"
  },
  "api/Heir.AST.ArrayLiteral.html": {
    "href": "api/Heir.AST.ArrayLiteral.html",
    "title": "Class ArrayLiteral | Heir Docs",
    "summary": "Class ArrayLiteral Namespace Heir.AST Assembly Heir.dll public sealed class ArrayLiteral : Literal Inheritance object SyntaxNode Expression Literal ArrayLiteral Inherited Members Literal.Token SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ArrayLiteral(Token, List<Expression>?) public ArrayLiteral(Token token, List<Expression>? elements = null) Parameters token Token elements List<Expression> Properties Elements public List<Expression> Elements { get; } Property Value List<Expression> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.ArrayType.html": {
    "href": "api/Heir.AST.ArrayType.html",
    "title": "Class ArrayType | Heir Docs",
    "summary": "Class ArrayType Namespace Heir.AST Assembly Heir.dll public sealed class ArrayType : TypeRef Inheritance object SyntaxNode Expression TypeRef ArrayType Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ArrayType(TypeRef) public ArrayType(TypeRef elementType) Parameters elementType TypeRef Properties ElementType public TypeRef ElementType { get; } Property Value TypeRef Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.AssignmentOp.html": {
    "href": "api/Heir.AST.AssignmentOp.html",
    "title": "Class AssignmentOp | Heir Docs",
    "summary": "Class AssignmentOp Namespace Heir.AST Assembly Heir.dll public sealed class AssignmentOp : BinaryOp Inheritance object SyntaxNode Expression BinaryOp AssignmentOp Inherited Members BinaryOp.Left BinaryOp.Operator BinaryOp.Right BinaryOp.GetTokens() BinaryOp.WithLeft(Expression) SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AssignmentOp(AssignmentTarget, Token, Expression) public AssignmentOp(AssignmentTarget target, Token op, Expression right) Parameters target AssignmentTarget op Token right Expression Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R WithLeft(AssignmentTarget) public AssignmentOp WithLeft(AssignmentTarget left) Parameters left AssignmentTarget Returns AssignmentOp WithOperator(Token) public AssignmentOp WithOperator(Token op) Parameters op Token Returns AssignmentOp WithRight(Expression) public AssignmentOp WithRight(Expression right) Parameters right Expression Returns AssignmentOp"
  },
  "api/Heir.AST.BinaryOp.html": {
    "href": "api/Heir.AST.BinaryOp.html",
    "title": "Class BinaryOp | Heir Docs",
    "summary": "Class BinaryOp Namespace Heir.AST Assembly Heir.dll public class BinaryOp : Expression Inheritance object SyntaxNode Expression BinaryOp Derived AssignmentOp Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BinaryOp(Expression, Token, Expression) public BinaryOp(Expression left, Token op, Expression right) Parameters left Expression op Token right Expression Properties Left public Expression Left { get; } Property Value Expression Operator public Token Operator { get; } Property Value Token Right public Expression Right { get; } Property Value Expression Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token> WithLeft(Expression) public BinaryOp WithLeft(Expression left) Parameters left Expression Returns BinaryOp WithOperator(Token) public BinaryOp WithOperator(Token op) Parameters op Token Returns BinaryOp WithRight(Expression) public BinaryOp WithRight(Expression right) Parameters right Expression Returns BinaryOp"
  },
  "api/Heir.AST.Block.html": {
    "href": "api/Heir.AST.Block.html",
    "title": "Class Block | Heir Docs",
    "summary": "Class Block Namespace Heir.AST Assembly Heir.dll public class Block : Statement Inheritance object SyntaxNode Statement Block Derived SyntaxTree Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Block(List<Statement>) public Block(List<Statement> statements) Parameters statements List<Statement> Properties Statements public List<Statement> Statements { get; } Property Value List<Statement> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.Break.html": {
    "href": "api/Heir.AST.Break.html",
    "title": "Class Break | Heir Docs",
    "summary": "Class Break Namespace Heir.AST Assembly Heir.dll public sealed class Break : Statement Inheritance object SyntaxNode Statement Break Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Break(Token) public Break(Token keyword) Parameters keyword Token Properties Keyword public Token Keyword { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.Continue.html": {
    "href": "api/Heir.AST.Continue.html",
    "title": "Class Continue | Heir Docs",
    "summary": "Class Continue Namespace Heir.AST Assembly Heir.dll public sealed class Continue : Statement Inheritance object SyntaxNode Statement Continue Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Continue(Token) public Continue(Token keyword) Parameters keyword Token Properties Keyword public Token Keyword { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.ElementAccess.html": {
    "href": "api/Heir.AST.ElementAccess.html",
    "title": "Class ElementAccess | Heir Docs",
    "summary": "Class ElementAccess Namespace Heir.AST Assembly Heir.dll public sealed class ElementAccess : AssignmentTarget Inheritance object SyntaxNode Expression AssignmentTarget ElementAccess Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ElementAccess(Expression, Expression) public ElementAccess(Expression expression, Expression indexExpression) Parameters expression Expression indexExpression Expression Properties Expression public Expression Expression { get; } Property Value Expression IndexExpression public Expression IndexExpression { get; } Property Value Expression Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.EnumDeclaration.html": {
    "href": "api/Heir.AST.EnumDeclaration.html",
    "title": "Class EnumDeclaration | Heir Docs",
    "summary": "Class EnumDeclaration Namespace Heir.AST Assembly Heir.dll public sealed class EnumDeclaration : Statement Inheritance object SyntaxNode Statement EnumDeclaration Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EnumDeclaration(Token, IdentifierName, HashSet<EnumMember>, bool) public EnumDeclaration(Token keyword, IdentifierName name, HashSet<EnumMember> members, bool isInline) Parameters keyword Token name IdentifierName members HashSet<EnumMember> isInline bool Properties IsInline public bool IsInline { get; } Property Value bool Keyword public Token Keyword { get; } Property Value Token Members public HashSet<EnumMember> Members { get; } Property Value HashSet<EnumMember> Name public IdentifierName Name { get; } Property Value IdentifierName Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.EnumMember.html": {
    "href": "api/Heir.AST.EnumMember.html",
    "title": "Class EnumMember | Heir Docs",
    "summary": "Class EnumMember Namespace Heir.AST Assembly Heir.dll public sealed class EnumMember : Statement Inheritance object SyntaxNode Statement EnumMember Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EnumMember(IdentifierName, Literal) public EnumMember(IdentifierName name, Literal value) Parameters name IdentifierName value Literal Properties Name public IdentifierName Name { get; } Property Value IdentifierName Value public Literal Value { get; } Property Value Literal Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.ExpressionStatement.html": {
    "href": "api/Heir.AST.ExpressionStatement.html",
    "title": "Class ExpressionStatement | Heir Docs",
    "summary": "Class ExpressionStatement Namespace Heir.AST Assembly Heir.dll public sealed class ExpressionStatement : Statement Inheritance object SyntaxNode Statement ExpressionStatement Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ExpressionStatement(Expression) public ExpressionStatement(Expression expression) Parameters expression Expression Properties Expression public Expression Expression { get; } Property Value Expression Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.FunctionDeclaration.html": {
    "href": "api/Heir.AST.FunctionDeclaration.html",
    "title": "Class FunctionDeclaration | Heir Docs",
    "summary": "Class FunctionDeclaration Namespace Heir.AST Assembly Heir.dll public sealed class FunctionDeclaration : Statement Inheritance object SyntaxNode Statement FunctionDeclaration Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FunctionDeclaration(Token, IdentifierName, List<Parameter>, List<TypeParameter>, Block, TypeRef?) public FunctionDeclaration(Token keyword, IdentifierName name, List<Parameter> parameters, List<TypeParameter> typeParameters, Block body, TypeRef? returnType) Parameters keyword Token name IdentifierName parameters List<Parameter> typeParameters List<TypeParameter> body Block returnType TypeRef Properties Body public Block Body { get; } Property Value Block Keyword public Token Keyword { get; } Property Value Token Name public IdentifierName Name { get; } Property Value IdentifierName Parameters public List<Parameter> Parameters { get; } Property Value List<Parameter> ReturnType public TypeRef? ReturnType { get; } Property Value TypeRef TypeParameters public List<TypeParameter> TypeParameters { get; } Property Value List<TypeParameter> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.FunctionType.html": {
    "href": "api/Heir.AST.FunctionType.html",
    "title": "Class FunctionType | Heir Docs",
    "summary": "Class FunctionType Namespace Heir.AST Assembly Heir.dll public sealed class FunctionType : TypeRef Inheritance object SyntaxNode Expression TypeRef FunctionType Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FunctionType(Dictionary<string, TypeRef>, List<TypeParameter>, TypeRef) public FunctionType(Dictionary<string, TypeRef> parameterTypes, List<TypeParameter> typeParameters, TypeRef returnType) Parameters parameterTypes Dictionary<string, TypeRef> typeParameters List<TypeParameter> returnType TypeRef Properties ParameterTypes public Dictionary<string, TypeRef> ParameterTypes { get; } Property Value Dictionary<string, TypeRef> ReturnType public TypeRef ReturnType { get; } Property Value TypeRef TypeParameters public List<TypeParameter> TypeParameters { get; } Property Value List<TypeParameter> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.IdentifierName.html": {
    "href": "api/Heir.AST.IdentifierName.html",
    "title": "Class IdentifierName | Heir Docs",
    "summary": "Class IdentifierName Namespace Heir.AST Assembly Heir.dll public sealed class IdentifierName : Name Inheritance object SyntaxNode Expression AssignmentTarget Name IdentifierName Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors IdentifierName(Token) public IdentifierName(Token token) Parameters token Token Properties Token public Token Token { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Heir.AST.If.html": {
    "href": "api/Heir.AST.If.html",
    "title": "Class If | Heir Docs",
    "summary": "Class If Namespace Heir.AST Assembly Heir.dll public sealed class If : Statement Inheritance object SyntaxNode Statement If Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors If(Token, Expression, Statement, Statement?) public If(Token keyword, Expression condition, Statement body, Statement? elseBranch) Parameters keyword Token condition Expression body Statement elseBranch Statement Properties Body public Statement Body { get; } Property Value Statement Condition public Expression Condition { get; } Property Value Expression ElseBranch public Statement? ElseBranch { get; } Property Value Statement Keyword public Token Keyword { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.InterfaceDeclaration.html": {
    "href": "api/Heir.AST.InterfaceDeclaration.html",
    "title": "Class InterfaceDeclaration | Heir Docs",
    "summary": "Class InterfaceDeclaration Namespace Heir.AST Assembly Heir.dll public sealed class InterfaceDeclaration : Statement Inheritance object SyntaxNode Statement InterfaceDeclaration Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors InterfaceDeclaration(Token, Token, List<InterfaceField>) public InterfaceDeclaration(Token keyword, Token identifier, List<InterfaceField> fields) Parameters keyword Token identifier Token fields List<InterfaceField> Properties Fields public List<InterfaceField> Fields { get; } Property Value List<InterfaceField> Identifier public Token Identifier { get; } Property Value Token Keyword public Token Keyword { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.InterfaceField.html": {
    "href": "api/Heir.AST.InterfaceField.html",
    "title": "Class InterfaceField | Heir Docs",
    "summary": "Class InterfaceField Namespace Heir.AST Assembly Heir.dll public sealed class InterfaceField : Statement Inheritance object SyntaxNode Statement InterfaceField Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors InterfaceField(Token, TypeRef, bool) public InterfaceField(Token identifier, TypeRef type, bool isMutable) Parameters identifier Token type TypeRef isMutable bool Properties Identifier public Token Identifier { get; } Property Value Token IsMutable public bool IsMutable { get; } Property Value bool Type public TypeRef Type { get; } Property Value TypeRef Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.IntersectionType.html": {
    "href": "api/Heir.AST.IntersectionType.html",
    "title": "Class IntersectionType | Heir Docs",
    "summary": "Class IntersectionType Namespace Heir.AST Assembly Heir.dll public sealed class IntersectionType : TypeRef Inheritance object SyntaxNode Expression TypeRef IntersectionType Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors IntersectionType(List<TypeRef>) public IntersectionType(List<TypeRef> types) Parameters types List<TypeRef> Properties Types public List<TypeRef> Types { get; } Property Value List<TypeRef> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.Invocation.html": {
    "href": "api/Heir.AST.Invocation.html",
    "title": "Class Invocation | Heir Docs",
    "summary": "Class Invocation Namespace Heir.AST Assembly Heir.dll public sealed class Invocation : Expression Inheritance object SyntaxNode Expression Invocation Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Invocation(Expression, List<Expression>, List<TypeRef>) public Invocation(Expression callee, List<Expression> arguments, List<TypeRef> typeArguments) Parameters callee Expression arguments List<Expression> typeArguments List<TypeRef> Properties Arguments public List<Expression> Arguments { get; } Property Value List<Expression> Callee public Expression Callee { get; } Property Value Expression TypeArguments public List<TypeRef> TypeArguments { get; } Property Value List<TypeRef> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.Literal.html": {
    "href": "api/Heir.AST.Literal.html",
    "title": "Class Literal | Heir Docs",
    "summary": "Class Literal Namespace Heir.AST Assembly Heir.dll public class Literal : Expression Inheritance object SyntaxNode Expression Literal Derived ArrayLiteral ObjectLiteral Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Literal(Token) public Literal(Token token) Parameters token Token Properties Token public Token Token { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.MemberAccess.html": {
    "href": "api/Heir.AST.MemberAccess.html",
    "title": "Class MemberAccess | Heir Docs",
    "summary": "Class MemberAccess Namespace Heir.AST Assembly Heir.dll public sealed class MemberAccess : AssignmentTarget Inheritance object SyntaxNode Expression AssignmentTarget MemberAccess Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MemberAccess(Expression, IdentifierName) public MemberAccess(Expression expression, IdentifierName name) Parameters expression Expression name IdentifierName Properties Expression public Expression Expression { get; } Property Value Expression Name public IdentifierName Name { get; } Property Value IdentifierName Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.NameOf.html": {
    "href": "api/Heir.AST.NameOf.html",
    "title": "Class NameOf | Heir Docs",
    "summary": "Class NameOf Namespace Heir.AST Assembly Heir.dll public sealed class NameOf : Expression Inheritance object SyntaxNode Expression NameOf Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NameOf(IdentifierName) public NameOf(IdentifierName name) Parameters name IdentifierName Properties Name public IdentifierName Name { get; } Property Value IdentifierName Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.NoOp.html": {
    "href": "api/Heir.AST.NoOp.html",
    "title": "Class NoOp | Heir Docs",
    "summary": "Class NoOp Namespace Heir.AST Assembly Heir.dll public sealed class NoOp : Expression Inheritance object SyntaxNode Expression NoOp Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.NoOpStatement.html": {
    "href": "api/Heir.AST.NoOpStatement.html",
    "title": "Class NoOpStatement | Heir Docs",
    "summary": "Class NoOpStatement Namespace Heir.AST Assembly Heir.dll public sealed class NoOpStatement : Statement Inheritance object SyntaxNode Statement NoOpStatement Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.NoOpType.html": {
    "href": "api/Heir.AST.NoOpType.html",
    "title": "Class NoOpType | Heir Docs",
    "summary": "Class NoOpType Namespace Heir.AST Assembly Heir.dll public sealed class NoOpType : TypeRef Inheritance object SyntaxNode Expression TypeRef NoOpType Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.NodeTransformer.html": {
    "href": "api/Heir.AST.NodeTransformer.html",
    "title": "Class NodeTransformer | Heir Docs",
    "summary": "Class NodeTransformer Namespace Heir.AST Assembly Heir.dll public abstract class NodeTransformer : INodeVisitor<SyntaxNode?>, Expression.IVisitor<SyntaxNode?>, Statement.IVisitor<SyntaxNode?> Inheritance object NodeTransformer Implements INodeVisitor<SyntaxNode> Expression.IVisitor<SyntaxNode> Statement.IVisitor<SyntaxNode> Derived CompileTimeMacroEvaluator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NodeTransformer(SyntaxTree) protected NodeTransformer(SyntaxTree tree) Parameters tree SyntaxTree Properties CleanTree protected SyntaxTree CleanTree { get; } Property Value SyntaxTree Methods Transform() protected SyntaxTree Transform() Returns SyntaxTree Transform(Expression) protected Expression? Transform(Expression expression) Parameters expression Expression Returns Expression Transform(Statement) protected Statement? Transform(Statement statement) Parameters statement Statement Returns Statement Transform(SyntaxNode) protected SyntaxNode? Transform(SyntaxNode node) Parameters node SyntaxNode Returns SyntaxNode VisitArrayLiteralExpression(ArrayLiteral) public SyntaxNode? VisitArrayLiteralExpression(ArrayLiteral arrayLiteral) Parameters arrayLiteral ArrayLiteral Returns SyntaxNode VisitArrayTypeRef(ArrayType) public virtual SyntaxNode? VisitArrayTypeRef(ArrayType arrayType) Parameters arrayType ArrayType Returns SyntaxNode VisitAssignmentOpExpression(AssignmentOp) public virtual SyntaxNode? VisitAssignmentOpExpression(AssignmentOp assignmentOp) Parameters assignmentOp AssignmentOp Returns SyntaxNode VisitBinaryOpExpression(BinaryOp) public virtual SyntaxNode? VisitBinaryOpExpression(BinaryOp binaryOp) Parameters binaryOp BinaryOp Returns SyntaxNode VisitBlock(Block) public virtual SyntaxNode? VisitBlock(Block block) Parameters block Block Returns SyntaxNode VisitBreakStatement(Break) public virtual SyntaxNode? VisitBreakStatement(Break @break) Parameters break Break Returns SyntaxNode VisitContinueStatement(Continue) public virtual SyntaxNode? VisitContinueStatement(Continue @continue) Parameters continue Continue Returns SyntaxNode VisitElementAccessExpression(ElementAccess) public virtual SyntaxNode? VisitElementAccessExpression(ElementAccess elementAccess) Parameters elementAccess ElementAccess Returns SyntaxNode VisitEnumDeclaration(EnumDeclaration) public virtual SyntaxNode? VisitEnumDeclaration(EnumDeclaration enumDeclaration) Parameters enumDeclaration EnumDeclaration Returns SyntaxNode VisitEnumMember(EnumMember) public virtual SyntaxNode? VisitEnumMember(EnumMember enumMember) Parameters enumMember EnumMember Returns SyntaxNode VisitExpressionStatement(ExpressionStatement) public virtual SyntaxNode? VisitExpressionStatement(ExpressionStatement expressionStatement) Parameters expressionStatement ExpressionStatement Returns SyntaxNode VisitFunctionDeclaration(FunctionDeclaration) public virtual SyntaxNode? VisitFunctionDeclaration(FunctionDeclaration functionDeclaration) Parameters functionDeclaration FunctionDeclaration Returns SyntaxNode VisitFunctionTypeRef(FunctionType) public virtual SyntaxNode? VisitFunctionTypeRef(FunctionType functionType) Parameters functionType FunctionType Returns SyntaxNode VisitIdentifierNameExpression(IdentifierName) public virtual SyntaxNode? VisitIdentifierNameExpression(IdentifierName identifierName) Parameters identifierName IdentifierName Returns SyntaxNode VisitIfStatement(If) public virtual SyntaxNode? VisitIfStatement(If @if) Parameters if If Returns SyntaxNode VisitInterfaceDeclaration(InterfaceDeclaration) public virtual SyntaxNode? VisitInterfaceDeclaration(InterfaceDeclaration interfaceDeclaration) Parameters interfaceDeclaration InterfaceDeclaration Returns SyntaxNode VisitInterfaceField(InterfaceField) public virtual SyntaxNode? VisitInterfaceField(InterfaceField interfaceField) Parameters interfaceField InterfaceField Returns SyntaxNode VisitIntersectionTypeRef(IntersectionType) public virtual SyntaxNode? VisitIntersectionTypeRef(IntersectionType intersectionType) Parameters intersectionType IntersectionType Returns SyntaxNode VisitInvocationExpression(Invocation) public virtual SyntaxNode? VisitInvocationExpression(Invocation invocation) Parameters invocation Invocation Returns SyntaxNode VisitLiteralExpression(Literal) public virtual SyntaxNode? VisitLiteralExpression(Literal literal) Parameters literal Literal Returns SyntaxNode VisitMemberAccessExpression(MemberAccess) public virtual SyntaxNode? VisitMemberAccessExpression(MemberAccess memberAccess) Parameters memberAccess MemberAccess Returns SyntaxNode VisitNameOfExpression(NameOf) public virtual SyntaxNode? VisitNameOfExpression(NameOf nameOf) Parameters nameOf NameOf Returns SyntaxNode VisitNoOp(NoOp) public virtual SyntaxNode? VisitNoOp(NoOp noOp) Parameters noOp NoOp Returns SyntaxNode VisitNoOp(NoOpStatement) public virtual SyntaxNode? VisitNoOp(NoOpStatement noOp) Parameters noOp NoOpStatement Returns SyntaxNode VisitNoOp(NoOpType) public virtual SyntaxNode? VisitNoOp(NoOpType noOp) Parameters noOp NoOpType Returns SyntaxNode VisitObjectLiteralExpression(ObjectLiteral) public virtual SyntaxNode? VisitObjectLiteralExpression(ObjectLiteral objectLiteral) Parameters objectLiteral ObjectLiteral Returns SyntaxNode VisitParameter(Parameter) public virtual SyntaxNode? VisitParameter(Parameter parameter) Parameters parameter Parameter Returns SyntaxNode VisitParenthesizedExpression(Parenthesized) public virtual SyntaxNode? VisitParenthesizedExpression(Parenthesized parenthesized) Parameters parenthesized Parenthesized Returns SyntaxNode VisitParenthesizedTypeRef(ParenthesizedType) public virtual SyntaxNode? VisitParenthesizedTypeRef(ParenthesizedType parenthesizedType) Parameters parenthesizedType ParenthesizedType Returns SyntaxNode VisitPostfixOpExpression(PostfixOp) public virtual SyntaxNode? VisitPostfixOpExpression(PostfixOp postfixOp) Parameters postfixOp PostfixOp Returns SyntaxNode VisitReturnStatement(Return) public virtual SyntaxNode? VisitReturnStatement(Return @return) Parameters return Return Returns SyntaxNode VisitSingularTypeRef(SingularType) public virtual SyntaxNode? VisitSingularTypeRef(SingularType singularType) Parameters singularType SingularType Returns SyntaxNode VisitSyntaxTree(SyntaxTree) public virtual SyntaxNode? VisitSyntaxTree(SyntaxTree tree) Parameters tree SyntaxTree Returns SyntaxNode VisitTypeParameter(TypeParameter) public SyntaxNode? VisitTypeParameter(TypeParameter typeParameter) Parameters typeParameter TypeParameter Returns SyntaxNode VisitUnaryOpExpression(UnaryOp) public virtual SyntaxNode? VisitUnaryOpExpression(UnaryOp unaryOp) Parameters unaryOp UnaryOp Returns SyntaxNode VisitUnionTypeRef(UnionType) public virtual SyntaxNode? VisitUnionTypeRef(UnionType unionType) Parameters unionType UnionType Returns SyntaxNode VisitVariableDeclaration(VariableDeclaration) public virtual SyntaxNode? VisitVariableDeclaration(VariableDeclaration variableDeclaration) Parameters variableDeclaration VariableDeclaration Returns SyntaxNode VisitWhileStatement(While) public virtual SyntaxNode? VisitWhileStatement(While @while) Parameters while While Returns SyntaxNode"
  },
  "api/Heir.AST.ObjectLiteral.html": {
    "href": "api/Heir.AST.ObjectLiteral.html",
    "title": "Class ObjectLiteral | Heir Docs",
    "summary": "Class ObjectLiteral Namespace Heir.AST Assembly Heir.dll public sealed class ObjectLiteral : Literal Inheritance object SyntaxNode Expression Literal ObjectLiteral Inherited Members Literal.Token SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectLiteral(Token, Dictionary<Expression, Expression>?) public ObjectLiteral(Token token, Dictionary<Expression, Expression>? properties = null) Parameters token Token properties Dictionary<Expression, Expression> Properties Properties public Dictionary<Expression, Expression> Properties { get; } Property Value Dictionary<Expression, Expression> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.Parameter.html": {
    "href": "api/Heir.AST.Parameter.html",
    "title": "Class Parameter | Heir Docs",
    "summary": "Class Parameter Namespace Heir.AST Assembly Heir.dll public sealed class Parameter : Expression Inheritance object SyntaxNode Expression Parameter Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Parameter(IdentifierName, TypeRef?, Literal?) public Parameter(IdentifierName name, TypeRef? type, Literal? initializer) Parameters name IdentifierName type TypeRef initializer Literal Properties Initializer public Literal? Initializer { get; } Property Value Literal Name public IdentifierName Name { get; } Property Value IdentifierName Type public TypeRef? Type { get; } Property Value TypeRef Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token> WithInitializer(Literal?) public Parameter WithInitializer(Literal? initializer) Parameters initializer Literal Returns Parameter WithName(IdentifierName) public Parameter WithName(IdentifierName name) Parameters name IdentifierName Returns Parameter WithType(TypeRef?) public Parameter WithType(TypeRef? typeRef) Parameters typeRef TypeRef Returns Parameter"
  },
  "api/Heir.AST.Parenthesized.html": {
    "href": "api/Heir.AST.Parenthesized.html",
    "title": "Class Parenthesized | Heir Docs",
    "summary": "Class Parenthesized Namespace Heir.AST Assembly Heir.dll public sealed class Parenthesized : Expression Inheritance object SyntaxNode Expression Parenthesized Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Parenthesized(Expression) public Parenthesized(Expression expression) Parameters expression Expression Properties Expression public Expression Expression { get; } Property Value Expression Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.ParenthesizedType.html": {
    "href": "api/Heir.AST.ParenthesizedType.html",
    "title": "Class ParenthesizedType | Heir Docs",
    "summary": "Class ParenthesizedType Namespace Heir.AST Assembly Heir.dll public sealed class ParenthesizedType : TypeRef Inheritance object SyntaxNode Expression TypeRef ParenthesizedType Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ParenthesizedType(TypeRef) public ParenthesizedType(TypeRef type) Parameters type TypeRef Properties Type public TypeRef Type { get; } Property Value TypeRef Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.PostfixOp.html": {
    "href": "api/Heir.AST.PostfixOp.html",
    "title": "Class PostfixOp | Heir Docs",
    "summary": "Class PostfixOp Namespace Heir.AST Assembly Heir.dll public sealed class PostfixOp : Expression Inheritance object SyntaxNode Expression PostfixOp Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PostfixOp(Expression, Token) public PostfixOp(Expression operand, Token op) Parameters operand Expression op Token Properties Operand public Expression Operand { get; } Property Value Expression Operator public Token Operator { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.Return.html": {
    "href": "api/Heir.AST.Return.html",
    "title": "Class Return | Heir Docs",
    "summary": "Class Return Namespace Heir.AST Assembly Heir.dll public sealed class Return : Statement Inheritance object SyntaxNode Statement Return Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Return(Token, Expression) public Return(Token keyword, Expression expression) Parameters keyword Token expression Expression Properties Expression public Expression Expression { get; } Property Value Expression Keyword public Token Keyword { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.SingularType.html": {
    "href": "api/Heir.AST.SingularType.html",
    "title": "Class SingularType | Heir Docs",
    "summary": "Class SingularType Namespace Heir.AST Assembly Heir.dll public sealed class SingularType : TypeRef Inheritance object SyntaxNode Expression TypeRef SingularType Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SingularType(Token) public SingularType(Token token) Parameters token Token Properties Token public Token Token { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.SyntaxTree.html": {
    "href": "api/Heir.AST.SyntaxTree.html",
    "title": "Class SyntaxTree | Heir Docs",
    "summary": "Class SyntaxTree Namespace Heir.AST Assembly Heir.dll public sealed class SyntaxTree : Block Inheritance object SyntaxNode Statement Block SyntaxTree Inherited Members Block.Statements Block.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SyntaxTree(List<Statement>, DiagnosticBag) public SyntaxTree(List<Statement> statements, DiagnosticBag diagnostics) Parameters statements List<Statement> diagnostics DiagnosticBag Properties Diagnostics public DiagnosticBag Diagnostics { get; } Property Value DiagnosticBag Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R"
  },
  "api/Heir.AST.TypeParameter.html": {
    "href": "api/Heir.AST.TypeParameter.html",
    "title": "Class TypeParameter | Heir Docs",
    "summary": "Class TypeParameter Namespace Heir.AST Assembly Heir.dll public sealed class TypeParameter : TypeRef Inheritance object SyntaxNode Expression TypeRef TypeParameter Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TypeParameter(IdentifierName, TypeRef?, TypeRef?) public TypeParameter(IdentifierName name, TypeRef? baseType, TypeRef? initializer) Parameters name IdentifierName baseType TypeRef initializer TypeRef Properties BaseType public TypeRef? BaseType { get; } Property Value TypeRef Initializer public TypeRef? Initializer { get; } Property Value TypeRef Name public IdentifierName Name { get; } Property Value IdentifierName Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token> WithBaseType(TypeRef?) public TypeParameter WithBaseType(TypeRef? baseType) Parameters baseType TypeRef Returns TypeParameter WithInitializer(TypeRef?) public TypeParameter WithInitializer(TypeRef? initializer) Parameters initializer TypeRef Returns TypeParameter WithName(IdentifierName) public TypeParameter WithName(IdentifierName name) Parameters name IdentifierName Returns TypeParameter"
  },
  "api/Heir.AST.UnaryOp.html": {
    "href": "api/Heir.AST.UnaryOp.html",
    "title": "Class UnaryOp | Heir Docs",
    "summary": "Class UnaryOp Namespace Heir.AST Assembly Heir.dll public sealed class UnaryOp : Expression Inheritance object SyntaxNode Expression UnaryOp Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UnaryOp(Expression, Token) public UnaryOp(Expression operand, Token op) Parameters operand Expression op Token Properties Operand public Expression Operand { get; } Property Value Expression Operator public Token Operator { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.UnionType.html": {
    "href": "api/Heir.AST.UnionType.html",
    "title": "Class UnionType | Heir Docs",
    "summary": "Class UnionType Namespace Heir.AST Assembly Heir.dll public sealed class UnionType : TypeRef Inheritance object SyntaxNode Expression TypeRef UnionType Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UnionType(List<TypeRef>) public UnionType(List<TypeRef> types) Parameters types List<TypeRef> Properties Types public List<TypeRef> Types { get; } Property Value List<TypeRef> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Expression.IVisitor<R> visitor) Parameters visitor Expression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.VariableDeclaration.html": {
    "href": "api/Heir.AST.VariableDeclaration.html",
    "title": "Class VariableDeclaration | Heir Docs",
    "summary": "Class VariableDeclaration Namespace Heir.AST Assembly Heir.dll public sealed class VariableDeclaration : Statement Inheritance object SyntaxNode Statement VariableDeclaration Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors VariableDeclaration(IdentifierName, Expression?, TypeRef?, bool, bool) public VariableDeclaration(IdentifierName name, Expression? initializer, TypeRef? type, bool isMutable, bool isInline) Parameters name IdentifierName initializer Expression type TypeRef isMutable bool isInline bool Properties Initializer public Expression? Initializer { get; } Property Value Expression IsInline public bool IsInline { get; } Property Value bool IsMutable public bool IsMutable { get; } Property Value bool Name public IdentifierName Name { get; } Property Value IdentifierName Type public TypeRef? Type { get; } Property Value TypeRef Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.While.html": {
    "href": "api/Heir.AST.While.html",
    "title": "Class While | Heir Docs",
    "summary": "Class While Namespace Heir.AST Assembly Heir.dll public sealed class While : Statement Inheritance object SyntaxNode Statement While Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors While(Token, Expression, Statement) public While(Token keyword, Expression condition, Statement body) Parameters keyword Token condition Expression body Statement Properties Body public Statement Body { get; } Property Value Statement Condition public Expression Condition { get; } Property Value Expression Keyword public Token Keyword { get; } Property Value Token Methods Accept<R>(IVisitor<R>) public override R Accept<R>(Statement.IVisitor<R> visitor) Parameters visitor Statement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.AST.html": {
    "href": "api/Heir.AST.html",
    "title": "Namespace Heir.AST | Heir Docs",
    "summary": "Namespace Heir.AST Classes ArrayLiteral ArrayType AssignmentOp BinaryOp Block Break Continue ElementAccess EnumDeclaration EnumMember ExpressionStatement FunctionDeclaration FunctionType IdentifierName If InterfaceDeclaration InterfaceField IntersectionType Invocation Literal MemberAccess NameOf NoOp NoOpStatement NoOpType NodeTransformer ObjectLiteral Parameter Parenthesized ParenthesizedType PostfixOp Return SingularType SyntaxTree TypeParameter UnaryOp UnionType VariableDeclaration While"
  },
  "api/Heir.BiDictionary-2.html": {
    "href": "api/Heir.BiDictionary-2.html",
    "title": "Class BiDictionary<TKey, TValue> | Heir Docs",
    "summary": "Class BiDictionary<TKey, TValue> Namespace Heir Assembly Heir.dll public sealed class BiDictionary<TKey, TValue> where TKey : notnull where TValue : notnull Type Parameters TKey TValue Inheritance object BiDictionary<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BiDictionary(IDictionary<TKey, TValue>) public BiDictionary(IDictionary<TKey, TValue> initialItems) Parameters initialItems IDictionary<TKey, TValue> Fields Forward public readonly Dictionary<TKey, TValue> Forward Field Value Dictionary<TKey, TValue> Reverse public readonly Dictionary<TValue, TKey> Reverse Field Value Dictionary<TValue, TKey> Properties Count public int Count { get; } Property Value int Methods Contains(TKey) public bool Contains(TKey key) Parameters key TKey Returns bool Contains(TValue) public bool Contains(TValue value) Parameters value TValue Returns bool GetKey(TValue) public TKey GetKey(TValue value) Parameters value TValue Returns TKey GetValue(TKey) public TValue GetValue(TKey key) Parameters key TKey Returns TValue TryGetKey(TValue) public TKey? TryGetKey(TValue value) Parameters value TValue Returns TKey TryGetValue(TKey) public TValue? TryGetValue(TKey key) Parameters key TKey Returns TValue"
  },
  "api/Heir.Binder.html": {
    "href": "api/Heir.Binder.html",
    "title": "Class Binder | Heir Docs",
    "summary": "Class Binder Namespace Heir Assembly Heir.dll public sealed class Binder : Statement.IVisitor<BoundStatement>, Expression.IVisitor<BoundExpression> Inheritance object Binder Implements Statement.IVisitor<BoundStatement> Expression.IVisitor<BoundExpression> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Binder(DiagnosticBag, SyntaxTree) public Binder(DiagnosticBag diagnostics, SyntaxTree syntaxTree) Parameters diagnostics DiagnosticBag syntaxTree SyntaxTree Properties SyntaxTree public SyntaxTree SyntaxTree { get; } Property Value SyntaxTree Methods Bind() public BoundSyntaxTree Bind() Returns BoundSyntaxTree DefineTypeSymbol(TypeSymbol) public void DefineTypeSymbol(TypeSymbol typeSymbol) Parameters typeSymbol TypeSymbol DefineTypeSymbol(Token, BaseType, bool) public TypeSymbol DefineTypeSymbol(Token name, BaseType type, bool isIntrinsic = false) Parameters name Token type BaseType isIntrinsic bool Returns TypeSymbol DefineVariableSymbol(Token, BaseType, bool) public VariableSymbol<BaseType> DefineVariableSymbol(Token name, BaseType type, bool isMutable) Parameters name Token type BaseType isMutable bool Returns VariableSymbol<BaseType> DefineVariableSymbol<TType>(Token, TType, bool) public VariableSymbol<TType> DefineVariableSymbol<TType>(Token name, TType type, bool isMutable) where TType : BaseType Parameters name Token type TType isMutable bool Returns VariableSymbol<TType> Type Parameters TType FindTypeSymbol(Token, bool) public TypeSymbol? FindTypeSymbol(Token name, bool errorIfNotFound = true) Parameters name Token errorIfNotFound bool Returns TypeSymbol FindVariableSymbol(Token, bool) public VariableSymbol<BaseType>? FindVariableSymbol(Token name, bool errorIfNotFound = true) Parameters name Token errorIfNotFound bool Returns VariableSymbol<BaseType> GetBoundNode(Expression) public BoundExpression GetBoundNode(Expression expression) Parameters expression Expression Returns BoundExpression GetBoundNode(Statement) public BoundStatement GetBoundNode(Statement statement) Parameters statement Statement Returns BoundStatement GetBoundNode(SyntaxNode) public BoundSyntaxNode GetBoundNode(SyntaxNode node) Parameters node SyntaxNode Returns BoundSyntaxNode GetBoundSyntaxTree() public BoundSyntaxTree GetBoundSyntaxTree() Returns BoundSyntaxTree VisitArrayLiteralExpression(ArrayLiteral) public BoundExpression VisitArrayLiteralExpression(ArrayLiteral arrayLiteral) Parameters arrayLiteral ArrayLiteral Returns BoundExpression VisitArrayTypeRef(ArrayType) public BoundExpression VisitArrayTypeRef(ArrayType arrayType) Parameters arrayType ArrayType Returns BoundExpression VisitAssignmentOpExpression(AssignmentOp) public BoundExpression VisitAssignmentOpExpression(AssignmentOp assignmentOp) Parameters assignmentOp AssignmentOp Returns BoundExpression VisitBinaryOpExpression(BinaryOp) public BoundExpression VisitBinaryOpExpression(BinaryOp binaryOp) Parameters binaryOp BinaryOp Returns BoundExpression VisitBlock(Block) public BoundStatement VisitBlock(Block block) Parameters block Block Returns BoundStatement VisitBreakStatement(Break) public BoundStatement VisitBreakStatement(Break @break) Parameters break Break Returns BoundStatement VisitContinueStatement(Continue) public BoundStatement VisitContinueStatement(Continue @continue) Parameters continue Continue Returns BoundStatement VisitElementAccessExpression(ElementAccess) public BoundExpression VisitElementAccessExpression(ElementAccess elementAccess) Parameters elementAccess ElementAccess Returns BoundExpression VisitEnumDeclaration(EnumDeclaration) public BoundStatement VisitEnumDeclaration(EnumDeclaration enumDeclaration) Parameters enumDeclaration EnumDeclaration Returns BoundStatement VisitEnumMember(EnumMember) public BoundStatement VisitEnumMember(EnumMember enumMember) Parameters enumMember EnumMember Returns BoundStatement VisitExpressionStatement(ExpressionStatement) public BoundStatement VisitExpressionStatement(ExpressionStatement expressionStatement) Parameters expressionStatement ExpressionStatement Returns BoundStatement VisitFunctionDeclaration(FunctionDeclaration) public BoundStatement VisitFunctionDeclaration(FunctionDeclaration functionDeclaration) Parameters functionDeclaration FunctionDeclaration Returns BoundStatement VisitFunctionTypeRef(FunctionType) public BoundExpression VisitFunctionTypeRef(FunctionType functionType) Parameters functionType FunctionType Returns BoundExpression VisitIdentifierNameExpression(IdentifierName) public BoundExpression VisitIdentifierNameExpression(IdentifierName identifierName) Parameters identifierName IdentifierName Returns BoundExpression VisitIfStatement(If) public BoundStatement VisitIfStatement(If @if) Parameters if If Returns BoundStatement VisitInterfaceDeclaration(InterfaceDeclaration) public BoundStatement VisitInterfaceDeclaration(InterfaceDeclaration interfaceDeclaration) Parameters interfaceDeclaration InterfaceDeclaration Returns BoundStatement VisitInterfaceField(InterfaceField) public BoundStatement VisitInterfaceField(InterfaceField interfaceField) Parameters interfaceField InterfaceField Returns BoundStatement VisitIntersectionTypeRef(IntersectionType) public BoundExpression VisitIntersectionTypeRef(IntersectionType intersectionType) Parameters intersectionType IntersectionType Returns BoundExpression VisitInvocationExpression(Invocation) public BoundExpression VisitInvocationExpression(Invocation invocation) Parameters invocation Invocation Returns BoundExpression VisitLiteralExpression(Literal) public BoundExpression VisitLiteralExpression(Literal literal) Parameters literal Literal Returns BoundExpression VisitMemberAccessExpression(MemberAccess) public BoundExpression VisitMemberAccessExpression(MemberAccess memberAccess) Parameters memberAccess MemberAccess Returns BoundExpression VisitNameOfExpression(NameOf) public BoundExpression VisitNameOfExpression(NameOf nameOf) Parameters nameOf NameOf Returns BoundExpression VisitNoOp(NoOp) public BoundExpression VisitNoOp(NoOp noOp) Parameters noOp NoOp Returns BoundExpression VisitNoOp(NoOpStatement) public BoundStatement VisitNoOp(NoOpStatement noOp) Parameters noOp NoOpStatement Returns BoundStatement VisitNoOp(NoOpType) public BoundExpression VisitNoOp(NoOpType noOp) Parameters noOp NoOpType Returns BoundExpression VisitObjectLiteralExpression(ObjectLiteral) public BoundExpression VisitObjectLiteralExpression(ObjectLiteral objectLiteral) Parameters objectLiteral ObjectLiteral Returns BoundExpression VisitParameter(Parameter) public BoundExpression VisitParameter(Parameter parameter) Parameters parameter Parameter Returns BoundExpression VisitParenthesizedExpression(Parenthesized) public BoundExpression VisitParenthesizedExpression(Parenthesized parenthesized) Parameters parenthesized Parenthesized Returns BoundExpression VisitParenthesizedTypeRef(ParenthesizedType) public BoundExpression VisitParenthesizedTypeRef(ParenthesizedType parenthesizedType) Parameters parenthesizedType ParenthesizedType Returns BoundExpression VisitPostfixOpExpression(PostfixOp) public BoundExpression VisitPostfixOpExpression(PostfixOp postfixOp) Parameters postfixOp PostfixOp Returns BoundExpression VisitReturnStatement(Return) public BoundStatement VisitReturnStatement(Return @return) Parameters return Return Returns BoundStatement VisitSingularTypeRef(SingularType) public BoundExpression VisitSingularTypeRef(SingularType singularType) Parameters singularType SingularType Returns BoundExpression VisitSyntaxTree(SyntaxTree) public BoundStatement VisitSyntaxTree(SyntaxTree tree) Parameters tree SyntaxTree Returns BoundStatement VisitTypeParameter(TypeParameter) public BoundExpression VisitTypeParameter(TypeParameter typeParameter) Parameters typeParameter TypeParameter Returns BoundExpression VisitUnaryOpExpression(UnaryOp) public BoundExpression VisitUnaryOpExpression(UnaryOp unaryOp) Parameters unaryOp UnaryOp Returns BoundExpression VisitUnionTypeRef(UnionType) public BoundExpression VisitUnionTypeRef(UnionType unionType) Parameters unionType UnionType Returns BoundExpression VisitVariableDeclaration(VariableDeclaration) public BoundStatement VisitVariableDeclaration(VariableDeclaration variableDeclaration) Parameters variableDeclaration VariableDeclaration Returns BoundStatement VisitWhileStatement(While) public BoundStatement VisitWhileStatement(While @while) Parameters while While Returns BoundStatement"
  },
  "api/Heir.Binding.BoundBinaryOperator.html": {
    "href": "api/Heir.Binding.BoundBinaryOperator.html",
    "title": "Class BoundBinaryOperator | Heir Docs",
    "summary": "Class BoundBinaryOperator Namespace Heir.Binding Assembly Heir.dll public sealed class BoundBinaryOperator Inheritance object BoundBinaryOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields OpCodeMap public static readonly Dictionary<BoundBinaryOperatorType, OpCode> OpCodeMap Field Value Dictionary<BoundBinaryOperatorType, OpCode> Properties LeftType public BaseType LeftType { get; } Property Value BaseType ResultType public BaseType ResultType { get; } Property Value BaseType RightType public BaseType RightType { get; } Property Value BaseType SyntaxKind public SyntaxKind SyntaxKind { get; } Property Value SyntaxKind Type public BoundBinaryOperatorType Type { get; } Property Value BoundBinaryOperatorType Methods Bind(Token, BaseType, BaseType) public static BoundBinaryOperator? Bind(Token token, BaseType leftType, BaseType rightType) Parameters token Token leftType BaseType rightType BaseType Returns BoundBinaryOperator"
  },
  "api/Heir.Binding.BoundBinaryOperatorType.html": {
    "href": "api/Heir.Binding.BoundBinaryOperatorType.html",
    "title": "Enum BoundBinaryOperatorType | Heir Docs",
    "summary": "Enum BoundBinaryOperatorType Namespace Heir.Binding Assembly Heir.dll public enum BoundBinaryOperatorType Fields Addition = 0 Assignment = 21 BitShiftLeft = 10 BitShiftRight = 11 BitwiseAnd = 7 BitwiseOr = 8 BitwiseXor = 9 Concatenation = 20 Division = 3 Equals = 14 Exponentation = 5 GreaterThan = 18 GreaterThanOrEquals = 19 IntegerDivision = 4 LessThan = 16 LessThanOrEquals = 17 LogicalAnd = 13 LogicalOr = 12 Modulus = 6 Multiplication = 2 NotEquals = 15 Subtraction = 1"
  },
  "api/Heir.Binding.BoundPostfixOperator.html": {
    "href": "api/Heir.Binding.BoundPostfixOperator.html",
    "title": "Class BoundPostfixOperator | Heir Docs",
    "summary": "Class BoundPostfixOperator Namespace Heir.Binding Assembly Heir.dll public sealed class BoundPostfixOperator Inheritance object BoundPostfixOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties OperandType public BaseType OperandType { get; } Property Value BaseType ResultType public BaseType ResultType { get; } Property Value BaseType SyntaxKind public SyntaxKind SyntaxKind { get; } Property Value SyntaxKind Type public BoundPostfixOperatorType Type { get; } Property Value BoundPostfixOperatorType Methods Bind(Token, BaseType) public static BoundPostfixOperator? Bind(Token token, BaseType operandType) Parameters token Token operandType BaseType Returns BoundPostfixOperator"
  },
  "api/Heir.Binding.BoundPostfixOperatorType.html": {
    "href": "api/Heir.Binding.BoundPostfixOperatorType.html",
    "title": "Enum BoundPostfixOperatorType | Heir Docs",
    "summary": "Enum BoundPostfixOperatorType Namespace Heir.Binding Assembly Heir.dll public enum BoundPostfixOperatorType Fields NullForgiving = 0"
  },
  "api/Heir.Binding.BoundUnaryOperator.html": {
    "href": "api/Heir.Binding.BoundUnaryOperator.html",
    "title": "Class BoundUnaryOperator | Heir Docs",
    "summary": "Class BoundUnaryOperator Namespace Heir.Binding Assembly Heir.dll public sealed class BoundUnaryOperator Inheritance object BoundUnaryOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields OpCodeMap public static readonly Dictionary<BoundUnaryOperatorType, OpCode> OpCodeMap Field Value Dictionary<BoundUnaryOperatorType, OpCode> Properties OperandType public BaseType OperandType { get; } Property Value BaseType ResultType public BaseType ResultType { get; } Property Value BaseType SyntaxKind public SyntaxKind SyntaxKind { get; } Property Value SyntaxKind Type public BoundUnaryOperatorType Type { get; } Property Value BoundUnaryOperatorType Methods Bind(Token, BaseType) public static BoundUnaryOperator? Bind(Token token, BaseType operandType) Parameters token Token operandType BaseType Returns BoundUnaryOperator"
  },
  "api/Heir.Binding.BoundUnaryOperatorType.html": {
    "href": "api/Heir.Binding.BoundUnaryOperatorType.html",
    "title": "Enum BoundUnaryOperatorType | Heir Docs",
    "summary": "Enum BoundUnaryOperatorType Namespace Heir.Binding Assembly Heir.dll public enum BoundUnaryOperatorType Fields BitwiseNot = 4 Decrement = 2 Increment = 1 LogicalNot = 3 Negate = 0"
  },
  "api/Heir.Binding.ISymbol.html": {
    "href": "api/Heir.Binding.ISymbol.html",
    "title": "Interface ISymbol | Heir Docs",
    "summary": "Interface ISymbol Namespace Heir.Binding Assembly Heir.dll public interface ISymbol Properties IsIntrinsic bool IsIntrinsic { get; } Property Value bool Name Token Name { get; } Property Value Token"
  },
  "api/Heir.Binding.InterfaceMemberSignature.html": {
    "href": "api/Heir.Binding.InterfaceMemberSignature.html",
    "title": "Class InterfaceMemberSignature | Heir Docs",
    "summary": "Class InterfaceMemberSignature Namespace Heir.Binding Assembly Heir.dll public class InterfaceMemberSignature Inheritance object InterfaceMemberSignature Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InterfaceMemberSignature(BaseType, bool) public InterfaceMemberSignature(BaseType type, bool isMutable = false) Parameters type BaseType isMutable bool Properties IsMutable public bool IsMutable { get; } Property Value bool Type public BaseType Type { get; } Property Value BaseType Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Heir.Binding.TypeSymbol.html": {
    "href": "api/Heir.Binding.TypeSymbol.html",
    "title": "Class TypeSymbol | Heir Docs",
    "summary": "Class TypeSymbol Namespace Heir.Binding Assembly Heir.dll Binds a type to a name public class TypeSymbol : ISymbol Inheritance object TypeSymbol Implements ISymbol Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TypeSymbol(Token, BaseType, bool) Binds a type to a name public TypeSymbol(Token name, BaseType type, bool isIntrinsic = false) Parameters name Token type BaseType isIntrinsic bool Properties IsIntrinsic public bool IsIntrinsic { get; } Property Value bool Name public Token Name { get; } Property Value Token Type public BaseType Type { get; } Property Value BaseType Methods IsAssignableTo(TypeSymbol) public bool IsAssignableTo(TypeSymbol other) Parameters other TypeSymbol Returns bool"
  },
  "api/Heir.Binding.VariableSymbol-1.html": {
    "href": "api/Heir.Binding.VariableSymbol-1.html",
    "title": "Class VariableSymbol<T> | Heir Docs",
    "summary": "Class VariableSymbol<T> Namespace Heir.Binding Assembly Heir.dll Binds a name to a type public class VariableSymbol<T> : ISymbol where T : BaseType Type Parameters T Inheritance object VariableSymbol<T> Implements ISymbol Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors VariableSymbol(Token, T, bool, bool) Binds a name to a type public VariableSymbol(Token name, T type, bool isMutable, bool isIntrinsic = false) Parameters name Token type T isMutable bool isIntrinsic bool Properties IsIntrinsic public bool IsIntrinsic { get; } Property Value bool IsMutable public bool IsMutable { get; } Property Value bool Name public Token Name { get; } Property Value Token Type public T Type { get; } Property Value T Methods ToString() public string ToString() Returns string"
  },
  "api/Heir.Binding.html": {
    "href": "api/Heir.Binding.html",
    "title": "Namespace Heir.Binding | Heir Docs",
    "summary": "Namespace Heir.Binding Classes BoundBinaryOperator BoundPostfixOperator BoundUnaryOperator InterfaceMemberSignature TypeSymbol Binds a type to a name VariableSymbol<T> Binds a name to a type Interfaces ISymbol Enums BoundBinaryOperatorType BoundPostfixOperatorType BoundUnaryOperatorType"
  },
  "api/Heir.BoundAST.Abstract.BoundAssignmentTarget.html": {
    "href": "api/Heir.BoundAST.Abstract.BoundAssignmentTarget.html",
    "title": "Class BoundAssignmentTarget | Heir Docs",
    "summary": "Class BoundAssignmentTarget Namespace Heir.BoundAST.Abstract Assembly Heir.dll public abstract class BoundAssignmentTarget : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundAssignmentTarget Derived BoundName BoundMemberAccess Inherited Members BoundExpression.Type BoundExpression.Accept<R>(BoundExpression.IVisitor<R>) SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Heir.BoundAST.Abstract.BoundExpression.IVisitor-1.html": {
    "href": "api/Heir.BoundAST.Abstract.BoundExpression.IVisitor-1.html",
    "title": "Interface BoundExpression.IVisitor<R> | Heir Docs",
    "summary": "Interface BoundExpression.IVisitor<R> Namespace Heir.BoundAST.Abstract Assembly Heir.dll public interface BoundExpression.IVisitor<out R> Type Parameters R Methods VisitBoundArrayLiteralExpression(BoundArrayLiteral) R VisitBoundArrayLiteralExpression(BoundArrayLiteral arrayLiteral) Parameters arrayLiteral BoundArrayLiteral Returns R VisitBoundAssignmentOpExpression(BoundAssignmentOp) R VisitBoundAssignmentOpExpression(BoundAssignmentOp assignmentOp) Parameters assignmentOp BoundAssignmentOp Returns R VisitBoundBinaryOpExpression(BoundBinaryOp) R VisitBoundBinaryOpExpression(BoundBinaryOp binaryOp) Parameters binaryOp BoundBinaryOp Returns R VisitBoundElementAccessExpression(BoundElementAccess) R VisitBoundElementAccessExpression(BoundElementAccess elementAccess) Parameters elementAccess BoundElementAccess Returns R VisitBoundIdentifierNameExpression(BoundIdentifierName) R VisitBoundIdentifierNameExpression(BoundIdentifierName identifierName) Parameters identifierName BoundIdentifierName Returns R VisitBoundInvocationExpression(BoundInvocation) R VisitBoundInvocationExpression(BoundInvocation invocation) Parameters invocation BoundInvocation Returns R VisitBoundLiteralExpression(BoundLiteral) R VisitBoundLiteralExpression(BoundLiteral literal) Parameters literal BoundLiteral Returns R VisitBoundMemberAccessExpression(BoundMemberAccess) R VisitBoundMemberAccessExpression(BoundMemberAccess memberAccess) Parameters memberAccess BoundMemberAccess Returns R VisitBoundNoOp(BoundNoOp) R VisitBoundNoOp(BoundNoOp noOp) Parameters noOp BoundNoOp Returns R VisitBoundObjectLiteralExpression(BoundObjectLiteral) R VisitBoundObjectLiteralExpression(BoundObjectLiteral objectLiteral) Parameters objectLiteral BoundObjectLiteral Returns R VisitBoundParameter(BoundParameter) R VisitBoundParameter(BoundParameter boundParameter) Parameters boundParameter BoundParameter Returns R VisitBoundParenthesizedExpression(BoundParenthesized) R VisitBoundParenthesizedExpression(BoundParenthesized parenthesized) Parameters parenthesized BoundParenthesized Returns R VisitBoundPostfixOpExpression(BoundPostfixOp) R VisitBoundPostfixOpExpression(BoundPostfixOp postfixOp) Parameters postfixOp BoundPostfixOp Returns R VisitBoundTypeParameter(BoundTypeParameter) R VisitBoundTypeParameter(BoundTypeParameter boundTypeParameter) Parameters boundTypeParameter BoundTypeParameter Returns R VisitBoundUnaryOpExpression(BoundUnaryOp) R VisitBoundUnaryOpExpression(BoundUnaryOp unaryOp) Parameters unaryOp BoundUnaryOp Returns R"
  },
  "api/Heir.BoundAST.Abstract.BoundExpression.html": {
    "href": "api/Heir.BoundAST.Abstract.BoundExpression.html",
    "title": "Class BoundExpression | Heir Docs",
    "summary": "Class BoundExpression Namespace Heir.BoundAST.Abstract Assembly Heir.dll public abstract class BoundExpression : BoundSyntaxNode Inheritance object SyntaxNode BoundSyntaxNode BoundExpression Derived BoundAssignmentTarget BoundArrayLiteral BoundBinaryOp BoundElementAccess BoundInvocation BoundLiteral BoundNoOp BoundObjectLiteral BoundParameter BoundParenthesized BoundPostfixOp BoundTypeParameter BoundUnaryOp Inherited Members SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Type public abstract BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public abstract R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R"
  },
  "api/Heir.BoundAST.Abstract.BoundName.html": {
    "href": "api/Heir.BoundAST.Abstract.BoundName.html",
    "title": "Class BoundName | Heir Docs",
    "summary": "Class BoundName Namespace Heir.BoundAST.Abstract Assembly Heir.dll public abstract class BoundName : BoundAssignmentTarget Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundAssignmentTarget BoundName Derived BoundIdentifierName Inherited Members BoundExpression.Type BoundExpression.Accept<R>(BoundExpression.IVisitor<R>) SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Heir.BoundAST.Abstract.BoundStatement.IVisitor-1.html": {
    "href": "api/Heir.BoundAST.Abstract.BoundStatement.IVisitor-1.html",
    "title": "Interface BoundStatement.IVisitor<R> | Heir Docs",
    "summary": "Interface BoundStatement.IVisitor<R> Namespace Heir.BoundAST.Abstract Assembly Heir.dll public interface BoundStatement.IVisitor<out R> Type Parameters R Methods VisitBoundBlock(BoundBlock) R VisitBoundBlock(BoundBlock boundBlock) Parameters boundBlock BoundBlock Returns R VisitBoundBreakStatement(BoundBreak) R VisitBoundBreakStatement(BoundBreak @break) Parameters break BoundBreak Returns R VisitBoundContinueStatement(BoundContinue) R VisitBoundContinueStatement(BoundContinue @continue) Parameters continue BoundContinue Returns R VisitBoundEnumDeclaration(BoundEnumDeclaration) R VisitBoundEnumDeclaration(BoundEnumDeclaration enumDeclaration) Parameters enumDeclaration BoundEnumDeclaration Returns R VisitBoundEnumMember(BoundEnumMember) R VisitBoundEnumMember(BoundEnumMember enumMember) Parameters enumMember BoundEnumMember Returns R VisitBoundExpressionStatement(BoundExpressionStatement) R VisitBoundExpressionStatement(BoundExpressionStatement expressionStatement) Parameters expressionStatement BoundExpressionStatement Returns R VisitBoundFunctionDeclaration(BoundFunctionDeclaration) R VisitBoundFunctionDeclaration(BoundFunctionDeclaration declaration) Parameters declaration BoundFunctionDeclaration Returns R VisitBoundIfStatement(BoundIf) R VisitBoundIfStatement(BoundIf @if) Parameters if BoundIf Returns R VisitBoundNoOp(BoundNoOpStatement) R VisitBoundNoOp(BoundNoOpStatement noOp) Parameters noOp BoundNoOpStatement Returns R VisitBoundReturnStatement(BoundReturn) R VisitBoundReturnStatement(BoundReturn @return) Parameters return BoundReturn Returns R VisitBoundSyntaxTree(BoundSyntaxTree) R VisitBoundSyntaxTree(BoundSyntaxTree tree) Parameters tree BoundSyntaxTree Returns R VisitBoundVariableDeclaration(BoundVariableDeclaration) R VisitBoundVariableDeclaration(BoundVariableDeclaration variableDeclaration) Parameters variableDeclaration BoundVariableDeclaration Returns R VisitBoundWhileStatement(BoundWhile) R VisitBoundWhileStatement(BoundWhile @while) Parameters while BoundWhile Returns R"
  },
  "api/Heir.BoundAST.Abstract.BoundStatement.html": {
    "href": "api/Heir.BoundAST.Abstract.BoundStatement.html",
    "title": "Class BoundStatement | Heir Docs",
    "summary": "Class BoundStatement Namespace Heir.BoundAST.Abstract Assembly Heir.dll public abstract class BoundStatement : BoundSyntaxNode Inheritance object SyntaxNode BoundSyntaxNode BoundStatement Derived BoundBlock BoundBreak BoundContinue BoundEnumDeclaration BoundEnumMember BoundExpressionStatement BoundFunctionDeclaration BoundIf BoundNoOpStatement BoundReturn BoundVariableDeclaration BoundWhile Inherited Members SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Type public abstract BaseType? Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public abstract R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R"
  },
  "api/Heir.BoundAST.Abstract.BoundSyntaxNode.html": {
    "href": "api/Heir.BoundAST.Abstract.BoundSyntaxNode.html",
    "title": "Class BoundSyntaxNode | Heir Docs",
    "summary": "Class BoundSyntaxNode Namespace Heir.BoundAST.Abstract Assembly Heir.dll public abstract class BoundSyntaxNode : SyntaxNode Inheritance object SyntaxNode BoundSyntaxNode Derived BoundExpression BoundStatement Inherited Members SyntaxNode.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Heir.BoundAST.Abstract.IBoundNodeVisitor-1.html": {
    "href": "api/Heir.BoundAST.Abstract.IBoundNodeVisitor-1.html",
    "title": "Interface IBoundNodeVisitor<T> | Heir Docs",
    "summary": "Interface IBoundNodeVisitor<T> Namespace Heir.BoundAST.Abstract Assembly Heir.dll public interface IBoundNodeVisitor<out T> : BoundExpression.IVisitor<T>, BoundStatement.IVisitor<T> Type Parameters T Inherited Members BoundExpression.IVisitor<T>.VisitBoundIdentifierNameExpression(BoundIdentifierName) BoundExpression.IVisitor<T>.VisitBoundAssignmentOpExpression(BoundAssignmentOp) BoundExpression.IVisitor<T>.VisitBoundUnaryOpExpression(BoundUnaryOp) BoundExpression.IVisitor<T>.VisitBoundPostfixOpExpression(BoundPostfixOp) BoundExpression.IVisitor<T>.VisitBoundBinaryOpExpression(BoundBinaryOp) BoundExpression.IVisitor<T>.VisitBoundParenthesizedExpression(BoundParenthesized) BoundExpression.IVisitor<T>.VisitBoundLiteralExpression(BoundLiteral) BoundExpression.IVisitor<T>.VisitBoundObjectLiteralExpression(BoundObjectLiteral) BoundExpression.IVisitor<T>.VisitBoundArrayLiteralExpression(BoundArrayLiteral) BoundExpression.IVisitor<T>.VisitBoundNoOp(BoundNoOp) BoundExpression.IVisitor<T>.VisitBoundParameter(BoundParameter) BoundExpression.IVisitor<T>.VisitBoundTypeParameter(BoundTypeParameter) BoundExpression.IVisitor<T>.VisitBoundInvocationExpression(BoundInvocation) BoundExpression.IVisitor<T>.VisitBoundElementAccessExpression(BoundElementAccess) BoundExpression.IVisitor<T>.VisitBoundMemberAccessExpression(BoundMemberAccess) BoundStatement.IVisitor<T>.VisitBoundSyntaxTree(BoundSyntaxTree) BoundStatement.IVisitor<T>.VisitBoundBlock(BoundBlock) BoundStatement.IVisitor<T>.VisitBoundVariableDeclaration(BoundVariableDeclaration) BoundStatement.IVisitor<T>.VisitBoundExpressionStatement(BoundExpressionStatement) BoundStatement.IVisitor<T>.VisitBoundNoOp(BoundNoOpStatement) BoundStatement.IVisitor<T>.VisitBoundReturnStatement(BoundReturn) BoundStatement.IVisitor<T>.VisitBoundFunctionDeclaration(BoundFunctionDeclaration) BoundStatement.IVisitor<T>.VisitBoundIfStatement(BoundIf) BoundStatement.IVisitor<T>.VisitBoundWhileStatement(BoundWhile) BoundStatement.IVisitor<T>.VisitBoundBreakStatement(BoundBreak) BoundStatement.IVisitor<T>.VisitBoundContinueStatement(BoundContinue) BoundStatement.IVisitor<T>.VisitBoundEnumDeclaration(BoundEnumDeclaration) BoundStatement.IVisitor<T>.VisitBoundEnumMember(BoundEnumMember)"
  },
  "api/Heir.BoundAST.Abstract.IBoundNodeVisitor.html": {
    "href": "api/Heir.BoundAST.Abstract.IBoundNodeVisitor.html",
    "title": "Interface IBoundNodeVisitor | Heir Docs",
    "summary": "Interface IBoundNodeVisitor Namespace Heir.BoundAST.Abstract Assembly Heir.dll public interface IBoundNodeVisitor : IBoundNodeVisitor<Void>, BoundExpression.IVisitor<Void>, BoundStatement.IVisitor<Void> Inherited Members BoundExpression.IVisitor<Void>.VisitBoundIdentifierNameExpression(BoundIdentifierName) BoundExpression.IVisitor<Void>.VisitBoundAssignmentOpExpression(BoundAssignmentOp) BoundExpression.IVisitor<Void>.VisitBoundUnaryOpExpression(BoundUnaryOp) BoundExpression.IVisitor<Void>.VisitBoundPostfixOpExpression(BoundPostfixOp) BoundExpression.IVisitor<Void>.VisitBoundBinaryOpExpression(BoundBinaryOp) BoundExpression.IVisitor<Void>.VisitBoundParenthesizedExpression(BoundParenthesized) BoundExpression.IVisitor<Void>.VisitBoundLiteralExpression(BoundLiteral) BoundExpression.IVisitor<Void>.VisitBoundObjectLiteralExpression(BoundObjectLiteral) BoundExpression.IVisitor<Void>.VisitBoundArrayLiteralExpression(BoundArrayLiteral) BoundExpression.IVisitor<Void>.VisitBoundNoOp(BoundNoOp) BoundExpression.IVisitor<Void>.VisitBoundParameter(BoundParameter) BoundExpression.IVisitor<Void>.VisitBoundTypeParameter(BoundTypeParameter) BoundExpression.IVisitor<Void>.VisitBoundInvocationExpression(BoundInvocation) BoundExpression.IVisitor<Void>.VisitBoundElementAccessExpression(BoundElementAccess) BoundExpression.IVisitor<Void>.VisitBoundMemberAccessExpression(BoundMemberAccess) BoundStatement.IVisitor<Void>.VisitBoundSyntaxTree(BoundSyntaxTree) BoundStatement.IVisitor<Void>.VisitBoundBlock(BoundBlock) BoundStatement.IVisitor<Void>.VisitBoundVariableDeclaration(BoundVariableDeclaration) BoundStatement.IVisitor<Void>.VisitBoundExpressionStatement(BoundExpressionStatement) BoundStatement.IVisitor<Void>.VisitBoundNoOp(BoundNoOpStatement) BoundStatement.IVisitor<Void>.VisitBoundReturnStatement(BoundReturn) BoundStatement.IVisitor<Void>.VisitBoundFunctionDeclaration(BoundFunctionDeclaration) BoundStatement.IVisitor<Void>.VisitBoundIfStatement(BoundIf) BoundStatement.IVisitor<Void>.VisitBoundWhileStatement(BoundWhile) BoundStatement.IVisitor<Void>.VisitBoundBreakStatement(BoundBreak) BoundStatement.IVisitor<Void>.VisitBoundContinueStatement(BoundContinue) BoundStatement.IVisitor<Void>.VisitBoundEnumDeclaration(BoundEnumDeclaration) BoundStatement.IVisitor<Void>.VisitBoundEnumMember(BoundEnumMember)"
  },
  "api/Heir.BoundAST.Abstract.Void.html": {
    "href": "api/Heir.BoundAST.Abstract.Void.html",
    "title": "Struct Void | Heir Docs",
    "summary": "Struct Void Namespace Heir.BoundAST.Abstract Assembly Heir.dll public struct Void Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Heir.BoundAST.Abstract.html": {
    "href": "api/Heir.BoundAST.Abstract.html",
    "title": "Namespace Heir.BoundAST.Abstract | Heir Docs",
    "summary": "Namespace Heir.BoundAST.Abstract Classes BoundAssignmentTarget BoundExpression BoundName BoundStatement BoundSyntaxNode Structs Void Interfaces BoundExpression.IVisitor<R> BoundStatement.IVisitor<R> IBoundNodeVisitor IBoundNodeVisitor<T>"
  },
  "api/Heir.BoundAST.BoundArrayLiteral.html": {
    "href": "api/Heir.BoundAST.BoundArrayLiteral.html",
    "title": "Class BoundArrayLiteral | Heir Docs",
    "summary": "Class BoundArrayLiteral Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundArrayLiteral : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundArrayLiteral Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundArrayLiteral(Token, List<BoundExpression>, ArrayType) public BoundArrayLiteral(Token bracket, List<BoundExpression> elements, ArrayType type) Parameters bracket Token elements List<BoundExpression> type ArrayType Properties Elements public List<BoundExpression> Elements { get; } Property Value List<BoundExpression> Token public Token Token { get; } Property Value Token Type public override ArrayType Type { get; } Property Value ArrayType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundAssignmentOp.html": {
    "href": "api/Heir.BoundAST.BoundAssignmentOp.html",
    "title": "Class BoundAssignmentOp | Heir Docs",
    "summary": "Class BoundAssignmentOp Namespace Heir.BoundAST Assembly Heir.dll public class BoundAssignmentOp : BoundBinaryOp Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundBinaryOp BoundAssignmentOp Inherited Members BoundBinaryOp.Type BoundBinaryOp.Left BoundBinaryOp.Operator BoundBinaryOp.Right BoundBinaryOp.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundAssignmentOp(BoundExpression, BoundBinaryOperator, BoundExpression) public BoundAssignmentOp(BoundExpression left, BoundBinaryOperator op, BoundExpression right) Parameters left BoundExpression op BoundBinaryOperator right BoundExpression Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R"
  },
  "api/Heir.BoundAST.BoundBinaryOp.html": {
    "href": "api/Heir.BoundAST.BoundBinaryOp.html",
    "title": "Class BoundBinaryOp | Heir Docs",
    "summary": "Class BoundBinaryOp Namespace Heir.BoundAST Assembly Heir.dll public class BoundBinaryOp : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundBinaryOp Derived BoundAssignmentOp Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundBinaryOp(BoundExpression, BoundBinaryOperator, BoundExpression) public BoundBinaryOp(BoundExpression left, BoundBinaryOperator op, BoundExpression right) Parameters left BoundExpression op BoundBinaryOperator right BoundExpression Properties Left public BoundExpression Left { get; } Property Value BoundExpression Operator public BoundBinaryOperator Operator { get; } Property Value BoundBinaryOperator Right public BoundExpression Right { get; } Property Value BoundExpression Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundBlock.html": {
    "href": "api/Heir.BoundAST.BoundBlock.html",
    "title": "Class BoundBlock | Heir Docs",
    "summary": "Class BoundBlock Namespace Heir.BoundAST Assembly Heir.dll public class BoundBlock : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundBlock Derived BoundSyntaxTree Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundBlock(List<BoundStatement>) public BoundBlock(List<BoundStatement> statements) Parameters statements List<BoundStatement> Properties Statements public List<BoundStatement> Statements { get; } Property Value List<BoundStatement> Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundBreak.html": {
    "href": "api/Heir.BoundAST.BoundBreak.html",
    "title": "Class BoundBreak | Heir Docs",
    "summary": "Class BoundBreak Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundBreak : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundBreak Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundBreak(Token) public BoundBreak(Token keyword) Parameters keyword Token Properties Keyword public Token Keyword { get; } Property Value Token Type public override BaseType? Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundContinue.html": {
    "href": "api/Heir.BoundAST.BoundContinue.html",
    "title": "Class BoundContinue | Heir Docs",
    "summary": "Class BoundContinue Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundContinue : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundContinue Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundContinue(Token) public BoundContinue(Token keyword) Parameters keyword Token Properties Keyword public Token Keyword { get; } Property Value Token Type public override BaseType? Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundElementAccess.html": {
    "href": "api/Heir.BoundAST.BoundElementAccess.html",
    "title": "Class BoundElementAccess | Heir Docs",
    "summary": "Class BoundElementAccess Namespace Heir.BoundAST Assembly Heir.dll public class BoundElementAccess : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundElementAccess Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundElementAccess(BoundExpression, BoundExpression) public BoundElementAccess(BoundExpression expression, BoundExpression indexExpression) Parameters expression BoundExpression indexExpression BoundExpression Properties Expression public BoundExpression Expression { get; } Property Value BoundExpression IndexExpression public BoundExpression IndexExpression { get; } Property Value BoundExpression Type public override sealed BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundEnumDeclaration.html": {
    "href": "api/Heir.BoundAST.BoundEnumDeclaration.html",
    "title": "Class BoundEnumDeclaration | Heir Docs",
    "summary": "Class BoundEnumDeclaration Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundEnumDeclaration : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundEnumDeclaration Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundEnumDeclaration(Token, VariableSymbol<InterfaceType>, HashSet<BoundEnumMember>, bool) public BoundEnumDeclaration(Token keyword, VariableSymbol<InterfaceType> symbol, HashSet<BoundEnumMember> members, bool isInline) Parameters keyword Token symbol VariableSymbol<InterfaceType> members HashSet<BoundEnumMember> isInline bool Properties IsInline public bool IsInline { get; } Property Value bool Keyword public Token Keyword { get; } Property Value Token MemberTypes public List<BaseType> MemberTypes { get; } Property Value List<BaseType> Members public HashSet<BoundEnumMember> Members { get; } Property Value HashSet<BoundEnumMember> Symbol public VariableSymbol<InterfaceType> Symbol { get; } Property Value VariableSymbol<InterfaceType> Type public override BaseType Type { get; } Property Value BaseType TypeSymbol public TypeSymbol TypeSymbol { get; } Property Value TypeSymbol Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundEnumMember.html": {
    "href": "api/Heir.BoundAST.BoundEnumMember.html",
    "title": "Class BoundEnumMember | Heir Docs",
    "summary": "Class BoundEnumMember Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundEnumMember : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundEnumMember Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundEnumMember(Token, BoundLiteral) public BoundEnumMember(Token name, BoundLiteral value) Parameters name Token value BoundLiteral Properties Name public Token Name { get; } Property Value Token Type public override LiteralType Type { get; } Property Value LiteralType Value public BoundLiteral Value { get; } Property Value BoundLiteral Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundExpressionStatement.html": {
    "href": "api/Heir.BoundAST.BoundExpressionStatement.html",
    "title": "Class BoundExpressionStatement | Heir Docs",
    "summary": "Class BoundExpressionStatement Namespace Heir.BoundAST Assembly Heir.dll public class BoundExpressionStatement : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundExpressionStatement Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundExpressionStatement(BoundExpression) public BoundExpressionStatement(BoundExpression expression) Parameters expression BoundExpression Properties Expression public BoundExpression Expression { get; } Property Value BoundExpression Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundFunctionDeclaration.html": {
    "href": "api/Heir.BoundAST.BoundFunctionDeclaration.html",
    "title": "Class BoundFunctionDeclaration | Heir Docs",
    "summary": "Class BoundFunctionDeclaration Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundFunctionDeclaration : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundFunctionDeclaration Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundFunctionDeclaration(Token, VariableSymbol<FunctionType>, List<BoundParameter>, List<BoundTypeParameter>, BoundBlock) public BoundFunctionDeclaration(Token keyword, VariableSymbol<FunctionType> symbol, List<BoundParameter> parameters, List<BoundTypeParameter> typeParameters, BoundBlock body) Parameters keyword Token symbol VariableSymbol<FunctionType> parameters List<BoundParameter> typeParameters List<BoundTypeParameter> body BoundBlock Properties Body public BoundBlock Body { get; } Property Value BoundBlock Keyword public Token Keyword { get; } Property Value Token Parameters public List<BoundParameter> Parameters { get; } Property Value List<BoundParameter> Symbol public VariableSymbol<FunctionType> Symbol { get; } Property Value VariableSymbol<FunctionType> Type public override FunctionType Type { get; } Property Value FunctionType TypeParameters public List<BoundTypeParameter> TypeParameters { get; } Property Value List<BoundTypeParameter> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundIdentifierName.html": {
    "href": "api/Heir.BoundAST.BoundIdentifierName.html",
    "title": "Class BoundIdentifierName | Heir Docs",
    "summary": "Class BoundIdentifierName Namespace Heir.BoundAST Assembly Heir.dll public class BoundIdentifierName : BoundName Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundAssignmentTarget BoundName BoundIdentifierName Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundIdentifierName(VariableSymbol<BaseType>) public BoundIdentifierName(VariableSymbol<BaseType> symbol) Parameters symbol VariableSymbol<BaseType> Properties Symbol public VariableSymbol<BaseType> Symbol { get; } Property Value VariableSymbol<BaseType> Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundIf.html": {
    "href": "api/Heir.BoundAST.BoundIf.html",
    "title": "Class BoundIf | Heir Docs",
    "summary": "Class BoundIf Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundIf : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundIf Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundIf(Token, BoundExpression, BoundStatement, BoundStatement?) public BoundIf(Token keyword, BoundExpression condition, BoundStatement body, BoundStatement? elseBranch) Parameters keyword Token condition BoundExpression body BoundStatement elseBranch BoundStatement Properties Body public BoundStatement Body { get; } Property Value BoundStatement Condition public BoundExpression Condition { get; } Property Value BoundExpression ElseBranch public BoundStatement? ElseBranch { get; } Property Value BoundStatement Keyword public Token Keyword { get; } Property Value Token Type public override BaseType? Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundInvocation.html": {
    "href": "api/Heir.BoundAST.BoundInvocation.html",
    "title": "Class BoundInvocation | Heir Docs",
    "summary": "Class BoundInvocation Namespace Heir.BoundAST Assembly Heir.dll public class BoundInvocation : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundInvocation Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundInvocation(BoundExpression, List<BoundExpression>, List<BaseType>) public BoundInvocation(BoundExpression callee, List<BoundExpression> arguments, List<BaseType> typeArguments) Parameters callee BoundExpression arguments List<BoundExpression> typeArguments List<BaseType> Properties Arguments public List<BoundExpression> Arguments { get; } Property Value List<BoundExpression> Callee public BoundExpression Callee { get; } Property Value BoundExpression IsIntrinsic public bool IsIntrinsic { get; } Property Value bool Type public override BaseType Type { get; } Property Value BaseType TypeArguments public List<BaseType> TypeArguments { get; } Property Value List<BaseType> Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token> WithTypeArguments(List<BaseType>) public BoundInvocation WithTypeArguments(List<BaseType> typeArguments) Parameters typeArguments List<BaseType> Returns BoundInvocation"
  },
  "api/Heir.BoundAST.BoundLiteral.html": {
    "href": "api/Heir.BoundAST.BoundLiteral.html",
    "title": "Class BoundLiteral | Heir Docs",
    "summary": "Class BoundLiteral Namespace Heir.BoundAST Assembly Heir.dll public class BoundLiteral : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundLiteral Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundLiteral(Token) public BoundLiteral(Token token) Parameters token Token Properties Token public Token Token { get; } Property Value Token Type public override LiteralType Type { get; } Property Value LiteralType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundMemberAccess.html": {
    "href": "api/Heir.BoundAST.BoundMemberAccess.html",
    "title": "Class BoundMemberAccess | Heir Docs",
    "summary": "Class BoundMemberAccess Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundMemberAccess : BoundAssignmentTarget Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundAssignmentTarget BoundMemberAccess Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundMemberAccess(BoundExpression, BoundIdentifierName) public BoundMemberAccess(BoundExpression expression, BoundIdentifierName name) Parameters expression BoundExpression name BoundIdentifierName Properties Expression public BoundExpression Expression { get; } Property Value BoundExpression Name public BoundIdentifierName Name { get; } Property Value BoundIdentifierName Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundNoOp.html": {
    "href": "api/Heir.BoundAST.BoundNoOp.html",
    "title": "Class BoundNoOp | Heir Docs",
    "summary": "Class BoundNoOp Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundNoOp : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundNoOp Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundNoOp(BaseType?) public BoundNoOp(BaseType? type = null) Parameters type BaseType Properties Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundNoOpStatement.html": {
    "href": "api/Heir.BoundAST.BoundNoOpStatement.html",
    "title": "Class BoundNoOpStatement | Heir Docs",
    "summary": "Class BoundNoOpStatement Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundNoOpStatement : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundNoOpStatement Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundNoOpStatement(BaseType?) public BoundNoOpStatement(BaseType? type = null) Parameters type BaseType Properties Type public override BaseType? Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundObjectLiteral.html": {
    "href": "api/Heir.BoundAST.BoundObjectLiteral.html",
    "title": "Class BoundObjectLiteral | Heir Docs",
    "summary": "Class BoundObjectLiteral Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundObjectLiteral : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundObjectLiteral Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundObjectLiteral(Token, Dictionary<BaseType, BoundExpression>, InterfaceType) public BoundObjectLiteral(Token brace, Dictionary<BaseType, BoundExpression> properties, InterfaceType type) Parameters brace Token properties Dictionary<BaseType, BoundExpression> type InterfaceType Properties Properties public Dictionary<BaseType, BoundExpression> Properties { get; } Property Value Dictionary<BaseType, BoundExpression> Token public Token Token { get; } Property Value Token Type public override InterfaceType Type { get; } Property Value InterfaceType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundParameter.html": {
    "href": "api/Heir.BoundAST.BoundParameter.html",
    "title": "Class BoundParameter | Heir Docs",
    "summary": "Class BoundParameter Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundParameter : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundParameter Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundParameter(VariableSymbol<BaseType>, BoundLiteral?) public BoundParameter(VariableSymbol<BaseType> symbol, BoundLiteral? initializer) Parameters symbol VariableSymbol<BaseType> initializer BoundLiteral Properties Initializer public BoundLiteral? Initializer { get; } Property Value BoundLiteral Symbol public VariableSymbol<BaseType> Symbol { get; } Property Value VariableSymbol<BaseType> Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundParenthesized.html": {
    "href": "api/Heir.BoundAST.BoundParenthesized.html",
    "title": "Class BoundParenthesized | Heir Docs",
    "summary": "Class BoundParenthesized Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundParenthesized : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundParenthesized Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundParenthesized(BoundExpression) public BoundParenthesized(BoundExpression expression) Parameters expression BoundExpression Properties Expression public BoundExpression Expression { get; } Property Value BoundExpression Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundPostfixOp.html": {
    "href": "api/Heir.BoundAST.BoundPostfixOp.html",
    "title": "Class BoundPostfixOp | Heir Docs",
    "summary": "Class BoundPostfixOp Namespace Heir.BoundAST Assembly Heir.dll public class BoundPostfixOp : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundPostfixOp Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundPostfixOp(BoundPostfixOperator, BoundExpression) public BoundPostfixOp(BoundPostfixOperator op, BoundExpression operand) Parameters op BoundPostfixOperator operand BoundExpression Properties Operand public BoundExpression Operand { get; } Property Value BoundExpression Operator public BoundPostfixOperator Operator { get; } Property Value BoundPostfixOperator Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundReturn.html": {
    "href": "api/Heir.BoundAST.BoundReturn.html",
    "title": "Class BoundReturn | Heir Docs",
    "summary": "Class BoundReturn Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundReturn : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundReturn Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundReturn(Token, BoundExpression) public BoundReturn(Token keyword, BoundExpression expression) Parameters keyword Token expression BoundExpression Properties Expression public BoundExpression Expression { get; } Property Value BoundExpression Keyword public Token Keyword { get; } Property Value Token Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundSyntaxTree.html": {
    "href": "api/Heir.BoundAST.BoundSyntaxTree.html",
    "title": "Class BoundSyntaxTree | Heir Docs",
    "summary": "Class BoundSyntaxTree Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundSyntaxTree : BoundBlock Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundBlock BoundSyntaxTree Inherited Members BoundBlock.Type BoundBlock.Statements BoundBlock.Accept<R>(BoundStatement.IVisitor<R>) BoundBlock.GetTokens() SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundSyntaxTree(List<BoundStatement>, DiagnosticBag) public BoundSyntaxTree(List<BoundStatement> statements, DiagnosticBag diagnostics) Parameters statements List<BoundStatement> diagnostics DiagnosticBag Properties Diagnostics public DiagnosticBag Diagnostics { get; } Property Value DiagnosticBag"
  },
  "api/Heir.BoundAST.BoundTypeParameter.html": {
    "href": "api/Heir.BoundAST.BoundTypeParameter.html",
    "title": "Class BoundTypeParameter | Heir Docs",
    "summary": "Class BoundTypeParameter Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundTypeParameter : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundTypeParameter Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundTypeParameter(TypeSymbol, BaseType?) public BoundTypeParameter(TypeSymbol symbol, BaseType? initializer) Parameters symbol TypeSymbol initializer BaseType Properties Initializer public BaseType? Initializer { get; } Property Value BaseType Symbol public TypeSymbol Symbol { get; } Property Value TypeSymbol Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundUnaryOp.html": {
    "href": "api/Heir.BoundAST.BoundUnaryOp.html",
    "title": "Class BoundUnaryOp | Heir Docs",
    "summary": "Class BoundUnaryOp Namespace Heir.BoundAST Assembly Heir.dll public class BoundUnaryOp : BoundExpression Inheritance object SyntaxNode BoundSyntaxNode BoundExpression BoundUnaryOp Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundUnaryOp(BoundUnaryOperator, BoundExpression) public BoundUnaryOp(BoundUnaryOperator op, BoundExpression operand) Parameters op BoundUnaryOperator operand BoundExpression Properties Operand public BoundExpression Operand { get; } Property Value BoundExpression Operator public BoundUnaryOperator Operator { get; } Property Value BoundUnaryOperator Type public override BaseType Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundExpression.IVisitor<R> visitor) Parameters visitor BoundExpression.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundVariableDeclaration.html": {
    "href": "api/Heir.BoundAST.BoundVariableDeclaration.html",
    "title": "Class BoundVariableDeclaration | Heir Docs",
    "summary": "Class BoundVariableDeclaration Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundVariableDeclaration : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundVariableDeclaration Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundVariableDeclaration(VariableSymbol<BaseType>, BoundExpression?, bool) public BoundVariableDeclaration(VariableSymbol<BaseType> symbol, BoundExpression? initializer, bool isMutable) Parameters symbol VariableSymbol<BaseType> initializer BoundExpression isMutable bool Properties Initializer public BoundExpression? Initializer { get; } Property Value BoundExpression IsMutable public bool IsMutable { get; } Property Value bool Symbol public VariableSymbol<BaseType> Symbol { get; } Property Value VariableSymbol<BaseType> Type public override BaseType? Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.BoundWhile.html": {
    "href": "api/Heir.BoundAST.BoundWhile.html",
    "title": "Class BoundWhile | Heir Docs",
    "summary": "Class BoundWhile Namespace Heir.BoundAST Assembly Heir.dll public sealed class BoundWhile : BoundStatement Inheritance object SyntaxNode BoundSyntaxNode BoundStatement BoundWhile Inherited Members SyntaxNode.GetFirstToken() SyntaxNode.GetLastToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BoundWhile(Token, BoundExpression, BoundStatement) public BoundWhile(Token keyword, BoundExpression condition, BoundStatement body) Parameters keyword Token condition BoundExpression body BoundStatement Properties Body public BoundStatement Body { get; } Property Value BoundStatement Condition public BoundExpression Condition { get; } Property Value BoundExpression Keyword public Token Keyword { get; } Property Value Token Type public override BaseType? Type { get; } Property Value BaseType Methods Accept<R>(IVisitor<R>) public override R Accept<R>(BoundStatement.IVisitor<R> visitor) Parameters visitor BoundStatement.IVisitor<R> Returns R Type Parameters R GetTokens() public override List<Token> GetTokens() Returns List<Token>"
  },
  "api/Heir.BoundAST.html": {
    "href": "api/Heir.BoundAST.html",
    "title": "Namespace Heir.BoundAST | Heir Docs",
    "summary": "Namespace Heir.BoundAST Classes BoundArrayLiteral BoundAssignmentOp BoundBinaryOp BoundBlock BoundBreak BoundContinue BoundElementAccess BoundEnumDeclaration BoundEnumMember BoundExpressionStatement BoundFunctionDeclaration BoundIdentifierName BoundIf BoundInvocation BoundLiteral BoundMemberAccess BoundNoOp BoundNoOpStatement BoundObjectLiteral BoundParameter BoundParenthesized BoundPostfixOp BoundReturn BoundSyntaxTree BoundTypeParameter BoundUnaryOp BoundVariableDeclaration BoundWhile"
  },
  "api/Heir.BytecodeGenerator.html": {
    "href": "api/Heir.BytecodeGenerator.html",
    "title": "Class BytecodeGenerator | Heir Docs",
    "summary": "Class BytecodeGenerator Namespace Heir Assembly Heir.dll public sealed class BytecodeGenerator : INodeVisitor<List<Instruction>>, Expression.IVisitor<List<Instruction>>, Statement.IVisitor<List<Instruction>> Inheritance object BytecodeGenerator Implements INodeVisitor<List<Instruction>> Expression.IVisitor<List<Instruction>> Statement.IVisitor<List<Instruction>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BytecodeGenerator(DiagnosticBag, Binder) public BytecodeGenerator(DiagnosticBag diagnostics, Binder binder) Parameters diagnostics DiagnosticBag binder Binder Methods GenerateBytecode() public Bytecode GenerateBytecode() Returns Bytecode VisitArrayLiteralExpression(ArrayLiteral) public List<Instruction> VisitArrayLiteralExpression(ArrayLiteral arrayLiteral) Parameters arrayLiteral ArrayLiteral Returns List<Instruction> VisitArrayTypeRef(ArrayType) public List<Instruction> VisitArrayTypeRef(ArrayType arrayType) Parameters arrayType ArrayType Returns List<Instruction> VisitAssignmentOpExpression(AssignmentOp) public List<Instruction> VisitAssignmentOpExpression(AssignmentOp assignmentOp) Parameters assignmentOp AssignmentOp Returns List<Instruction> VisitBinaryOpExpression(BinaryOp) public List<Instruction> VisitBinaryOpExpression(BinaryOp binaryOp) Parameters binaryOp BinaryOp Returns List<Instruction> VisitBlock(Block) public List<Instruction> VisitBlock(Block block) Parameters block Block Returns List<Instruction> VisitBreakStatement(Break) public List<Instruction> VisitBreakStatement(Break @break) Parameters break Break Returns List<Instruction> VisitContinueStatement(Continue) public List<Instruction> VisitContinueStatement(Continue @continue) Parameters continue Continue Returns List<Instruction> VisitElementAccessExpression(ElementAccess) public List<Instruction> VisitElementAccessExpression(ElementAccess elementAccess) Parameters elementAccess ElementAccess Returns List<Instruction> VisitEnumDeclaration(EnumDeclaration) public List<Instruction> VisitEnumDeclaration(EnumDeclaration enumDeclaration) Parameters enumDeclaration EnumDeclaration Returns List<Instruction> VisitEnumMember(EnumMember) public List<Instruction> VisitEnumMember(EnumMember enumMember) Parameters enumMember EnumMember Returns List<Instruction> VisitExpressionStatement(ExpressionStatement) public List<Instruction> VisitExpressionStatement(ExpressionStatement expressionStatement) Parameters expressionStatement ExpressionStatement Returns List<Instruction> VisitFunctionDeclaration(FunctionDeclaration) public List<Instruction> VisitFunctionDeclaration(FunctionDeclaration functionDeclaration) Parameters functionDeclaration FunctionDeclaration Returns List<Instruction> VisitFunctionTypeRef(FunctionType) public List<Instruction> VisitFunctionTypeRef(FunctionType functionType) Parameters functionType FunctionType Returns List<Instruction> VisitIdentifierNameExpression(IdentifierName) public List<Instruction> VisitIdentifierNameExpression(IdentifierName identifierName) Parameters identifierName IdentifierName Returns List<Instruction> VisitIfStatement(If) public List<Instruction> VisitIfStatement(If @if) Parameters if If Returns List<Instruction> VisitInterfaceDeclaration(InterfaceDeclaration) public List<Instruction> VisitInterfaceDeclaration(InterfaceDeclaration interfaceDeclaration) Parameters interfaceDeclaration InterfaceDeclaration Returns List<Instruction> VisitInterfaceField(InterfaceField) public List<Instruction> VisitInterfaceField(InterfaceField interfaceField) Parameters interfaceField InterfaceField Returns List<Instruction> VisitIntersectionTypeRef(IntersectionType) public List<Instruction> VisitIntersectionTypeRef(IntersectionType intersectionType) Parameters intersectionType IntersectionType Returns List<Instruction> VisitInvocationExpression(Invocation) public List<Instruction> VisitInvocationExpression(Invocation invocation) Parameters invocation Invocation Returns List<Instruction> VisitLiteralExpression(Literal) public List<Instruction> VisitLiteralExpression(Literal literal) Parameters literal Literal Returns List<Instruction> VisitMemberAccessExpression(MemberAccess) public List<Instruction> VisitMemberAccessExpression(MemberAccess memberAccess) Parameters memberAccess MemberAccess Returns List<Instruction> VisitNameOfExpression(NameOf) public List<Instruction> VisitNameOfExpression(NameOf nameOf) Parameters nameOf NameOf Returns List<Instruction> VisitNoOp(NoOp) public List<Instruction> VisitNoOp(NoOp noOp) Parameters noOp NoOp Returns List<Instruction> VisitNoOp(NoOpStatement) public List<Instruction> VisitNoOp(NoOpStatement noOp) Parameters noOp NoOpStatement Returns List<Instruction> VisitNoOp(NoOpType) public List<Instruction> VisitNoOp(NoOpType noOp) Parameters noOp NoOpType Returns List<Instruction> VisitObjectLiteralExpression(ObjectLiteral) public List<Instruction> VisitObjectLiteralExpression(ObjectLiteral objectLiteral) Parameters objectLiteral ObjectLiteral Returns List<Instruction> VisitParameter(Parameter) public List<Instruction> VisitParameter(Parameter parameter) Parameters parameter Parameter Returns List<Instruction> VisitParenthesizedExpression(Parenthesized) public List<Instruction> VisitParenthesizedExpression(Parenthesized parenthesized) Parameters parenthesized Parenthesized Returns List<Instruction> VisitParenthesizedTypeRef(ParenthesizedType) public List<Instruction> VisitParenthesizedTypeRef(ParenthesizedType parenthesizedType) Parameters parenthesizedType ParenthesizedType Returns List<Instruction> VisitPostfixOpExpression(PostfixOp) public List<Instruction> VisitPostfixOpExpression(PostfixOp postfixOp) Parameters postfixOp PostfixOp Returns List<Instruction> VisitReturnStatement(Return) public List<Instruction> VisitReturnStatement(Return @return) Parameters return Return Returns List<Instruction> VisitSingularTypeRef(SingularType) public List<Instruction> VisitSingularTypeRef(SingularType singularType) Parameters singularType SingularType Returns List<Instruction> VisitSyntaxTree(SyntaxTree) public List<Instruction> VisitSyntaxTree(SyntaxTree tree) Parameters tree SyntaxTree Returns List<Instruction> VisitTypeParameter(TypeParameter) public List<Instruction> VisitTypeParameter(TypeParameter typeParameter) Parameters typeParameter TypeParameter Returns List<Instruction> VisitUnaryOpExpression(UnaryOp) public List<Instruction> VisitUnaryOpExpression(UnaryOp unaryOp) Parameters unaryOp UnaryOp Returns List<Instruction> VisitUnionTypeRef(UnionType) public List<Instruction> VisitUnionTypeRef(UnionType unionType) Parameters unionType UnionType Returns List<Instruction> VisitVariableDeclaration(VariableDeclaration) public List<Instruction> VisitVariableDeclaration(VariableDeclaration variableDeclaration) Parameters variableDeclaration VariableDeclaration Returns List<Instruction> VisitWhileStatement(While) public List<Instruction> VisitWhileStatement(While @while) Parameters while While Returns List<Instruction>"
  },
  "api/Heir.CodeGeneration.Bytecode.html": {
    "href": "api/Heir.CodeGeneration.Bytecode.html",
    "title": "Class Bytecode | Heir Docs",
    "summary": "Class Bytecode Namespace Heir.CodeGeneration Assembly Heir.dll public sealed class Bytecode Inheritance object Bytecode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors Bytecode(IEnumerable<Instruction>) public Bytecode(IEnumerable<Instruction> instructions) Parameters instructions IEnumerable<Instruction> Properties Count public int Count { get; } Property Value int Instructions public IReadOnlyList<Instruction> Instructions { get; } Property Value IReadOnlyList<Instruction> this[int] public Instruction this[int index] { get; } Parameters index int Property Value Instruction Version public byte Version { get; init; } Property Value byte Methods Contains(List<Instruction>) public bool Contains(List<Instruction> section) Parameters section List<Instruction> Returns bool Equals(Bytecode) public bool Equals(Bytecode other) Parameters other Bytecode Returns bool Equals(List<Instruction>) public bool Equals(List<Instruction> other) Parameters other List<Instruction> Returns bool Skip(int) public Bytecode Skip(int count) Parameters count int Returns Bytecode SkipLast(int) public Bytecode SkipLast(int count) Parameters count int Returns Bytecode Take(int) public Bytecode Take(int count) Parameters count int Returns Bytecode TakeLast(int) public Bytecode TakeLast(int count) Parameters count int Returns Bytecode ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Heir.CodeGeneration.BytecodeDeserializer.html": {
    "href": "api/Heir.CodeGeneration.BytecodeDeserializer.html",
    "title": "Class BytecodeDeserializer | Heir Docs",
    "summary": "Class BytecodeDeserializer Namespace Heir.CodeGeneration Assembly Heir.dll public static class BytecodeDeserializer Inheritance object BytecodeDeserializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(Stream) public static Bytecode Deserialize(Stream stream) Parameters stream Stream Returns Bytecode"
  },
  "api/Heir.CodeGeneration.BytecodeOptimizer.html": {
    "href": "api/Heir.CodeGeneration.BytecodeOptimizer.html",
    "title": "Class BytecodeOptimizer | Heir Docs",
    "summary": "Class BytecodeOptimizer Namespace Heir.CodeGeneration Assembly Heir.dll public class BytecodeOptimizer Inheritance object BytecodeOptimizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BytecodeOptimizer(List<Instruction>, DiagnosticBag) public BytecodeOptimizer(List<Instruction> bytecode, DiagnosticBag diagnostics) Parameters bytecode List<Instruction> diagnostics DiagnosticBag Methods Optimize() public List<Instruction> Optimize() Returns List<Instruction>"
  },
  "api/Heir.CodeGeneration.BytecodeSerializer.html": {
    "href": "api/Heir.CodeGeneration.BytecodeSerializer.html",
    "title": "Class BytecodeSerializer | Heir Docs",
    "summary": "Class BytecodeSerializer Namespace Heir.CodeGeneration Assembly Heir.dll public static class BytecodeSerializer Inheritance object BytecodeSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Serialize(Bytecode, Stream, bool) public static void Serialize(Bytecode bytecode, Stream stream, bool leaveOpen = false) Parameters bytecode Bytecode stream Stream leaveOpen bool"
  },
  "api/Heir.CodeGeneration.Instruction.html": {
    "href": "api/Heir.CodeGeneration.Instruction.html",
    "title": "Class Instruction | Heir Docs",
    "summary": "Class Instruction Namespace Heir.CodeGeneration Assembly Heir.dll public class Instruction Inheritance object Instruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Instruction(SyntaxNode?, OpCode, object?) public Instruction(SyntaxNode? root, OpCode opCode, object? operand = null) Parameters root SyntaxNode opCode OpCode operand object Properties OpCode public OpCode OpCode { get; } Property Value OpCode Operand public object? Operand { get; } Property Value object Root public SyntaxNode? Root { get; } Property Value SyntaxNode Methods Equals(Instruction) public bool Equals(Instruction other) Parameters other Instruction Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WithOpCode(OpCode) public Instruction WithOpCode(OpCode opCode) Parameters opCode OpCode Returns Instruction WithOperand(object?) public Instruction WithOperand(object? operand) Parameters operand object Returns Instruction WithRoot(SyntaxNode?) public Instruction WithRoot(SyntaxNode? root) Parameters root SyntaxNode Returns Instruction"
  },
  "api/Heir.CodeGeneration.OpCode.html": {
    "href": "api/Heir.CodeGeneration.OpCode.html",
    "title": "Enum OpCode | Heir Docs",
    "summary": "Enum OpCode Namespace Heir.CodeGeneration Assembly Heir.dll public enum OpCode : byte Fields ADD = 22 Adds the last two frames in the stack together (assuming they're numbers) AND = 38 Calculates logical and on the last two frames in the stack (assuming they're bools) BAND = 33 Calculates binary and on the last two frames in the stack (assuming they're longs) BEGINSCOPE = 0 Creates a new scope BNOT = 32 Calculates binary not on the last frame in the stack (assuming it's an long) BOR = 34 Calculates binary or on the last two frames in the stack (assuming they're longs) BREAK = 8 Jump ahead by the given offset BSHL = 36 Calculates bit shift left on the last two frames in the stack (assuming they're ints) BSHR = 37 Calculates bit shift right on the last two frames in the stack (assuming they're ints) BXOR = 35 Calculates binary exclusive or on the last two frames in the stack (assuming they're longs) CALL = 19 Calls the last frame in the stack (assuming it's a FunctionValue) CONCAT = 21 Concatenates the last two frames in the stack together (assuming they're strings) CONTINUE = 9 Jump ahead by the given offset plus one DEC = 31 Decrements a variable (assuming it's a number) by 1 DIV = 25 Divides the last two frames in the stack (assuming they're numbers) DUP = 13 Pushes the last element in the stack onto the stack again ENDSCOPE = 1 Ends the current scope and returns to the enclosing scope EQ = 45 Calculates equality of the last two frames in the stack EXIT = 48 Signal to the VirtualMachine that the program has completed. GT = 43 Calculates greater than (GT) on the last two frames in the stack (assuming they're numbers) GTE = 44 Calculates greater than or equal to (GTE) on the last two frames in the stack (assuming they're numbers) IDIV = 26 Divides then floors (integer division) the last two frames in the stack (assuming they're numbers) INC = 30 Increments a variable (assuming it's a number) by 1 INDEX = 20 Indexes the second to last frame in the stack using the last frame in the stack (assuming it's an ObjectValue) JMP = 7 Jump ahead by the given offset JNZ = 11 Jump ahead by the given offset if the last value on the stack is true or 1 JZ = 10 Jump ahead by the given offset if the last value on the stack is false or 0 LOAD = 16 Loads a variable from the current scope. The name of the variable to load (string) LT = 41 Calculates less than (LT) on the last two frames in the stack (assuming they're numbers) LTE = 42 Calculates less than or equal to (LTE) on the last two frames in the stack (assuming they're numbers) MOD = 28 Calculates the modulus of the last two frames in the stack (assuming they're numbers) MUL = 24 Multiplies the last two frames in the stack (assuming they're numbers) NEQ = 46 Calculates inequality of the last two frames in the stack NOOP = 47 No operation, blank instruction NOT = 40 Calculates logical not on the last frame in the stack (assuming it's a bool) OR = 39 Calculates logical or on the last two frames in the stack (assuming they're bools) POP = 6 Pops the last value off of the stack POW = 27 Raises the last frame in the stack to the second to last frame in the stack's power (assuming they're numbers) PROC = 18 Pushes a FunctionValue onto the stack PUSH = 2 Pushes the given value onto the stack PUSHARRAY = 4 Pushes an ArrayValue onto the stack PUSHNONE = 5 Pushes none (null) onto the stack PUSHOBJECT = 3 Pushes an ObjectValue onto the stack RETURN = 17 If the call stack is not empty, returns to the last Heir.Runtime.CallStackFrame. Otherwise, it advances. STORE = 14 Stores a variable in the current scope using the last two frames of the stack. Of those last two frames, the first is the value and the second is the name. STOREINDEX = 15 Stores a value in the index of an object using the last three frames of the stack. Of those last three frames, the first is the value, the second is the index, and the third is the object. SUB = 23 Subtracts the last two frames in the stack (assuming they're numbers) SWAP = 12 Swaps the positions of the last 2 elements on the stack UNM = 29 Unary minus; negates the last frame in the stack (assuming it's a number)"
  },
  "api/Heir.CodeGeneration.html": {
    "href": "api/Heir.CodeGeneration.html",
    "title": "Namespace Heir.CodeGeneration | Heir Docs",
    "summary": "Namespace Heir.CodeGeneration Classes Bytecode BytecodeDeserializer BytecodeOptimizer BytecodeSerializer Instruction Enums OpCode"
  },
  "api/Heir.CompileTimeMacroEvaluator.html": {
    "href": "api/Heir.CompileTimeMacroEvaluator.html",
    "title": "Class CompileTimeMacroEvaluator | Heir Docs",
    "summary": "Class CompileTimeMacroEvaluator Namespace Heir Assembly Heir.dll public sealed class CompileTimeMacroEvaluator : NodeTransformer, INodeVisitor<SyntaxNode?>, Expression.IVisitor<SyntaxNode?>, Statement.IVisitor<SyntaxNode?> Inheritance object NodeTransformer CompileTimeMacroEvaluator Implements INodeVisitor<SyntaxNode> Expression.IVisitor<SyntaxNode> Statement.IVisitor<SyntaxNode> Inherited Members NodeTransformer.VisitSyntaxTree(SyntaxTree) NodeTransformer.VisitAssignmentOpExpression(AssignmentOp) NodeTransformer.VisitUnaryOpExpression(UnaryOp) NodeTransformer.VisitPostfixOpExpression(PostfixOp) NodeTransformer.VisitBinaryOpExpression(BinaryOp) NodeTransformer.VisitParenthesizedExpression(Parenthesized) NodeTransformer.VisitLiteralExpression(Literal) NodeTransformer.VisitObjectLiteralExpression(ObjectLiteral) NodeTransformer.VisitArrayLiteralExpression(ArrayLiteral) NodeTransformer.VisitNoOp(NoOp) NodeTransformer.VisitNoOp(NoOpType) NodeTransformer.VisitNoOp(NoOpStatement) NodeTransformer.VisitSingularTypeRef(SingularType) NodeTransformer.VisitParenthesizedTypeRef(ParenthesizedType) NodeTransformer.VisitUnionTypeRef(UnionType) NodeTransformer.VisitIntersectionTypeRef(IntersectionType) NodeTransformer.VisitFunctionTypeRef(FunctionType) NodeTransformer.VisitArrayTypeRef(ArrayType) NodeTransformer.VisitParameter(Parameter) NodeTransformer.VisitTypeParameter(TypeParameter) NodeTransformer.VisitInvocationExpression(Invocation) NodeTransformer.VisitElementAccessExpression(ElementAccess) NodeTransformer.VisitBlock(Block) NodeTransformer.VisitExpressionStatement(ExpressionStatement) NodeTransformer.VisitReturnStatement(Return) NodeTransformer.VisitBreakStatement(Break) NodeTransformer.VisitContinueStatement(Continue) NodeTransformer.VisitEnumMember(EnumMember) NodeTransformer.VisitFunctionDeclaration(FunctionDeclaration) NodeTransformer.VisitIfStatement(If) NodeTransformer.VisitWhileStatement(While) NodeTransformer.VisitInterfaceField(InterfaceField) NodeTransformer.VisitInterfaceDeclaration(InterfaceDeclaration) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CompileTimeMacroEvaluator(SyntaxTree) public CompileTimeMacroEvaluator(SyntaxTree cleanTree) Parameters cleanTree SyntaxTree Methods Evaluate() public SyntaxTree Evaluate() Returns SyntaxTree VisitEnumDeclaration(EnumDeclaration) public override SyntaxNode? VisitEnumDeclaration(EnumDeclaration enumDeclaration) Parameters enumDeclaration EnumDeclaration Returns SyntaxNode VisitIdentifierNameExpression(IdentifierName) public override SyntaxNode? VisitIdentifierNameExpression(IdentifierName identifierName) Parameters identifierName IdentifierName Returns SyntaxNode VisitMemberAccessExpression(MemberAccess) public override SyntaxNode? VisitMemberAccessExpression(MemberAccess memberAccess) Parameters memberAccess MemberAccess Returns SyntaxNode VisitNameOfExpression(NameOf) public override Literal VisitNameOfExpression(NameOf nameOf) Parameters nameOf NameOf Returns Literal VisitVariableDeclaration(VariableDeclaration) public override SyntaxNode? VisitVariableDeclaration(VariableDeclaration variableDeclaration) Parameters variableDeclaration VariableDeclaration Returns SyntaxNode"
  },
  "api/Heir.Diagnostics.Diagnostic.html": {
    "href": "api/Heir.Diagnostics.Diagnostic.html",
    "title": "Class Diagnostic | Heir Docs",
    "summary": "Class Diagnostic Namespace Heir.Diagnostics Assembly Heir.dll public sealed class Diagnostic Inheritance object Diagnostic Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Diagnostic(SourceFile, DiagnosticCode, string, Location, Location, DiagnosticLevel) public Diagnostic(SourceFile sourceFile, DiagnosticCode code, string message, Location startLocation, Location endLocation, DiagnosticLevel level) Parameters sourceFile SourceFile code DiagnosticCode message string startLocation Location endLocation Location level DiagnosticLevel Properties Code public DiagnosticCode Code { get; } Property Value DiagnosticCode EndLocation public Location EndLocation { get; } Property Value Location Level public DiagnosticLevel Level { get; } Property Value DiagnosticLevel Message public string Message { get; } Property Value string StartLocation public Location StartLocation { get; } Property Value Location Methods ToString(bool) public string ToString(bool colors) Parameters colors bool Returns string"
  },
  "api/Heir.Diagnostics.DiagnosticBag.html": {
    "href": "api/Heir.Diagnostics.DiagnosticBag.html",
    "title": "Class DiagnosticBag | Heir Docs",
    "summary": "Class DiagnosticBag Namespace Heir.Diagnostics Assembly Heir.dll public sealed class DiagnosticBag : HashSet<Diagnostic>, ISet<Diagnostic>, ICollection<Diagnostic>, IReadOnlySet<Diagnostic>, IReadOnlyCollection<Diagnostic>, IEnumerable<Diagnostic>, IEnumerable, IDeserializationCallback, ISerializable Inheritance object HashSet<Diagnostic> DiagnosticBag Implements ISet<Diagnostic> ICollection<Diagnostic> IReadOnlySet<Diagnostic> IReadOnlyCollection<Diagnostic> IEnumerable<Diagnostic> IEnumerable IDeserializationCallback ISerializable Inherited Members HashSet<Diagnostic>.Add(Diagnostic) HashSet<Diagnostic>.Clear() HashSet<Diagnostic>.Contains(Diagnostic) HashSet<Diagnostic>.CopyTo(Diagnostic[]) HashSet<Diagnostic>.CopyTo(Diagnostic[], int) HashSet<Diagnostic>.CopyTo(Diagnostic[], int, int) HashSet<Diagnostic>.CreateSetComparer() HashSet<Diagnostic>.EnsureCapacity(int) HashSet<Diagnostic>.ExceptWith(IEnumerable<Diagnostic>) HashSet<Diagnostic>.GetAlternateLookup<TAlternate>() HashSet<Diagnostic>.GetEnumerator() HashSet<Diagnostic>.IntersectWith(IEnumerable<Diagnostic>) HashSet<Diagnostic>.IsProperSubsetOf(IEnumerable<Diagnostic>) HashSet<Diagnostic>.IsProperSupersetOf(IEnumerable<Diagnostic>) HashSet<Diagnostic>.IsSubsetOf(IEnumerable<Diagnostic>) HashSet<Diagnostic>.IsSupersetOf(IEnumerable<Diagnostic>) HashSet<Diagnostic>.OnDeserialization(object) HashSet<Diagnostic>.Overlaps(IEnumerable<Diagnostic>) HashSet<Diagnostic>.Remove(Diagnostic) HashSet<Diagnostic>.RemoveWhere(Predicate<Diagnostic>) HashSet<Diagnostic>.SetEquals(IEnumerable<Diagnostic>) HashSet<Diagnostic>.SymmetricExceptWith(IEnumerable<Diagnostic>) HashSet<Diagnostic>.TrimExcess() HashSet<Diagnostic>.TrimExcess(int) HashSet<Diagnostic>.TryGetAlternateLookup<TAlternate>(out HashSet<Diagnostic>.AlternateLookup<TAlternate>) HashSet<Diagnostic>.TryGetValue(Diagnostic, out Diagnostic) HashSet<Diagnostic>.UnionWith(IEnumerable<Diagnostic>) HashSet<Diagnostic>.Comparer HashSet<Diagnostic>.Count HashSet<Diagnostic>.Capacity object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DiagnosticBag(SourceFile, IEnumerable<Diagnostic>?) public DiagnosticBag(SourceFile sourceFile, IEnumerable<Diagnostic>? initialCollection = null) Parameters sourceFile SourceFile initialCollection IEnumerable<Diagnostic> Properties HasErrors public bool HasErrors { get; } Property Value bool HasWarnings public bool HasWarnings { get; } Property Value bool Methods Error(DiagnosticCode, string, SyntaxNode) public void Error(DiagnosticCode code, string message, SyntaxNode node) Parameters code DiagnosticCode message string node SyntaxNode Error(DiagnosticCode, string, SyntaxNode, SyntaxNode) public void Error(DiagnosticCode code, string message, SyntaxNode startNode, SyntaxNode endNode) Parameters code DiagnosticCode message string startNode SyntaxNode endNode SyntaxNode Error(DiagnosticCode, string, Location?, Location?) public void Error(DiagnosticCode code, string message, Location? startLocation, Location? endLocation) Parameters code DiagnosticCode message string startLocation Location endLocation Location Error(DiagnosticCode, string, Token?) public void Error(DiagnosticCode code, string message, Token? token) Parameters code DiagnosticCode message string token Token Error(DiagnosticCode, string, Token, Token) public void Error(DiagnosticCode code, string message, Token startToken, Token endToken) Parameters code DiagnosticCode message string startToken Token endToken Token RuntimeError(DiagnosticCode, string, Token?) public void RuntimeError(DiagnosticCode code, string message, Token? token) Parameters code DiagnosticCode message string token Token ToString(bool, bool) public string ToString(bool colors, bool all = false) Parameters colors bool all bool Returns string Warn(DiagnosticCode, string, SyntaxNode) public void Warn(DiagnosticCode code, string message, SyntaxNode node) Parameters code DiagnosticCode message string node SyntaxNode Warn(DiagnosticCode, string, SyntaxNode, SyntaxNode) public void Warn(DiagnosticCode code, string message, SyntaxNode startNode, SyntaxNode endNode) Parameters code DiagnosticCode message string startNode SyntaxNode endNode SyntaxNode Warn(DiagnosticCode, string, Location, Location?) public void Warn(DiagnosticCode code, string message, Location startLocation, Location? endLocation = null) Parameters code DiagnosticCode message string startLocation Location endLocation Location Warn(DiagnosticCode, string, Token) public void Warn(DiagnosticCode code, string message, Token token) Parameters code DiagnosticCode message string token Token Warn(DiagnosticCode, string, Token, Token) public void Warn(DiagnosticCode code, string message, Token startToken, Token endToken) Parameters code DiagnosticCode message string startToken Token endToken Token Write(bool, bool, bool) public void Write(bool colors = true, bool all = false, bool clear = true) Parameters colors bool all bool clear bool"
  },
  "api/Heir.Diagnostics.DiagnosticCode.html": {
    "href": "api/Heir.Diagnostics.DiagnosticCode.html",
    "title": "Enum DiagnosticCode | Heir Docs",
    "summary": "Enum DiagnosticCode Namespace Heir.Diagnostics Assembly Heir.dll public enum DiagnosticCode : byte Fields H001 = 1 H001B = 2 H001C = 3 H002 = 4 H002B = 5 H003 = 6 H004 = 7 H004B = 8 H004C = 9 H004D = 10 H005 = 11 H006 = 12 H006B = 13 H006C = 14 H007 = 15 H008 = 16 H009 = 17 H010 = 18 H011 = 19 H012 = 20 H013 = 21 H014 = 22 H015 = 23 H016 = 24 H017 = 25 H018 = 26 H019 = 27 H020 = 28 H021 = 29 H022 = 30 H023 = 31 H024 = 32 H025 = 33 HDEV = 0"
  },
  "api/Heir.Diagnostics.DiagnosticLevel.html": {
    "href": "api/Heir.Diagnostics.DiagnosticLevel.html",
    "title": "Enum DiagnosticLevel | Heir Docs",
    "summary": "Enum DiagnosticLevel Namespace Heir.Diagnostics Assembly Heir.dll public enum DiagnosticLevel : byte Fields Error = 1 Warn = 0"
  },
  "api/Heir.Diagnostics.html": {
    "href": "api/Heir.Diagnostics.html",
    "title": "Namespace Heir.Diagnostics | Heir Docs",
    "summary": "Namespace Heir.Diagnostics Classes Diagnostic DiagnosticBag Enums DiagnosticCode DiagnosticLevel"
  },
  "api/Heir.Lexer.html": {
    "href": "api/Heir.Lexer.html",
    "title": "Class Lexer | Heir Docs",
    "summary": "Class Lexer Namespace Heir Assembly Heir.dll public sealed class Lexer Inheritance object Lexer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Lexer(SourceFile) public Lexer(SourceFile sourceFile) Parameters sourceFile SourceFile Methods GetTokens() public TokenStream GetTokens() Returns TokenStream"
  },
  "api/Heir.Parser.html": {
    "href": "api/Heir.Parser.html",
    "title": "Class Parser | Heir Docs",
    "summary": "Class Parser Namespace Heir Assembly Heir.dll public sealed class Parser Inheritance object Parser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Parser(TokenStream) public Parser(TokenStream tokenStream) Parameters tokenStream TokenStream Properties Tokens public TokenStream Tokens { get; } Property Value TokenStream Methods Parse() public SyntaxTree Parse() Returns SyntaxTree ParseWithCompileTimeMacros(bool) public SyntaxTree ParseWithCompileTimeMacros(bool resolveBeforeMacros = true) Parameters resolveBeforeMacros bool Returns SyntaxTree"
  },
  "api/Heir.Resolver.html": {
    "href": "api/Heir.Resolver.html",
    "title": "Class Resolver | Heir Docs",
    "summary": "Class Resolver Namespace Heir Assembly Heir.dll public sealed class Resolver : INodeVisitor, INodeVisitor<Void>, Expression.IVisitor<Void>, Statement.IVisitor<Void> Inheritance object Resolver Implements INodeVisitor INodeVisitor<Void> Expression.IVisitor<Void> Statement.IVisitor<Void> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Resolver(DiagnosticBag, SyntaxTree) public Resolver(DiagnosticBag diagnostics, SyntaxTree syntaxTree) Parameters diagnostics DiagnosticBag syntaxTree SyntaxTree Methods Declare(IdentifierName) public void Declare(IdentifierName identifier) Parameters identifier IdentifierName Declare(Token) public void Declare(Token identifier) Parameters identifier Token Define(IdentifierName) public void Define(IdentifierName identifier) Parameters identifier IdentifierName Define(Token) public void Define(Token identifier) Parameters identifier Token Resolve() public void Resolve() Resolve(Expression) public void Resolve(Expression expression) Parameters expression Expression Resolve(Statement) public void Resolve(Statement statement) Parameters statement Statement VisitArrayLiteralExpression(ArrayLiteral) public Void VisitArrayLiteralExpression(ArrayLiteral arrayLiteral) Parameters arrayLiteral ArrayLiteral Returns Void VisitArrayTypeRef(ArrayType) public Void VisitArrayTypeRef(ArrayType arrayType) Parameters arrayType ArrayType Returns Void VisitAssignmentOpExpression(AssignmentOp) public Void VisitAssignmentOpExpression(AssignmentOp assignmentOp) Parameters assignmentOp AssignmentOp Returns Void VisitBinaryOpExpression(BinaryOp) public Void VisitBinaryOpExpression(BinaryOp binaryOp) Parameters binaryOp BinaryOp Returns Void VisitBlock(Block) public Void VisitBlock(Block block) Parameters block Block Returns Void VisitBreakStatement(Break) public Void VisitBreakStatement(Break @break) Parameters break Break Returns Void VisitContinueStatement(Continue) public Void VisitContinueStatement(Continue @continue) Parameters continue Continue Returns Void VisitElementAccessExpression(ElementAccess) public Void VisitElementAccessExpression(ElementAccess elementAccess) Parameters elementAccess ElementAccess Returns Void VisitEnumDeclaration(EnumDeclaration) public Void VisitEnumDeclaration(EnumDeclaration enumDeclaration) Parameters enumDeclaration EnumDeclaration Returns Void VisitEnumMember(EnumMember) public Void VisitEnumMember(EnumMember enumMember) Parameters enumMember EnumMember Returns Void VisitExpressionStatement(ExpressionStatement) public Void VisitExpressionStatement(ExpressionStatement expressionStatement) Parameters expressionStatement ExpressionStatement Returns Void VisitFunctionDeclaration(FunctionDeclaration) public Void VisitFunctionDeclaration(FunctionDeclaration functionDeclaration) Parameters functionDeclaration FunctionDeclaration Returns Void VisitFunctionTypeRef(FunctionType) public Void VisitFunctionTypeRef(FunctionType functionType) Parameters functionType FunctionType Returns Void VisitIdentifierNameExpression(IdentifierName) public Void VisitIdentifierNameExpression(IdentifierName identifierName) Parameters identifierName IdentifierName Returns Void VisitIfStatement(If) public Void VisitIfStatement(If @if) Parameters if If Returns Void VisitInterfaceDeclaration(InterfaceDeclaration) public Void VisitInterfaceDeclaration(InterfaceDeclaration interfaceDeclaration) Parameters interfaceDeclaration InterfaceDeclaration Returns Void VisitInterfaceField(InterfaceField) public Void VisitInterfaceField(InterfaceField interfaceField) Parameters interfaceField InterfaceField Returns Void VisitIntersectionTypeRef(IntersectionType) public Void VisitIntersectionTypeRef(IntersectionType intersectionType) Parameters intersectionType IntersectionType Returns Void VisitInvocationExpression(Invocation) public Void VisitInvocationExpression(Invocation invocation) Parameters invocation Invocation Returns Void VisitLiteralExpression(Literal) public Void VisitLiteralExpression(Literal literal) Parameters literal Literal Returns Void VisitMemberAccessExpression(MemberAccess) public Void VisitMemberAccessExpression(MemberAccess memberAccess) Parameters memberAccess MemberAccess Returns Void VisitNameOfExpression(NameOf) public Void VisitNameOfExpression(NameOf nameOf) Parameters nameOf NameOf Returns Void VisitNoOp(NoOp) public Void VisitNoOp(NoOp noOp) Parameters noOp NoOp Returns Void VisitNoOp(NoOpStatement) public Void VisitNoOp(NoOpStatement noOp) Parameters noOp NoOpStatement Returns Void VisitNoOp(NoOpType) public Void VisitNoOp(NoOpType noOp) Parameters noOp NoOpType Returns Void VisitObjectLiteralExpression(ObjectLiteral) public Void VisitObjectLiteralExpression(ObjectLiteral objectLiteral) Parameters objectLiteral ObjectLiteral Returns Void VisitParameter(Parameter) public Void VisitParameter(Parameter parameter) Parameters parameter Parameter Returns Void VisitParenthesizedExpression(Parenthesized) public Void VisitParenthesizedExpression(Parenthesized parenthesized) Parameters parenthesized Parenthesized Returns Void VisitParenthesizedTypeRef(ParenthesizedType) public Void VisitParenthesizedTypeRef(ParenthesizedType parenthesizedType) Parameters parenthesizedType ParenthesizedType Returns Void VisitPostfixOpExpression(PostfixOp) public Void VisitPostfixOpExpression(PostfixOp postfixOp) Parameters postfixOp PostfixOp Returns Void VisitReturnStatement(Return) public Void VisitReturnStatement(Return @return) Parameters return Return Returns Void VisitSingularTypeRef(SingularType) public Void VisitSingularTypeRef(SingularType singularType) Parameters singularType SingularType Returns Void VisitSyntaxTree(SyntaxTree) public Void VisitSyntaxTree(SyntaxTree tree) Parameters tree SyntaxTree Returns Void VisitTypeParameter(TypeParameter) public Void VisitTypeParameter(TypeParameter typeParameter) Parameters typeParameter TypeParameter Returns Void VisitUnaryOpExpression(UnaryOp) public Void VisitUnaryOpExpression(UnaryOp unaryOp) Parameters unaryOp UnaryOp Returns Void VisitUnionTypeRef(UnionType) public Void VisitUnionTypeRef(UnionType unionType) Parameters unionType UnionType Returns Void VisitVariableDeclaration(VariableDeclaration) public Void VisitVariableDeclaration(VariableDeclaration variableDeclaration) Parameters variableDeclaration VariableDeclaration Returns Void VisitWhileStatement(While) public Void VisitWhileStatement(While @while) Parameters while While Returns Void"
  },
  "api/Heir.Runtime.BinaryTypeOperations.html": {
    "href": "api/Heir.Runtime.BinaryTypeOperations.html",
    "title": "Class BinaryTypeOperations | Heir Docs",
    "summary": "Class BinaryTypeOperations Namespace Heir.Runtime Assembly Heir.dll public static class BinaryTypeOperations Inheritance object BinaryTypeOperations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Bool public static readonly Dictionary<OpCode, Func<bool, bool, bool>> Bool Field Value Dictionary<OpCode, Func<bool, bool, bool>> Double public static readonly Dictionary<OpCode, Func<double, double, object?>> Double Field Value Dictionary<OpCode, Func<double, double, object>> Int public static readonly Dictionary<OpCode, Func<int, int, int>> Int Field Value Dictionary<OpCode, Func<int, int, int>> Long public static readonly Dictionary<OpCode, Func<long, long, object?>> Long Field Value Dictionary<OpCode, Func<long, long, object>>"
  },
  "api/Heir.Runtime.Intrinsics.Global.NowFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Global.NowFunction.html",
    "title": "Class NowFunction | Heir Docs",
    "summary": "Class NowFunction Namespace Heir.Runtime.Intrinsics.Global Assembly Heir.dll public class NowFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction NowFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NowFunction() public NowFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Global.PrintFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Global.PrintFunction.html",
    "title": "Class PrintFunction | Heir Docs",
    "summary": "Class PrintFunction Namespace Heir.Runtime.Intrinsics.Global Assembly Heir.dll public class PrintFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction PrintFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PrintFunction() public PrintFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Global.html": {
    "href": "api/Heir.Runtime.Intrinsics.Global.html",
    "title": "Namespace Heir.Runtime.Intrinsics.Global | Heir Docs",
    "summary": "Namespace Heir.Runtime.Intrinsics.Global Classes NowFunction PrintFunction"
  },
  "api/Heir.Runtime.Intrinsics.IIntrinsicValue-1.html": {
    "href": "api/Heir.Runtime.Intrinsics.IIntrinsicValue-1.html",
    "title": "Interface IIntrinsicValue<TType> | Heir Docs",
    "summary": "Interface IIntrinsicValue<TType> Namespace Heir.Runtime.Intrinsics Assembly Heir.dll public interface IIntrinsicValue<out TType> : IIntrinsicValue, IValue where TType : BaseType Type Parameters TType Inherited Members IIntrinsicValue.Name IIntrinsicValue.IsGlobal IIntrinsicValue.Value Properties Type TType Type { get; } Property Value TType"
  },
  "api/Heir.Runtime.Intrinsics.IIntrinsicValue.html": {
    "href": "api/Heir.Runtime.Intrinsics.IIntrinsicValue.html",
    "title": "Interface IIntrinsicValue | Heir Docs",
    "summary": "Interface IIntrinsicValue Namespace Heir.Runtime.Intrinsics Assembly Heir.dll public interface IIntrinsicValue : IValue Properties IsGlobal bool IsGlobal { get; } Property Value bool Name string Name { get; } Property Value string Type BaseType Type { get; } Property Value BaseType Value object? Value { get; } Property Value object"
  },
  "api/Heir.Runtime.Intrinsics.IntrinsicFunction.BaseDelegate.html": {
    "href": "api/Heir.Runtime.Intrinsics.IntrinsicFunction.BaseDelegate.html",
    "title": "Delegate IntrinsicFunction.BaseDelegate | Heir Docs",
    "summary": "Delegate IntrinsicFunction.BaseDelegate Namespace Heir.Runtime.Intrinsics Assembly Heir.dll public delegate object? IntrinsicFunction.BaseDelegate(List<object?> args) Parameters args List<object> Returns object"
  },
  "api/Heir.Runtime.Intrinsics.IntrinsicFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.IntrinsicFunction.html",
    "title": "Class IntrinsicFunction | Heir Docs",
    "summary": "Class IntrinsicFunction Namespace Heir.Runtime.Intrinsics Assembly Heir.dll public abstract class IntrinsicFunction : IntrinsicValue<FunctionType>, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Derived NowFunction PrintFunction AbsFunction AcosFunction AcoshFunction AsinFunction AsinhFunction Atan2Function AtanFunction AtanhFunction CbrtFunction CeilFunction CosFunction CoshFunction FloorFunction InDegreesFunction InRadiansFunction LerpFunction Q_RsqrtFunction RandomFloatFunction RandomIntFunction RoundFunction SinFunction SinhFunction SqrtFunction TanFunction TanhFunction Inherited Members IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntrinsicFunction(string, Dictionary<string, BaseType>, List<TypeParameter>, BaseType, bool) protected IntrinsicFunction(string name, Dictionary<string, BaseType> parameterTypes, List<TypeParameter> typeParameters, BaseType returnType, bool isGlobal = false) Parameters name string parameterTypes Dictionary<string, BaseType> typeParameters List<TypeParameter> returnType BaseType isGlobal bool Properties Arity public int Arity { get; } Property Value int Invoke public abstract IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate Value public override IntrinsicFunction Value { get; } Property Value IntrinsicFunction"
  },
  "api/Heir.Runtime.Intrinsics.IntrinsicLibrary.html": {
    "href": "api/Heir.Runtime.Intrinsics.IntrinsicLibrary.html",
    "title": "Class IntrinsicLibrary | Heir Docs",
    "summary": "Class IntrinsicLibrary Namespace Heir.Runtime.Intrinsics Assembly Heir.dll public abstract class IntrinsicLibrary : IntrinsicValue<InterfaceType>, IIntrinsicValue<InterfaceType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<InterfaceType> IntrinsicLibrary Implements IIntrinsicValue<InterfaceType> IIntrinsicValue IValue Derived MathLibrary Inherited Members IntrinsicValue<InterfaceType>.Name IntrinsicValue<InterfaceType>.Type IntrinsicValue<InterfaceType>.IsGlobal IntrinsicValue<InterfaceType>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntrinsicLibrary(string, InterfaceType) protected IntrinsicLibrary(string name, InterfaceType type) Parameters name string type InterfaceType"
  },
  "api/Heir.Runtime.Intrinsics.IntrinsicRegistrar.html": {
    "href": "api/Heir.Runtime.Intrinsics.IntrinsicRegistrar.html",
    "title": "Class IntrinsicRegistrar | Heir Docs",
    "summary": "Class IntrinsicRegistrar Namespace Heir.Runtime.Intrinsics Assembly Heir.dll public class IntrinsicRegistrar Inheritance object IntrinsicRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntrinsicRegistrar(IIntrinsicValue) public IntrinsicRegistrar(IIntrinsicValue intrinsicValue) Parameters intrinsicValue IIntrinsicValue Properties IsGlobal public bool IsGlobal { get; } Property Value bool Methods RegisterInResolver(Resolver) public void RegisterInResolver(Resolver resolver) Parameters resolver Resolver RegisterSymbol(Binder) public void RegisterSymbol(Binder binder) Parameters binder Binder RegisterValue(Scope) public void RegisterValue(Scope scope) Parameters scope Scope"
  },
  "api/Heir.Runtime.Intrinsics.IntrinsicValue-1.html": {
    "href": "api/Heir.Runtime.Intrinsics.IntrinsicValue-1.html",
    "title": "Class IntrinsicValue<TType> | Heir Docs",
    "summary": "Class IntrinsicValue<TType> Namespace Heir.Runtime.Intrinsics Assembly Heir.dll public abstract class IntrinsicValue<TType> : IIntrinsicValue<TType>, IIntrinsicValue, IValue where TType : BaseType Type Parameters TType Inheritance object IntrinsicValue<TType> Implements IIntrinsicValue<TType> IIntrinsicValue IValue Derived IntrinsicFunction IntrinsicLibrary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntrinsicValue(string, TType, bool) protected IntrinsicValue(string name, TType type, bool isGlobal) Parameters name string type TType isGlobal bool Properties IsGlobal public bool IsGlobal { get; } Property Value bool Name public string Name { get; } Property Value string Type public TType Type { get; } Property Value TType Value public abstract object? Value { get; } Property Value object"
  },
  "api/Heir.Runtime.Intrinsics.Intrinsics.html": {
    "href": "api/Heir.Runtime.Intrinsics.Intrinsics.html",
    "title": "Class Intrinsics | Heir Docs",
    "summary": "Class Intrinsics Namespace Heir.Runtime.Intrinsics Assembly Heir.dll public static class Intrinsics Inheritance object Intrinsics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterGlobalSymbols(Binder) public static void RegisterGlobalSymbols(Binder binder) Parameters binder Binder RegisterGlobalValues(Scope) public static void RegisterGlobalValues(Scope scope) Parameters scope Scope RegisterResolverGlobals(Resolver) public static void RegisterResolverGlobals(Resolver resolver) Parameters resolver Resolver"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AbsFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AbsFunction.html",
    "title": "Class AbsFunction | Heir Docs",
    "summary": "Class AbsFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class AbsFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction AbsFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AbsFunction() public AbsFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AcosFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AcosFunction.html",
    "title": "Class AcosFunction | Heir Docs",
    "summary": "Class AcosFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class AcosFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction AcosFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AcosFunction() public AcosFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AcoshFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AcoshFunction.html",
    "title": "Class AcoshFunction | Heir Docs",
    "summary": "Class AcoshFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class AcoshFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction AcoshFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AcoshFunction() public AcoshFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AsinFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AsinFunction.html",
    "title": "Class AsinFunction | Heir Docs",
    "summary": "Class AsinFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class AsinFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction AsinFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AsinFunction() public AsinFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AsinhFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AsinhFunction.html",
    "title": "Class AsinhFunction | Heir Docs",
    "summary": "Class AsinhFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class AsinhFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction AsinhFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AsinhFunction() public AsinhFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.Atan2Function.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.Atan2Function.html",
    "title": "Class Atan2Function | Heir Docs",
    "summary": "Class Atan2Function Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class Atan2Function : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction Atan2Function Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Atan2Function() public Atan2Function() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AtanFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AtanFunction.html",
    "title": "Class AtanFunction | Heir Docs",
    "summary": "Class AtanFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class AtanFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction AtanFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AtanFunction() public AtanFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AtanhFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.AtanhFunction.html",
    "title": "Class AtanhFunction | Heir Docs",
    "summary": "Class AtanhFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class AtanhFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction AtanhFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AtanhFunction() public AtanhFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.CbrtFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.CbrtFunction.html",
    "title": "Class CbrtFunction | Heir Docs",
    "summary": "Class CbrtFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class CbrtFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction CbrtFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CbrtFunction() public CbrtFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.CeilFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.CeilFunction.html",
    "title": "Class CeilFunction | Heir Docs",
    "summary": "Class CeilFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class CeilFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction CeilFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CeilFunction() public CeilFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.CosFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.CosFunction.html",
    "title": "Class CosFunction | Heir Docs",
    "summary": "Class CosFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class CosFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction CosFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CosFunction() public CosFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.CoshFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.CoshFunction.html",
    "title": "Class CoshFunction | Heir Docs",
    "summary": "Class CoshFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class CoshFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction CoshFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CoshFunction() public CoshFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.FloorFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.FloorFunction.html",
    "title": "Class FloorFunction | Heir Docs",
    "summary": "Class FloorFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class FloorFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction FloorFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FloorFunction() public FloorFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.InDegreesFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.InDegreesFunction.html",
    "title": "Class InDegreesFunction | Heir Docs",
    "summary": "Class InDegreesFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class InDegreesFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction InDegreesFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InDegreesFunction() public InDegreesFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.InRadiansFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.InRadiansFunction.html",
    "title": "Class InRadiansFunction | Heir Docs",
    "summary": "Class InRadiansFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class InRadiansFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction InRadiansFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InRadiansFunction() public InRadiansFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.LerpFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.LerpFunction.html",
    "title": "Class LerpFunction | Heir Docs",
    "summary": "Class LerpFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class LerpFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction LerpFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LerpFunction() public LerpFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.MathLibrary.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.MathLibrary.html",
    "title": "Class MathLibrary | Heir Docs",
    "summary": "Class MathLibrary Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class MathLibrary : IntrinsicLibrary, IIntrinsicValue<InterfaceType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<InterfaceType> IntrinsicLibrary MathLibrary Implements IIntrinsicValue<InterfaceType> IIntrinsicValue IValue Inherited Members IntrinsicValue<InterfaceType>.Name IntrinsicValue<InterfaceType>.Type IntrinsicValue<InterfaceType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MathLibrary() public MathLibrary() Properties Value public override object? Value { get; } Property Value object"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.Q_RsqrtFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.Q_RsqrtFunction.html",
    "title": "Class Q_RsqrtFunction | Heir Docs",
    "summary": "Class Q_RsqrtFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class Q_RsqrtFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction Q_RsqrtFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Q_RsqrtFunction() public Q_RsqrtFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.RandomFloatFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.RandomFloatFunction.html",
    "title": "Class RandomFloatFunction | Heir Docs",
    "summary": "Class RandomFloatFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class RandomFloatFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction RandomFloatFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RandomFloatFunction() public RandomFloatFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.RandomIntFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.RandomIntFunction.html",
    "title": "Class RandomIntFunction | Heir Docs",
    "summary": "Class RandomIntFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class RandomIntFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction RandomIntFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RandomIntFunction() public RandomIntFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.RoundFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.RoundFunction.html",
    "title": "Class RoundFunction | Heir Docs",
    "summary": "Class RoundFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class RoundFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction RoundFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RoundFunction() public RoundFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.SinFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.SinFunction.html",
    "title": "Class SinFunction | Heir Docs",
    "summary": "Class SinFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class SinFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction SinFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SinFunction() public SinFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.SinhFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.SinhFunction.html",
    "title": "Class SinhFunction | Heir Docs",
    "summary": "Class SinhFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class SinhFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction SinhFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SinhFunction() public SinhFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.SqrtFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.SqrtFunction.html",
    "title": "Class SqrtFunction | Heir Docs",
    "summary": "Class SqrtFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class SqrtFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction SqrtFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SqrtFunction() public SqrtFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.TanFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.TanFunction.html",
    "title": "Class TanFunction | Heir Docs",
    "summary": "Class TanFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class TanFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction TanFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TanFunction() public TanFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.TanhFunction.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.TanhFunction.html",
    "title": "Class TanhFunction | Heir Docs",
    "summary": "Class TanhFunction Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Assembly Heir.dll public class TanhFunction : IntrinsicFunction, IIntrinsicValue<FunctionType>, IIntrinsicValue, IValue Inheritance object IntrinsicValue<FunctionType> IntrinsicFunction TanhFunction Implements IIntrinsicValue<FunctionType> IIntrinsicValue IValue Inherited Members IntrinsicFunction.Value IntrinsicFunction.Arity IntrinsicValue<FunctionType>.Name IntrinsicValue<FunctionType>.Type IntrinsicValue<FunctionType>.IsGlobal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TanhFunction() public TanhFunction() Properties Invoke public override IntrinsicFunction.BaseDelegate Invoke { get; } Property Value IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.html": {
    "href": "api/Heir.Runtime.Intrinsics.Libraries.MathLibrary.html",
    "title": "Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary | Heir Docs",
    "summary": "Namespace Heir.Runtime.Intrinsics.Libraries.MathLibrary Classes AbsFunction AcosFunction AcoshFunction AsinFunction AsinhFunction Atan2Function AtanFunction AtanhFunction CbrtFunction CeilFunction CosFunction CoshFunction FloorFunction InDegreesFunction InRadiansFunction LerpFunction MathLibrary Q_RsqrtFunction RandomFloatFunction RandomIntFunction RoundFunction SinFunction SinhFunction SqrtFunction TanFunction TanhFunction"
  },
  "api/Heir.Runtime.Intrinsics.html": {
    "href": "api/Heir.Runtime.Intrinsics.html",
    "title": "Namespace Heir.Runtime.Intrinsics | Heir Docs",
    "summary": "Namespace Heir.Runtime.Intrinsics Classes IntrinsicFunction IntrinsicLibrary IntrinsicRegistrar IntrinsicValue<TType> Intrinsics Interfaces IIntrinsicValue IIntrinsicValue<TType> Delegates IntrinsicFunction.BaseDelegate"
  },
  "api/Heir.Runtime.Scope.html": {
    "href": "api/Heir.Runtime.Scope.html",
    "title": "Class Scope | Heir Docs",
    "summary": "Class Scope Namespace Heir.Runtime Assembly Heir.dll public sealed class Scope Inheritance object Scope Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Scope(Scope?) public Scope(Scope? enclosing = null) Parameters enclosing Scope Properties Enclosing public Scope? Enclosing { get; } Property Value Scope Methods Ancestor(uint) public Scope? Ancestor(uint distance) Parameters distance uint Returns Scope Assign(string, object?) public void Assign(string name, object? value) Parameters name string value object AssignAt(string, object?, uint) public void AssignAt(string name, object? value, uint distance) Parameters name string value object distance uint Define(string, object?) public void Define(string name, object? value) Parameters name string value object Equals(Scope, bool) public bool Equals(Scope other, bool requiresEqualValues = false) Parameters other Scope requiresEqualValues bool Returns bool IsDeclared(string) public bool IsDeclared(string name) Parameters name string Returns bool IsDefined(string) public bool IsDefined(string name) Parameters name string Returns bool Lookup(string) public object? Lookup(string name) Parameters name string Returns object LookupAt(string, uint) public object? LookupAt(string name, uint distance) Parameters name string distance uint Returns object"
  },
  "api/Heir.Runtime.StackFrame.html": {
    "href": "api/Heir.Runtime.StackFrame.html",
    "title": "Class StackFrame | Heir Docs",
    "summary": "Class StackFrame Namespace Heir.Runtime Assembly Heir.dll public sealed class StackFrame Inheritance object StackFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors StackFrame(SyntaxNode?, object?) public StackFrame(SyntaxNode? node, object? value) Parameters node SyntaxNode value object Fields ExitMarker public static readonly StackFrame ExitMarker Field Value StackFrame Properties Node public SyntaxNode? Node { get; } Property Value SyntaxNode Value public object? Value { get; } Property Value object"
  },
  "api/Heir.Runtime.Values.ArrayValue.html": {
    "href": "api/Heir.Runtime.Values.ArrayValue.html",
    "title": "Class ArrayValue | Heir Docs",
    "summary": "Class ArrayValue Namespace Heir.Runtime.Values Assembly Heir.dll public sealed class ArrayValue : IEnumerable<object?>, IEnumerable, IValue Inheritance object ArrayValue Implements IEnumerable<object> IEnumerable IValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ArrayValue(IEnumerable<object?>) public ArrayValue(IEnumerable<object?> elements) Parameters elements IEnumerable<object> Properties Elements public IEnumerable<object?> Elements { get; } Property Value IEnumerable<object> this[int] public object? this[int index] { get; set; } Parameters index int Property Value object Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<object?> GetEnumerator() Returns IEnumerator<object> An enumerator that can be used to iterate through the collection. ToString(ref int, bool) public string ToString(ref int indent, bool colors = false) Parameters indent int colors bool Returns string"
  },
  "api/Heir.Runtime.Values.FunctionValue.html": {
    "href": "api/Heir.Runtime.Values.FunctionValue.html",
    "title": "Class FunctionValue | Heir Docs",
    "summary": "Class FunctionValue Namespace Heir.Runtime.Values Assembly Heir.dll public sealed class FunctionValue Inheritance object FunctionValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors FunctionValue(List<Instruction>, Scope) public FunctionValue(List<Instruction> bodyBytecode, Scope closure) Parameters bodyBytecode List<Instruction> closure Scope Properties BodyBytecode public List<Instruction> BodyBytecode { get; } Property Value List<Instruction> Closure public Scope Closure { get; } Property Value Scope ID public Guid ID { get; } Property Value Guid Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Heir.Runtime.Values.IValue.html": {
    "href": "api/Heir.Runtime.Values.IValue.html",
    "title": "Interface IValue | Heir Docs",
    "summary": "Interface IValue Namespace Heir.Runtime.Values Assembly Heir.dll public interface IValue"
  },
  "api/Heir.Runtime.Values.ObjectValue.html": {
    "href": "api/Heir.Runtime.Values.ObjectValue.html",
    "title": "Class ObjectValue | Heir Docs",
    "summary": "Class ObjectValue Namespace Heir.Runtime.Values Assembly Heir.dll public sealed class ObjectValue : Dictionary<object, object?>, IDictionary<object, object?>, ICollection<KeyValuePair<object, object?>>, IReadOnlyDictionary<object, object?>, IReadOnlyCollection<KeyValuePair<object, object?>>, IEnumerable<KeyValuePair<object, object?>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IValue Inheritance object Dictionary<object, object> ObjectValue Implements IDictionary<object, object> ICollection<KeyValuePair<object, object>> IReadOnlyDictionary<object, object> IReadOnlyCollection<KeyValuePair<object, object>> IEnumerable<KeyValuePair<object, object>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IValue Inherited Members Dictionary<object, object>.Add(object, object) Dictionary<object, object>.Clear() Dictionary<object, object>.ContainsKey(object) Dictionary<object, object>.ContainsValue(object) Dictionary<object, object>.EnsureCapacity(int) Dictionary<object, object>.GetAlternateLookup<TAlternateKey>() Dictionary<object, object>.GetEnumerator() Dictionary<object, object>.OnDeserialization(object) Dictionary<object, object>.Remove(object) Dictionary<object, object>.Remove(object, out object) Dictionary<object, object>.TrimExcess() Dictionary<object, object>.TrimExcess(int) Dictionary<object, object>.TryAdd(object, object) Dictionary<object, object>.TryGetAlternateLookup<TAlternateKey>(out Dictionary<object, object>.AlternateLookup<TAlternateKey>) Dictionary<object, object>.TryGetValue(object, out object) Dictionary<object, object>.Comparer Dictionary<object, object>.Count Dictionary<object, object>.Capacity Dictionary<object, object>.this[object] Dictionary<object, object>.Keys Dictionary<object, object>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectValue(IEnumerable<KeyValuePair<object, object?>>) public ObjectValue(IEnumerable<KeyValuePair<object, object?>> pairs) Parameters pairs IEnumerable<KeyValuePair<object, object>> Methods ToString(ref int, bool) public string ToString(ref int indent, bool colors = false) Parameters indent int colors bool Returns string"
  },
  "api/Heir.Runtime.Values.html": {
    "href": "api/Heir.Runtime.Values.html",
    "title": "Namespace Heir.Runtime.Values | Heir Docs",
    "summary": "Namespace Heir.Runtime.Values Classes ArrayValue FunctionValue ObjectValue Interfaces IValue"
  },
  "api/Heir.Runtime.html": {
    "href": "api/Heir.Runtime.html",
    "title": "Namespace Heir.Runtime | Heir Docs",
    "summary": "Namespace Heir.Runtime Classes BinaryTypeOperations Scope StackFrame"
  },
  "api/Heir.SourceFile.html": {
    "href": "api/Heir.SourceFile.html",
    "title": "Class SourceFile | Heir Docs",
    "summary": "Class SourceFile Namespace Heir Assembly Heir.dll public sealed class SourceFile Inheritance object SourceFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SourceFile(string, string?, bool) public SourceFile(string source, string? path, bool isMainFile) Parameters source string path string isMainFile bool Properties Diagnostics public DiagnosticBag Diagnostics { get; } Property Value DiagnosticBag IsMainFile public bool IsMainFile { get; } Property Value bool Path public string Path { get; } Property Value string Source public string Source { get; } Property Value string Methods Bind() public Binder Bind() Returns Binder Evaluate(bool) public (object?, VirtualMachine, double) Evaluate(bool clearDiagnosticsAfterWriting = true) Parameters clearDiagnosticsAfterWriting bool Returns (object, VirtualMachine, double) FromPath(string, bool) public static SourceFile FromPath(string path, bool isMainFile = false) Parameters path string isMainFile bool Returns SourceFile GenerateBytecode() public Bytecode GenerateBytecode() Returns Bytecode Parse(bool) public SyntaxTree Parse(bool resolveBeforeMacros = true) Parameters resolveBeforeMacros bool Returns SyntaxTree Resolve(bool) public SyntaxTree Resolve(bool resolveBeforeMacros = true) Parameters resolveBeforeMacros bool Returns SyntaxTree Tokenize() public TokenStream Tokenize() Returns TokenStream TypeCheck() public Binder TypeCheck() Returns Binder"
  },
  "api/Heir.Syntax.Location.html": {
    "href": "api/Heir.Syntax.Location.html",
    "title": "Class Location | Heir Docs",
    "summary": "Class Location Namespace Heir.Syntax Assembly Heir.dll public sealed class Location Inheritance object Location Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors Location(string, int, int, int) public Location(string fileName, int line, int column, int position) Parameters fileName string line int column int position int Fields Empty public static readonly Location Empty Field Value Location Intrinsic public static readonly Location Intrinsic Field Value Location Properties Column public int Column { get; } Property Value int FileName public string FileName { get; } Property Value string Line public int Line { get; } Property Value int Position public int Position { get; } Property Value int Methods Equals(Location) public bool Equals(Location other) Parameters other Location Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Heir.Syntax.Span.html": {
    "href": "api/Heir.Syntax.Span.html",
    "title": "Class Span | Heir Docs",
    "summary": "Class Span Namespace Heir.Syntax Assembly Heir.dll public sealed class Span Inheritance object Span Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors Span(Location, Location?) public Span(Location start, Location? end) Parameters start Location end Location Properties End public Location End { get; } Property Value Location Start public Location Start { get; } Property Value Location Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Heir.Syntax.SyntaxFacts.html": {
    "href": "api/Heir.Syntax.SyntaxFacts.html",
    "title": "Class SyntaxFacts | Heir Docs",
    "summary": "Class SyntaxFacts Namespace Heir.Syntax Assembly Heir.dll public static class SyntaxFacts Inheritance object SyntaxFacts Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BinaryCompoundAssignmentOperators public static readonly HashSet<SyntaxKind> BinaryCompoundAssignmentOperators Field Value HashSet<SyntaxKind> KeywordMap public static readonly BiDictionary<string, SyntaxKind> KeywordMap Field Value BiDictionary<string, SyntaxKind> OperatorMap public static readonly BiDictionary<string, SyntaxKind> OperatorMap Field Value BiDictionary<string, SyntaxKind> PrimitiveTypeMap public static readonly Dictionary<SyntaxKind, PrimitiveType> PrimitiveTypeMap Field Value Dictionary<SyntaxKind, PrimitiveType> RadixCodes public static readonly Dictionary<char, int> RadixCodes Field Value Dictionary<char, int> TypeSyntaxes public static readonly HashSet<SyntaxKind> TypeSyntaxes Field Value HashSet<SyntaxKind>"
  },
  "api/Heir.Syntax.SyntaxKind.html": {
    "href": "api/Heir.Syntax.SyntaxKind.html",
    "title": "Enum SyntaxKind | Heir Docs",
    "summary": "Enum SyntaxKind Namespace Heir.Syntax Assembly Heir.dll public enum SyntaxKind Fields Ampersand = 43 AmpersandAmpersand = 14 AmpersandAmpersandEquals = 16 AmpersandEquals = 46 ArrayLiteral = 60 Bang = 13 BangEquals = 12 BoolKeyword = 78 BoolLiteral = 58 BreakKeyword = 68 Carat = 41 CaratEquals = 42 CharKeyword = 77 CharLiteral = 57 Colon = 21 ColonColon = 22 Comma = 23 ContinueKeyword = 69 DashRArrow = 26 Dot = 20 ElseKeyword = 66 EnumKeyword = 71 Equals = 25 EqualsEquals = 11 FloatKeyword = 75 FloatLiteral = 55 FnKeyword = 63 GT = 8 GTE = 10 Identifier = 53 IfKeyword = 65 InlineKeyword = 73 IntKeyword = 74 IntLiteral = 54 InterfaceKeyword = 70 LArrowLArrow = 49 LArrowLArrowEquals = 50 LBrace = 5 LBracket = 3 LParen = 1 LT = 7 LTE = 9 LetKeyword = 61 Minus = 30 MinusEquals = 31 MinusMinus = 32 MutKeyword = 62 NameofKeyword = 72 NoneKeyword = 79 ObjectLiteral = 59 Percent = 39 PercentEquals = 40 Pipe = 44 PipeEquals = 47 PipePipe = 15 PipePipeEquals = 17 Plus = 27 PlusEquals = 28 PlusPlus = 29 Question = 24 QuestionQuestion = 18 QuestionQuestionEquals = 19 RArrowRArrow = 51 RArrowRArrowEquals = 52 RBrace = 6 RBracket = 4 RParen = 2 ReturnKeyword = 64 Slash = 35 SlashEquals = 36 SlashSlash = 37 SlashSlashEquals = 38 Star = 33 StarEquals = 34 StringKeyword = 76 StringLiteral = 56 Tilde = 45 TildeEquals = 48 Trivia = 0 WhileKeyword = 67"
  },
  "api/Heir.Syntax.Token.html": {
    "href": "api/Heir.Syntax.Token.html",
    "title": "Class Token | Heir Docs",
    "summary": "Class Token Namespace Heir.Syntax Assembly Heir.dll public class Token Inheritance object Token Derived TriviaToken Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Token(SyntaxKind, string, object?, Location, Location) public Token(SyntaxKind syntax, string text, object? value, Location start, Location end) Parameters syntax SyntaxKind text string value object start Location end Location Token(SyntaxKind, string, object?, Span) public Token(SyntaxKind syntax, string text, object? value, Span span) Parameters syntax SyntaxKind text string value object span Span Properties Kind public SyntaxKind Kind { get; } Property Value SyntaxKind Span public Span Span { get; } Property Value Span Text public string Text { get; } Property Value string Value public object? Value { get; } Property Value object Methods IsKind(SyntaxKind) public bool IsKind(SyntaxKind kind) Parameters kind SyntaxKind Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WithKind(SyntaxKind) public Token WithKind(SyntaxKind kind) Parameters kind SyntaxKind Returns Token"
  },
  "api/Heir.Syntax.TokenFactory.html": {
    "href": "api/Heir.Syntax.TokenFactory.html",
    "title": "Class TokenFactory | Heir Docs",
    "summary": "Class TokenFactory Namespace Heir.Syntax Assembly Heir.dll public static class TokenFactory Inheritance object TokenFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BoolLiteral(string, Location, Location) public static Token BoolLiteral(string text, Location startLocation, Location endLocation) Parameters text string startLocation Location endLocation Location Returns Token CharLiteral(string, Location, Location) public static Token CharLiteral(string text, Location startLocation, Location endLocation) Parameters text string startLocation Location endLocation Location Returns Token FloatLiteral(string, Location, Location) public static Token FloatLiteral(string text, Location startLocation, Location endLocation) Parameters text string startLocation Location endLocation Location Returns Token Identifier(string) public static Token Identifier(string text) Parameters text string Returns Token Identifier(string, Location, Location) public static Token Identifier(string text, Location startLocation, Location endLocation) Parameters text string startLocation Location endLocation Location Returns Token IntLiteral(int, Location, Location) public static Token IntLiteral(int value, Location startLocation, Location endLocation) Parameters value int startLocation Location endLocation Location Returns Token IntLiteral(int, Token) public static Token IntLiteral(int value, Token token) Parameters value int token Token Returns Token IntLiteral(string, Location, Location, int) public static Token IntLiteral(string text, Location startLocation, Location endLocation, int radix = 10) Parameters text string startLocation Location endLocation Location radix int Returns Token Keyword(SyntaxKind) public static Token Keyword(SyntaxKind kind) Parameters kind SyntaxKind Returns Token Keyword(SyntaxKind, Location, Location) public static Token Keyword(SyntaxKind kind, Location startLocation, Location endLocation) Parameters kind SyntaxKind startLocation Location endLocation Location Returns Token Keyword(SyntaxKind, Token) public static Token Keyword(SyntaxKind kind, Token token) Parameters kind SyntaxKind token Token Returns Token NoneLiteral() public static Token NoneLiteral() Returns Token NoneLiteral(Location, Location) public static Token NoneLiteral(Location startLocation, Location endLocation) Parameters startLocation Location endLocation Location Returns Token NoneLiteral(Token) public static Token NoneLiteral(Token token) Parameters token Token Returns Token Operator(SyntaxKind, string, Location, Location) public static Token Operator(SyntaxKind kind, string text, Location startLocation, Location endLocation) Parameters kind SyntaxKind text string startLocation Location endLocation Location Returns Token StringFromIdentifier(Token) public static Token StringFromIdentifier(Token identifier) Parameters identifier Token Returns Token StringLiteral(string, Location, Location) public static Token StringLiteral(string text, Location startLocation, Location endLocation) Parameters text string startLocation Location endLocation Location Returns Token Trivia(TriviaKind, string, Location, Location) public static TriviaToken Trivia(TriviaKind kind, string text, Location startLocation, Location endLocation) Parameters kind TriviaKind text string startLocation Location endLocation Location Returns TriviaToken"
  },
  "api/Heir.Syntax.TokenStream.html": {
    "href": "api/Heir.Syntax.TokenStream.html",
    "title": "Class TokenStream | Heir Docs",
    "summary": "Class TokenStream Namespace Heir.Syntax Assembly Heir.dll public sealed class TokenStream : IEnumerable<Token>, IEnumerable Inheritance object TokenStream Implements IEnumerable<Token> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors TokenStream(DiagnosticBag, List<Token>) public TokenStream(DiagnosticBag diagnostics, List<Token> tokens) Parameters diagnostics DiagnosticBag tokens List<Token> Fields Diagnostics public readonly DiagnosticBag Diagnostics Field Value DiagnosticBag Properties Current The token at the current position. public Token Current { get; } Property Value Token IsAtEnd Whether the position has exceeded the amount of tokens in the stream. public bool IsAtEnd { get; } Property Value bool Position The position (amount of tokens read) in the stream. public int Position { get; } Property Value int Previous The token at the previous position. public Token? Previous { get; } Property Value Token Methods Advance() Increments the position in the TokenStream. public Token? Advance() Returns Token The token before incrementing the position Check(SyntaxKind, int) public bool Check(SyntaxKind kind, int offset = 0) Parameters kind SyntaxKind offset int Returns bool Whether the token at offset is of the given SyntaxKind CheckSequential(HashSet<SyntaxKind>, int) public bool CheckSequential(HashSet<SyntaxKind> kinds, int startOffset = 0) Parameters kinds HashSet<SyntaxKind> startOffset int Returns bool Whether the following sequence of tokens, starting at startOffset, matches the given HashSet<T> of tokens in order CheckSet(HashSet<SyntaxKind>, int) public bool CheckSet(HashSet<SyntaxKind> kinds, int offset = 0) Parameters kinds HashSet<SyntaxKind> offset int Returns bool Whether the token at offset is any of the SyntaxKinds in the given HashSet<T> Consume(SyntaxKind) Advances, and if it does not match the given SyntaxKind, throw an error because we received an unexpected token. public Token? Consume(SyntaxKind kind) Parameters kind SyntaxKind The expected SyntaxKind Returns Token The consumed token ConsumeType() Consumes any TypeSyntaxes. public Token? ConsumeType() Returns Token The consumed type token GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Token> GetEnumerator() Returns IEnumerator<Token> An enumerator that can be used to iterate through the collection. Match(SyntaxKind) Checks if the current token is of the given SyntaxKind. If it is then it consumes the token and return true, otherwise returns false. public bool Match(SyntaxKind kind) Parameters kind SyntaxKind The SyntaxKind to check for Returns bool Match(SyntaxKind, out Token) Checks if the current token is of the given SyntaxKind. If it is then it consumes the token and return true, otherwise returns false. public bool Match(SyntaxKind kind, out Token matchedToken) Parameters kind SyntaxKind The SyntaxKind to check for matchedToken Token The consumed token (if the method returns true, otherwise null) Returns bool Peek(int) public Token? Peek(int offset) Parameters offset int Returns Token The token at the given offset away from Position ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WithoutTrivia() public TokenStream WithoutTrivia() Returns TokenStream An identical TokenStream but with all TriviaTokens removed WithoutTriviaExceptSemicolons() public TokenStream WithoutTriviaExceptSemicolons() Returns TokenStream An identical TokenStream but with all TriviaTokens except semicolons removed"
  },
  "api/Heir.Syntax.TriviaKind.html": {
    "href": "api/Heir.Syntax.TriviaKind.html",
    "title": "Enum TriviaKind | Heir Docs",
    "summary": "Enum TriviaKind Namespace Heir.Syntax Assembly Heir.dll public enum TriviaKind Fields Comment = 4 EOF = 0 MultiLineComment = 5 Newline = 2 Semicolons = 3 Whitespace = 1"
  },
  "api/Heir.Syntax.TriviaToken.html": {
    "href": "api/Heir.Syntax.TriviaToken.html",
    "title": "Class TriviaToken | Heir Docs",
    "summary": "Class TriviaToken Namespace Heir.Syntax Assembly Heir.dll public sealed class TriviaToken : Token Inheritance object Token TriviaToken Inherited Members Token.Kind Token.Text Token.Value Token.Span Token.WithKind(SyntaxKind) Token.IsKind(SyntaxKind) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors TriviaToken(TriviaKind, string, Location, Location) public TriviaToken(TriviaKind kind, string text, Location startLocation, Location endLocation) Parameters kind TriviaKind text string startLocation Location endLocation Location Properties TriviaKind public TriviaKind TriviaKind { get; } Property Value TriviaKind Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Heir.Syntax.html": {
    "href": "api/Heir.Syntax.html",
    "title": "Namespace Heir.Syntax | Heir Docs",
    "summary": "Namespace Heir.Syntax Classes Location Span SyntaxFacts Token TokenFactory TokenStream TriviaToken Enums SyntaxKind TriviaKind"
  },
  "api/Heir.TypeChecker.html": {
    "href": "api/Heir.TypeChecker.html",
    "title": "Class TypeChecker | Heir Docs",
    "summary": "Class TypeChecker Namespace Heir Assembly Heir.dll public class TypeChecker : IBoundNodeVisitor, IBoundNodeVisitor<Void>, BoundExpression.IVisitor<Void>, BoundStatement.IVisitor<Void> Inheritance object TypeChecker Implements IBoundNodeVisitor IBoundNodeVisitor<Void> BoundExpression.IVisitor<Void> BoundStatement.IVisitor<Void> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TypeChecker(DiagnosticBag, BoundSyntaxTree) public TypeChecker(DiagnosticBag diagnostics, BoundSyntaxTree syntaxTree) Parameters diagnostics DiagnosticBag syntaxTree BoundSyntaxTree Methods Check() public void Check() VisitBoundArrayLiteralExpression(BoundArrayLiteral) public Void VisitBoundArrayLiteralExpression(BoundArrayLiteral arrayLiteral) Parameters arrayLiteral BoundArrayLiteral Returns Void VisitBoundAssignmentOpExpression(BoundAssignmentOp) public Void VisitBoundAssignmentOpExpression(BoundAssignmentOp assignmentOp) Parameters assignmentOp BoundAssignmentOp Returns Void VisitBoundBinaryOpExpression(BoundBinaryOp) public Void VisitBoundBinaryOpExpression(BoundBinaryOp binaryOp) Parameters binaryOp BoundBinaryOp Returns Void VisitBoundBlock(BoundBlock) public Void VisitBoundBlock(BoundBlock block) Parameters block BoundBlock Returns Void VisitBoundBreakStatement(BoundBreak) public Void VisitBoundBreakStatement(BoundBreak @break) Parameters break BoundBreak Returns Void VisitBoundContinueStatement(BoundContinue) public Void VisitBoundContinueStatement(BoundContinue @continue) Parameters continue BoundContinue Returns Void VisitBoundElementAccessExpression(BoundElementAccess) public Void VisitBoundElementAccessExpression(BoundElementAccess elementAccess) Parameters elementAccess BoundElementAccess Returns Void VisitBoundEnumDeclaration(BoundEnumDeclaration) public Void VisitBoundEnumDeclaration(BoundEnumDeclaration enumDeclaration) Parameters enumDeclaration BoundEnumDeclaration Returns Void VisitBoundEnumMember(BoundEnumMember) public Void VisitBoundEnumMember(BoundEnumMember enumMember) Parameters enumMember BoundEnumMember Returns Void VisitBoundExpressionStatement(BoundExpressionStatement) public Void VisitBoundExpressionStatement(BoundExpressionStatement expressionStatement) Parameters expressionStatement BoundExpressionStatement Returns Void VisitBoundFunctionDeclaration(BoundFunctionDeclaration) public Void VisitBoundFunctionDeclaration(BoundFunctionDeclaration declaration) Parameters declaration BoundFunctionDeclaration Returns Void VisitBoundIdentifierNameExpression(BoundIdentifierName) public Void VisitBoundIdentifierNameExpression(BoundIdentifierName identifierName) Parameters identifierName BoundIdentifierName Returns Void VisitBoundIfStatement(BoundIf) public Void VisitBoundIfStatement(BoundIf @if) Parameters if BoundIf Returns Void VisitBoundInvocationExpression(BoundInvocation) public Void VisitBoundInvocationExpression(BoundInvocation invocation) Parameters invocation BoundInvocation Returns Void VisitBoundLiteralExpression(BoundLiteral) public Void VisitBoundLiteralExpression(BoundLiteral literal) Parameters literal BoundLiteral Returns Void VisitBoundMemberAccessExpression(BoundMemberAccess) public Void VisitBoundMemberAccessExpression(BoundMemberAccess memberAccess) Parameters memberAccess BoundMemberAccess Returns Void VisitBoundNoOp(BoundNoOp) public Void VisitBoundNoOp(BoundNoOp noOp) Parameters noOp BoundNoOp Returns Void VisitBoundNoOp(BoundNoOpStatement) public Void VisitBoundNoOp(BoundNoOpStatement noOp) Parameters noOp BoundNoOpStatement Returns Void VisitBoundObjectLiteralExpression(BoundObjectLiteral) public Void VisitBoundObjectLiteralExpression(BoundObjectLiteral objectLiteral) Parameters objectLiteral BoundObjectLiteral Returns Void VisitBoundParameter(BoundParameter) public Void VisitBoundParameter(BoundParameter parameter) Parameters parameter BoundParameter Returns Void VisitBoundParenthesizedExpression(BoundParenthesized) public Void VisitBoundParenthesizedExpression(BoundParenthesized parenthesized) Parameters parenthesized BoundParenthesized Returns Void VisitBoundPostfixOpExpression(BoundPostfixOp) public Void VisitBoundPostfixOpExpression(BoundPostfixOp postfixOp) Parameters postfixOp BoundPostfixOp Returns Void VisitBoundReturnStatement(BoundReturn) public Void VisitBoundReturnStatement(BoundReturn @return) Parameters return BoundReturn Returns Void VisitBoundSyntaxTree(BoundSyntaxTree) public Void VisitBoundSyntaxTree(BoundSyntaxTree tree) Parameters tree BoundSyntaxTree Returns Void VisitBoundTypeParameter(BoundTypeParameter) public Void VisitBoundTypeParameter(BoundTypeParameter boundTypeParameter) Parameters boundTypeParameter BoundTypeParameter Returns Void VisitBoundUnaryOpExpression(BoundUnaryOp) public Void VisitBoundUnaryOpExpression(BoundUnaryOp unaryOp) Parameters unaryOp BoundUnaryOp Returns Void VisitBoundVariableDeclaration(BoundVariableDeclaration) public Void VisitBoundVariableDeclaration(BoundVariableDeclaration variableDeclaration) Parameters variableDeclaration BoundVariableDeclaration Returns Void VisitBoundWhileStatement(BoundWhile) public Void VisitBoundWhileStatement(BoundWhile @while) Parameters while BoundWhile Returns Void"
  },
  "api/Heir.Types.AnyType.html": {
    "href": "api/Heir.Types.AnyType.html",
    "title": "Class AnyType | Heir Docs",
    "summary": "Class AnyType Namespace Heir.Types Assembly Heir.dll public sealed class AnyType : SingularType Inheritance object BaseType SingularType AnyType Inherited Members SingularType.Name SingularType.TypeArguments SingularType.ToString(bool) BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AnyType() public AnyType() Properties Kind public override TypeKind Kind { get; } Property Value TypeKind"
  },
  "api/Heir.Types.ArrayType.html": {
    "href": "api/Heir.Types.ArrayType.html",
    "title": "Class ArrayType | Heir Docs",
    "summary": "Class ArrayType Namespace Heir.Types Assembly Heir.dll public class ArrayType : InterfaceType Inheritance object BaseType SingularType InterfaceType ArrayType Inherited Members InterfaceType.Members InterfaceType.IndexSignatures InterfaceType.IndexType InterfaceType.Readonly(string, Dictionary<string, BaseType>) InterfaceType.ToString(bool, int) SingularType.Name SingularType.TypeArguments BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArrayType(BaseType) public ArrayType(BaseType elementType) Parameters elementType BaseType Properties ElementType public BaseType ElementType { get; } Property Value BaseType Kind public override TypeKind Kind { get; } Property Value TypeKind Methods ToString(bool) public override string ToString(bool colors = false) Parameters colors bool Returns string"
  },
  "api/Heir.Types.BaseType.html": {
    "href": "api/Heir.Types.BaseType.html",
    "title": "Class BaseType | Heir Docs",
    "summary": "Class BaseType Namespace Heir.Types Assembly Heir.dll public abstract class BaseType Inheritance object BaseType Derived IntersectionType ParenthesizedType SingularType UnionType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsNone public bool IsNone { get; } Property Value bool IsNullable public bool IsNullable { get; } Property Value bool Kind public abstract TypeKind Kind { get; } Property Value TypeKind Methods FromTypeRef(TypeRef) public static BaseType FromTypeRef(TypeRef typeRef) Parameters typeRef TypeRef Returns BaseType IsAssignableTo(BaseType) public bool IsAssignableTo(BaseType other) Parameters other BaseType Returns bool IsIndexable(BaseType) public static bool IsIndexable(BaseType type) Parameters type BaseType Returns bool NonNullable(BaseType) public static BaseType NonNullable(BaseType type) Parameters type BaseType Returns BaseType Nullable(BaseType) public static BaseType Nullable(BaseType type) Parameters type BaseType Returns BaseType ToString(bool) public abstract string ToString(bool colors = false) Parameters colors bool Returns string UnwrapParentheses(BaseType) public static BaseType UnwrapParentheses(BaseType type) Parameters type BaseType Returns BaseType"
  },
  "api/Heir.Types.FunctionType.html": {
    "href": "api/Heir.Types.FunctionType.html",
    "title": "Class FunctionType | Heir Docs",
    "summary": "Class FunctionType Namespace Heir.Types Assembly Heir.dll public sealed class FunctionType : SingularType Inheritance object BaseType SingularType FunctionType Inherited Members SingularType.Name SingularType.TypeArguments BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FunctionType(Dictionary<string, object?>, Dictionary<string, BaseType>, List<TypeParameter>, BaseType) public FunctionType(Dictionary<string, object?> defaults, Dictionary<string, BaseType> parameters, List<TypeParameter> typeParameters, BaseType returnType) Parameters defaults Dictionary<string, object> parameters Dictionary<string, BaseType> typeParameters List<TypeParameter> returnType BaseType Properties Arity public Range Arity { get; } Property Value Range Defaults public Dictionary<string, object?> Defaults { get; } Property Value Dictionary<string, object> Kind public override TypeKind Kind { get; } Property Value TypeKind Parameters public Dictionary<string, BaseType> Parameters { get; } Property Value Dictionary<string, BaseType> ReturnType public BaseType ReturnType { get; } Property Value BaseType TypeParameters public List<TypeParameter> TypeParameters { get; } Property Value List<TypeParameter> Methods ToString(bool) public override string ToString(bool colors = false) Parameters colors bool Returns string"
  },
  "api/Heir.Types.InterfaceType.html": {
    "href": "api/Heir.Types.InterfaceType.html",
    "title": "Class InterfaceType | Heir Docs",
    "summary": "Class InterfaceType Namespace Heir.Types Assembly Heir.dll public class InterfaceType : SingularType Inheritance object BaseType SingularType InterfaceType Derived ArrayType Inherited Members SingularType.Kind SingularType.Name SingularType.TypeArguments SingularType.ToString(bool) BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InterfaceType(Dictionary<LiteralType, InterfaceMemberSignature>, Dictionary<PrimitiveType, BaseType>, string?) public InterfaceType(Dictionary<LiteralType, InterfaceMemberSignature> members, Dictionary<PrimitiveType, BaseType> indexSignatures, string? name = null) Parameters members Dictionary<LiteralType, InterfaceMemberSignature> indexSignatures Dictionary<PrimitiveType, BaseType> name string Properties IndexSignatures public Dictionary<PrimitiveType, BaseType> IndexSignatures { get; } Property Value Dictionary<PrimitiveType, BaseType> IndexType public BaseType IndexType { get; } Property Value BaseType Members public Dictionary<LiteralType, InterfaceMemberSignature> Members { get; } Property Value Dictionary<LiteralType, InterfaceMemberSignature> Methods Readonly(string, Dictionary<string, BaseType>) public static InterfaceType Readonly(string name, Dictionary<string, BaseType> members) Parameters name string members Dictionary<string, BaseType> Returns InterfaceType ToString(bool, int) public string ToString(bool colors, int indent = 0) Parameters colors bool indent int Returns string"
  },
  "api/Heir.Types.IntersectionType.html": {
    "href": "api/Heir.Types.IntersectionType.html",
    "title": "Class IntersectionType | Heir Docs",
    "summary": "Class IntersectionType Namespace Heir.Types Assembly Heir.dll public sealed class IntersectionType : BaseType Inheritance object BaseType IntersectionType Inherited Members BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors IntersectionType(List<BaseType>) public IntersectionType(List<BaseType> types) Parameters types List<BaseType> Properties Kind public override TypeKind Kind { get; } Property Value TypeKind Types public List<BaseType> Types { get; } Property Value List<BaseType> Methods ToString(bool) public override string ToString(bool colors = false) Parameters colors bool Returns string"
  },
  "api/Heir.Types.IntrinsicTypes.html": {
    "href": "api/Heir.Types.IntrinsicTypes.html",
    "title": "Class IntrinsicTypes | Heir Docs",
    "summary": "Class IntrinsicTypes Namespace Heir.Types Assembly Heir.dll public static class IntrinsicTypes Inheritance object IntrinsicTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Any public static readonly AnyType Any Field Value AnyType Index public static readonly UnionType Index Field Value UnionType Number public static readonly UnionType Number Field Value UnionType StringOrChar public static readonly UnionType StringOrChar Field Value UnionType"
  },
  "api/Heir.Types.LiteralType.html": {
    "href": "api/Heir.Types.LiteralType.html",
    "title": "Class LiteralType | Heir Docs",
    "summary": "Class LiteralType Namespace Heir.Types Assembly Heir.dll public class LiteralType : PrimitiveType Inheritance object BaseType SingularType PrimitiveType LiteralType Inherited Members PrimitiveType.Int PrimitiveType.Float PrimitiveType.String PrimitiveType.Char PrimitiveType.Bool PrimitiveType.None PrimitiveType.PrimitiveKind PrimitiveType.FromValue(object) SingularType.Name SingularType.TypeArguments BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LiteralType(object?) public LiteralType(object? value) Parameters value object Properties Kind public override TypeKind Kind { get; } Property Value TypeKind Value public object? Value { get; } Property Value object Methods AsPrimitive() public PrimitiveType AsPrimitive() Returns PrimitiveType Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString(bool) public override string ToString(bool colors = false) Parameters colors bool Returns string"
  },
  "api/Heir.Types.ParenthesizedType.html": {
    "href": "api/Heir.Types.ParenthesizedType.html",
    "title": "Class ParenthesizedType | Heir Docs",
    "summary": "Class ParenthesizedType Namespace Heir.Types Assembly Heir.dll public class ParenthesizedType : BaseType Inheritance object BaseType ParenthesizedType Inherited Members BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParenthesizedType(BaseType) public ParenthesizedType(BaseType type) Parameters type BaseType Properties Kind public override TypeKind Kind { get; } Property Value TypeKind Type public BaseType Type { get; } Property Value BaseType Methods ToString(bool) public override string ToString(bool colors = false) Parameters colors bool Returns string"
  },
  "api/Heir.Types.PrimitiveType.html": {
    "href": "api/Heir.Types.PrimitiveType.html",
    "title": "Class PrimitiveType | Heir Docs",
    "summary": "Class PrimitiveType Namespace Heir.Types Assembly Heir.dll public class PrimitiveType : SingularType Inheritance object BaseType SingularType PrimitiveType Derived LiteralType Inherited Members SingularType.Name SingularType.TypeArguments SingularType.ToString(bool) BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PrimitiveType(PrimitiveTypeKind) protected PrimitiveType(PrimitiveTypeKind primitiveTypeKind) Parameters primitiveTypeKind PrimitiveTypeKind Fields Bool public static readonly PrimitiveType Bool Field Value PrimitiveType Char public static readonly PrimitiveType Char Field Value PrimitiveType Float public static readonly PrimitiveType Float Field Value PrimitiveType Int public static readonly PrimitiveType Int Field Value PrimitiveType None public static readonly PrimitiveType None Field Value PrimitiveType String public static readonly PrimitiveType String Field Value PrimitiveType Properties Kind public override TypeKind Kind { get; } Property Value TypeKind PrimitiveKind public PrimitiveTypeKind PrimitiveKind { get; } Property Value PrimitiveTypeKind Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. FromValue(object?) public static PrimitiveType? FromValue(object? value) Parameters value object Returns PrimitiveType GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Heir.Types.PrimitiveTypeKind.html": {
    "href": "api/Heir.Types.PrimitiveTypeKind.html",
    "title": "Enum PrimitiveTypeKind | Heir Docs",
    "summary": "Enum PrimitiveTypeKind Namespace Heir.Types Assembly Heir.dll public enum PrimitiveTypeKind Fields Bool = 4 Char = 3 Float = 1 Int = 0 None = 5 String = 2"
  },
  "api/Heir.Types.SingularType.html": {
    "href": "api/Heir.Types.SingularType.html",
    "title": "Class SingularType | Heir Docs",
    "summary": "Class SingularType Namespace Heir.Types Assembly Heir.dll public class SingularType : BaseType Inheritance object BaseType SingularType Derived AnyType FunctionType InterfaceType PrimitiveType TypeParameter Inherited Members BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SingularType(string, List<BaseType>?) public SingularType(string name, List<BaseType>? typeArguments = null) Parameters name string typeArguments List<BaseType> Properties Kind public override TypeKind Kind { get; } Property Value TypeKind Name public string Name { get; } Property Value string TypeArguments public List<BaseType>? TypeArguments { get; } Property Value List<BaseType> Methods ToString(bool) public override string ToString(bool colors = false) Parameters colors bool Returns string"
  },
  "api/Heir.Types.TypeKind.html": {
    "href": "api/Heir.Types.TypeKind.html",
    "title": "Enum TypeKind | Heir Docs",
    "summary": "Enum TypeKind Namespace Heir.Types Assembly Heir.dll public enum TypeKind Fields Any = 0 Array = 6 Class = 9 Function = 7 Interface = 8 Intersection = 5 Literal = 3 Primitive = 2 Singular = 1 Union = 4"
  },
  "api/Heir.Types.TypeParameter.html": {
    "href": "api/Heir.Types.TypeParameter.html",
    "title": "Class TypeParameter | Heir Docs",
    "summary": "Class TypeParameter Namespace Heir.Types Assembly Heir.dll public class TypeParameter : SingularType Inheritance object BaseType SingularType TypeParameter Inherited Members SingularType.Kind SingularType.Name SingularType.TypeArguments SingularType.ToString(bool) BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TypeParameter(string, BaseType?, BaseType?) public TypeParameter(string name, BaseType? baseType, BaseType? initializer) Parameters name string baseType BaseType initializer BaseType Properties BaseType public BaseType? BaseType { get; } Property Value BaseType Initializer public BaseType? Initializer { get; } Property Value BaseType Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Heir.Types.UnionType.html": {
    "href": "api/Heir.Types.UnionType.html",
    "title": "Class UnionType | Heir Docs",
    "summary": "Class UnionType Namespace Heir.Types Assembly Heir.dll public sealed class UnionType : BaseType Inheritance object BaseType UnionType Inherited Members BaseType.IsNullable BaseType.IsNone BaseType.IsIndexable(BaseType) BaseType.UnwrapParentheses(BaseType) BaseType.Nullable(BaseType) BaseType.NonNullable(BaseType) BaseType.FromTypeRef(TypeRef) BaseType.IsAssignableTo(BaseType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UnionType(List<BaseType>) public UnionType(List<BaseType> types) Parameters types List<BaseType> Properties Kind public override TypeKind Kind { get; } Property Value TypeKind Types public List<BaseType> Types { get; } Property Value List<BaseType> Methods ToString(bool) public override string ToString(bool colors = false) Parameters colors bool Returns string"
  },
  "api/Heir.Types.html": {
    "href": "api/Heir.Types.html",
    "title": "Namespace Heir.Types | Heir Docs",
    "summary": "Namespace Heir.Types Classes AnyType ArrayType BaseType FunctionType InterfaceType IntersectionType IntrinsicTypes LiteralType ParenthesizedType PrimitiveType SingularType TypeParameter UnionType Enums PrimitiveTypeKind TypeKind"
  },
  "api/Heir.Utility.html": {
    "href": "api/Heir.Utility.html",
    "title": "Class Utility | Heir Docs",
    "summary": "Class Utility Namespace Heir Assembly Heir.dll public static class Utility Inheritance object Utility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ContainsSequence<T>(IReadOnlyList<T>, IReadOnlyList<T>) public static bool ContainsSequence<T>(IReadOnlyList<T> list, IReadOnlyList<T> sequence) Parameters list IReadOnlyList<T> sequence IReadOnlyList<T> Returns bool Type Parameters T DictionariesAreEqual<TKey, TValue>(Dictionary<TKey, TValue>, Dictionary<TKey, TValue>) public static bool DictionariesAreEqual<TKey, TValue>(Dictionary<TKey, TValue> a, Dictionary<TKey, TValue> b) where TKey : notnull Parameters a Dictionary<TKey, TValue> b Dictionary<TKey, TValue> Returns bool Type Parameters TKey TValue EscapeTabsAndNewlines(string) public static string EscapeTabsAndNewlines(string text) Parameters text string Returns string Q_rsqrt(float) public static float Q_rsqrt(float number) Parameters number float Returns float Repr(object?, bool) public static string Repr(object? value, bool colors = false) Parameters value object colors bool Returns string"
  },
  "api/Heir.VirtualMachine.html": {
    "href": "api/Heir.VirtualMachine.html",
    "title": "Class VirtualMachine | Heir Docs",
    "summary": "Class VirtualMachine Namespace Heir Assembly Heir.dll public sealed class VirtualMachine Inheritance object VirtualMachine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors VirtualMachine(Bytecode, DiagnosticBag, Scope?, int) public VirtualMachine(Bytecode bytecode, DiagnosticBag diagnostics, Scope? scope = null, int recursionDepth = 0) Parameters bytecode Bytecode diagnostics DiagnosticBag scope Scope recursionDepth int Properties Diagnostics public DiagnosticBag Diagnostics { get; } Property Value DiagnosticBag GlobalScope public Scope GlobalScope { get; } Property Value Scope Scope public Scope Scope { get; } Property Value Scope Stack public Stack<StackFrame> Stack { get; set; } Property Value Stack<StackFrame> Methods BeginRecursion(Token) public void BeginRecursion(Token token) Parameters token Token EndRecursion(int) public void EndRecursion(int level = 1) Parameters level int Evaluate() public object? Evaluate() Returns object"
  },
  "api/Heir.html": {
    "href": "api/Heir.html",
    "title": "Namespace Heir | Heir Docs",
    "summary": "Namespace Heir Classes BiDictionary<TKey, TValue> Binder BytecodeGenerator CompileTimeMacroEvaluator Lexer Parser Resolver SourceFile TypeChecker Utility VirtualMachine"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting started | Heir Docs",
    "summary": "Getting started TODO"
  },
  "docs/roadmap.html": {
    "href": "docs/roadmap.html",
    "title": "| Heir Docs",
    "summary": "Roadmap Lexing Literals [ ] multi-line string Parsing [ ] Warn when using an expression as a statement which is not a return value and isn't something like an AssignmentOp or Invocation Types [x] Generics [ ] Literal [x] Array [ ] Interface index signatures [ ] Interface method signatures [ ] Class Control flow [x] if [x] while [ ] for [ ] switch [x] break [x] continue [ ] Lambdas [x] Array literals [x] Enums [ ] inline [x] Variables [x] Enums [ ] Functions Reflection/type features [ ] value is Type [ ] Type narrowing [ ] Type aliases [ ] Type casting [ ] typeof [x] nameof Runtime/HVM [ ] intrinsics (built-ins) [ ] injectable libraries [x] functions [ ] classes [ ] types Unit Tests [ ] Parsing/binding/typechecking type parameters/arguments"
  },
  "index.html": {
    "href": "index.html",
    "title": "Heir | Heir Docs",
    "summary": "Heir Welcome to the Heir docs! Here you can: See some example Heir programs Learn how to use Heir Learn what Heir will support in the future Join the community! https://discord.gg/AEbNTEVNAd"
  }
}