### YamlMime:ManagedReference
items:
- uid: Heir.Tests.TypeCheckerTest
  commentId: T:Heir.Tests.TypeCheckerTest
  id: TypeCheckerTest
  parent: Heir.Tests
  children:
  - Heir.Tests.TypeCheckerTest.DoesNotThrowWith(System.String)
  - Heir.Tests.TypeCheckerTest.ThrowsWith(System.String,Heir.DiagnosticCode)
  langs:
  - csharp
  - vb
  name: TypeCheckerTest
  nameWithType: TypeCheckerTest
  fullName: Heir.Tests.TypeCheckerTest
  type: Class
  source:
    remote:
      path: Heir.Tests/TypeCheckerTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: TypeCheckerTest
    path: Heir.Tests/TypeCheckerTest.cs
    startLine: 4
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: public class TypeCheckerTest
    content.vb: Public Class TypeCheckerTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Heir.Tests.TypeCheckerTest.ThrowsWith(System.String,Heir.DiagnosticCode)
  commentId: M:Heir.Tests.TypeCheckerTest.ThrowsWith(System.String,Heir.DiagnosticCode)
  id: ThrowsWith(System.String,Heir.DiagnosticCode)
  parent: Heir.Tests.TypeCheckerTest
  langs:
  - csharp
  - vb
  name: ThrowsWith(string, DiagnosticCode)
  nameWithType: TypeCheckerTest.ThrowsWith(string, DiagnosticCode)
  fullName: Heir.Tests.TypeCheckerTest.ThrowsWith(string, Heir.DiagnosticCode)
  type: Method
  source:
    remote:
      path: Heir.Tests/TypeCheckerTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: ThrowsWith
    path: Heir.Tests/TypeCheckerTest.cs
    startLine: 6
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "fn abc(x = 1) -> none; abc(1, 2);", DiagnosticCode.H019 })]

      [InlineData(new object[] { "fn abc(x: int = 1) -> none; abc(1, 2);", DiagnosticCode.H019 })]

      [InlineData(new object[] { "fn abc(x: int) -> none; abc(1, 2);", DiagnosticCode.H019 })]

      [InlineData(new object[] { "fn abc(x: int) -> none; abc();", DiagnosticCode.H019 })]

      [InlineData(new object[] { "fn abc -> none; abc(1);", DiagnosticCode.H019 })]

      [InlineData(new object[] { "1[1]", DiagnosticCode.H018 })]

      [InlineData(new object[] { "1()", DiagnosticCode.H018 })]

      [InlineData(new object[] { "let foo = {}; foo.a", DiagnosticCode.H013 })]

      [InlineData(new object[] { "let mut x = 1; x = 'a'", DiagnosticCode.H007 })]

      [InlineData(new object[] { "fn abc: int -> 'a'", DiagnosticCode.H007 })]

      [InlineData(new object[] { "fn abc(x: int) {} abc('a')", DiagnosticCode.H007 })]

      [InlineData(new object[] { "let foo = {}; foo['a']", DiagnosticCode.H007 })]

      public void ThrowsWith(string input, DiagnosticCode expectedDiagnosticCode)
    parameters:
    - id: input
      type: System.String
    - id: expectedDiagnosticCode
      type: Heir.DiagnosticCode
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "fn abc(x = 1) -> none; abc(1, 2);", DiagnosticCode.H019 })>

      <InlineData(New Object() { "fn abc(x: int = 1) -> none; abc(1, 2);", DiagnosticCode.H019 })>

      <InlineData(New Object() { "fn abc(x: int) -> none; abc(1, 2);", DiagnosticCode.H019 })>

      <InlineData(New Object() { "fn abc(x: int) -> none; abc();", DiagnosticCode.H019 })>

      <InlineData(New Object() { "fn abc -> none; abc(1);", DiagnosticCode.H019 })>

      <InlineData(New Object() { "1[1]", DiagnosticCode.H018 })>

      <InlineData(New Object() { "1()", DiagnosticCode.H018 })>

      <InlineData(New Object() { "let foo = {}; foo.a", DiagnosticCode.H013 })>

      <InlineData(New Object() { "let mut x = 1; x = 'a'", DiagnosticCode.H007 })>

      <InlineData(New Object() { "fn abc: int -> 'a'", DiagnosticCode.H007 })>

      <InlineData(New Object() { "fn abc(x: int) {} abc('a')", DiagnosticCode.H007 })>

      <InlineData(New Object() { "let foo = {}; foo['a']", DiagnosticCode.H007 })>

      Public Sub ThrowsWith(input As String, expectedDiagnosticCode As DiagnosticCode)
  overload: Heir.Tests.TypeCheckerTest.ThrowsWith*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: TypeCheckerTest.ThrowsWith(String, DiagnosticCode)
  fullName.vb: Heir.Tests.TypeCheckerTest.ThrowsWith(String, Heir.DiagnosticCode)
  name.vb: ThrowsWith(String, DiagnosticCode)
- uid: Heir.Tests.TypeCheckerTest.DoesNotThrowWith(System.String)
  commentId: M:Heir.Tests.TypeCheckerTest.DoesNotThrowWith(System.String)
  id: DoesNotThrowWith(System.String)
  parent: Heir.Tests.TypeCheckerTest
  langs:
  - csharp
  - vb
  name: DoesNotThrowWith(string)
  nameWithType: TypeCheckerTest.DoesNotThrowWith(string)
  fullName: Heir.Tests.TypeCheckerTest.DoesNotThrowWith(string)
  type: Method
  source:
    remote:
      path: Heir.Tests/TypeCheckerTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: DoesNotThrowWith
    path: Heir.Tests/TypeCheckerTest.cs
    startLine: 26
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "let mut x: int | char = 1; x = 'a';" })]

      [InlineData(new object[] { "let foo = { bar: \"baz\" }; foo[\"bar\"];" })]

      [InlineData(new object[] { "let foo = { bar: \"baz\" }; foo.bar;" })]

      [InlineData(new object[] { "let foo = { bar: { baz: 69 } }; foo.bar.baz;" })]

      [InlineData(new object[] { "({ bar: 69 }).bar;" })]

      [InlineData(new object[] { "fn brah -> { a: \"brah\" }; let foo = { bar: { baz: brah } }; foo[\"bar\"].baz()[\"a\"];" })]

      public void DoesNotThrowWith(string input)
    parameters:
    - id: input
      type: System.String
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "let mut x: int | char = 1; x = 'a';" })>

      <InlineData(New Object() { "let foo = { bar: ""baz"" }; foo[""bar""];" })>

      <InlineData(New Object() { "let foo = { bar: ""baz"" }; foo.bar;" })>

      <InlineData(New Object() { "let foo = { bar: { baz: 69 } }; foo.bar.baz;" })>

      <InlineData(New Object() { "({ bar: 69 }).bar;" })>

      <InlineData(New Object() { "fn brah -> { a: ""brah"" }; let foo = { bar: { baz: brah } }; foo[""bar""].baz()[""a""];" })>

      Public Sub DoesNotThrowWith(input As String)
  overload: Heir.Tests.TypeCheckerTest.DoesNotThrowWith*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: TypeCheckerTest.DoesNotThrowWith(String)
  fullName.vb: Heir.Tests.TypeCheckerTest.DoesNotThrowWith(String)
  name.vb: DoesNotThrowWith(String)
references:
- uid: Heir.Tests
  commentId: N:Heir.Tests
  href: Heir.html
  name: Heir.Tests
  nameWithType: Heir.Tests
  fullName: Heir.Tests
  spec.csharp:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Tests
    name: Tests
    href: Heir.Tests.html
  spec.vb:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Tests
    name: Tests
    href: Heir.Tests.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Heir.Tests.TypeCheckerTest.ThrowsWith*
  commentId: Overload:Heir.Tests.TypeCheckerTest.ThrowsWith
  href: Heir.Tests.TypeCheckerTest.html#Heir_Tests_TypeCheckerTest_ThrowsWith_System_String_Heir_DiagnosticCode_
  name: ThrowsWith
  nameWithType: TypeCheckerTest.ThrowsWith
  fullName: Heir.Tests.TypeCheckerTest.ThrowsWith
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Heir.DiagnosticCode
  commentId: T:Heir.DiagnosticCode
  parent: Heir
  href: Heir.DiagnosticCode.html
  name: DiagnosticCode
  nameWithType: DiagnosticCode
  fullName: Heir.DiagnosticCode
- uid: Heir
  commentId: N:Heir
  href: Heir.html
  name: Heir
  nameWithType: Heir
  fullName: Heir
- uid: Heir.Tests.TypeCheckerTest.DoesNotThrowWith*
  commentId: Overload:Heir.Tests.TypeCheckerTest.DoesNotThrowWith
  href: Heir.Tests.TypeCheckerTest.html#Heir_Tests_TypeCheckerTest_DoesNotThrowWith_System_String_
  name: DoesNotThrowWith
  nameWithType: TypeCheckerTest.DoesNotThrowWith
  fullName: Heir.Tests.TypeCheckerTest.DoesNotThrowWith
