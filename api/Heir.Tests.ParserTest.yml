### YamlMime:ManagedReference
items:
- uid: Heir.Tests.ParserTest
  commentId: T:Heir.Tests.ParserTest
  id: ParserTest
  parent: Heir.Tests
  children:
  - Heir.Tests.ParserTest.DoesNotThrowWith(System.String)
  - Heir.Tests.ParserTest.Parses_AssignmentOperators(System.String,Heir.Syntax.SyntaxKind)
  - Heir.Tests.ParserTest.Parses_BinaryOperators(System.String,Heir.Syntax.SyntaxKind)
  - Heir.Tests.ParserTest.Parses_ElementAccess
  - Heir.Tests.ParserTest.Parses_FunctionDeclarations(System.String)
  - Heir.Tests.ParserTest.Parses_FunctionDeclarations_WithParameters(System.String,System.Boolean)
  - Heir.Tests.ParserTest.Parses_Identifiers(System.String)
  - Heir.Tests.ParserTest.Parses_IfStatements
  - Heir.Tests.ParserTest.Parses_IntersectionTypes
  - Heir.Tests.ParserTest.Parses_Invocation(System.String,System.Int32)
  - Heir.Tests.ParserTest.Parses_Literals(System.String)
  - Heir.Tests.ParserTest.Parses_MemberAccess
  - Heir.Tests.ParserTest.Parses_MutableVariableDeclarations
  - Heir.Tests.ParserTest.Parses_ObjectLiterals(System.String,Heir.Syntax.SyntaxKind,System.Int32)
  - Heir.Tests.ParserTest.Parses_OperatorPrecedence
  - Heir.Tests.ParserTest.Parses_ParenthesizedExpressions
  - Heir.Tests.ParserTest.Parses_ParenthesizedTypes
  - Heir.Tests.ParserTest.Parses_ReturnStatements
  - Heir.Tests.ParserTest.Parses_UnaryOperators(System.String,Heir.Syntax.SyntaxKind)
  - Heir.Tests.ParserTest.Parses_UnionTypes
  - Heir.Tests.ParserTest.Parses_VariableDeclarations
  - Heir.Tests.ParserTest.ThrowsWith(System.String,Heir.DiagnosticCode)
  - Heir.Tests.ParserTest.WarnsWith(System.String,Heir.DiagnosticCode)
  langs:
  - csharp
  - vb
  name: ParserTest
  nameWithType: ParserTest
  fullName: Heir.Tests.ParserTest
  type: Class
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: ParserTest
    path: Heir.Tests/ParserTest.cs
    startLine: 6
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: public class ParserTest
    content.vb: Public Class ParserTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Heir.Tests.ParserTest.ThrowsWith(System.String,Heir.DiagnosticCode)
  commentId: M:Heir.Tests.ParserTest.ThrowsWith(System.String,Heir.DiagnosticCode)
  id: ThrowsWith(System.String,Heir.DiagnosticCode)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: ThrowsWith(string, DiagnosticCode)
  nameWithType: ParserTest.ThrowsWith(string, DiagnosticCode)
  fullName: Heir.Tests.ParserTest.ThrowsWith(string, Heir.DiagnosticCode)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: ThrowsWith
    path: Heir.Tests/ParserTest.cs
    startLine: 8
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "fn abc(x = x) {}", DiagnosticCode.H016 })]

      [InlineData(new object[] { "fn abc(x) {}", DiagnosticCode.H012 })]

      [InlineData(new object[] { "let x", DiagnosticCode.H012 })]

      [InlineData(new object[] { "1 = 2", DiagnosticCode.H006B })]

      [InlineData(new object[] { "++1", DiagnosticCode.H006 })]

      [InlineData(new object[] { "--3", DiagnosticCode.H006 })]

      [InlineData(new object[] { "()", DiagnosticCode.H004D })]

      [InlineData(new object[] { "fn", DiagnosticCode.H004C })]

      [InlineData(new object[] { "let", DiagnosticCode.H004C })]

      [InlineData(new object[] { "fn abc(", DiagnosticCode.H004 })]

      [InlineData(new object[] { "(1", DiagnosticCode.H004 })]

      [InlineData(new object[] { "]", DiagnosticCode.H001B })]

      public void ThrowsWith(string input, DiagnosticCode expectedCode)
    parameters:
    - id: input
      type: System.String
    - id: expectedCode
      type: Heir.DiagnosticCode
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "fn abc(x = x) {}", DiagnosticCode.H016 })>

      <InlineData(New Object() { "fn abc(x) {}", DiagnosticCode.H012 })>

      <InlineData(New Object() { "let x", DiagnosticCode.H012 })>

      <InlineData(New Object() { "1 = 2", DiagnosticCode.H006B })>

      <InlineData(New Object() { "++1", DiagnosticCode.H006 })>

      <InlineData(New Object() { "--3", DiagnosticCode.H006 })>

      <InlineData(New Object() { "()", DiagnosticCode.H004D })>

      <InlineData(New Object() { "fn", DiagnosticCode.H004C })>

      <InlineData(New Object() { "let", DiagnosticCode.H004C })>

      <InlineData(New Object() { "fn abc(", DiagnosticCode.H004 })>

      <InlineData(New Object() { "(1", DiagnosticCode.H004 })>

      <InlineData(New Object() { "]", DiagnosticCode.H001B })>

      Public Sub ThrowsWith(input As String, expectedCode As DiagnosticCode)
  overload: Heir.Tests.ParserTest.ThrowsWith*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.ThrowsWith(String, DiagnosticCode)
  fullName.vb: Heir.Tests.ParserTest.ThrowsWith(String, Heir.DiagnosticCode)
  name.vb: ThrowsWith(String, DiagnosticCode)
- uid: Heir.Tests.ParserTest.WarnsWith(System.String,Heir.DiagnosticCode)
  commentId: M:Heir.Tests.ParserTest.WarnsWith(System.String,Heir.DiagnosticCode)
  id: WarnsWith(System.String,Heir.DiagnosticCode)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: WarnsWith(string, DiagnosticCode)
  nameWithType: ParserTest.WarnsWith(string, DiagnosticCode)
  fullName: Heir.Tests.ParserTest.WarnsWith(string, Heir.DiagnosticCode)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: WarnsWith
    path: Heir.Tests/ParserTest.cs
    startLine: 28
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "let x: (int) = 1", DiagnosticCode.H014 })]

      [InlineData(new object[] { "let x: (int | float) = 1", DiagnosticCode.H014 })]

      public void WarnsWith(string input, DiagnosticCode expectedCode)
    parameters:
    - id: input
      type: System.String
    - id: expectedCode
      type: Heir.DiagnosticCode
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "let x: (int) = 1", DiagnosticCode.H014 })>

      <InlineData(New Object() { "let x: (int | float) = 1", DiagnosticCode.H014 })>

      Public Sub WarnsWith(input As String, expectedCode As DiagnosticCode)
  overload: Heir.Tests.ParserTest.WarnsWith*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.WarnsWith(String, DiagnosticCode)
  fullName.vb: Heir.Tests.ParserTest.WarnsWith(String, Heir.DiagnosticCode)
  name.vb: WarnsWith(String, DiagnosticCode)
- uid: Heir.Tests.ParserTest.DoesNotThrowWith(System.String)
  commentId: M:Heir.Tests.ParserTest.DoesNotThrowWith(System.String)
  id: DoesNotThrowWith(System.String)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: DoesNotThrowWith(string)
  nameWithType: ParserTest.DoesNotThrowWith(string)
  fullName: Heir.Tests.ParserTest.DoesNotThrowWith(string)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: DoesNotThrowWith
    path: Heir.Tests/ParserTest.cs
    startLine: 39
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "++a" })]

      [InlineData(new object[] { "--b" })]

      public void DoesNotThrowWith(string input)
    parameters:
    - id: input
      type: System.String
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "++a" })>

      <InlineData(New Object() { "--b" })>

      Public Sub DoesNotThrowWith(input As String)
  overload: Heir.Tests.ParserTest.DoesNotThrowWith*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.DoesNotThrowWith(String)
  fullName.vb: Heir.Tests.ParserTest.DoesNotThrowWith(String)
  name.vb: DoesNotThrowWith(String)
- uid: Heir.Tests.ParserTest.Parses_IfStatements
  commentId: M:Heir.Tests.ParserTest.Parses_IfStatements
  id: Parses_IfStatements
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_IfStatements()
  nameWithType: ParserTest.Parses_IfStatements()
  fullName: Heir.Tests.ParserTest.Parses_IfStatements()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_IfStatements
    path: Heir.Tests/ParserTest.cs
    startLine: 48
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_IfStatements()
    content.vb: >-
      <Fact>

      Public Sub Parses_IfStatements()
  overload: Heir.Tests.ParserTest.Parses_IfStatements*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_FunctionDeclarations_WithParameters(System.String,System.Boolean)
  commentId: M:Heir.Tests.ParserTest.Parses_FunctionDeclarations_WithParameters(System.String,System.Boolean)
  id: Parses_FunctionDeclarations_WithParameters(System.String,System.Boolean)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_FunctionDeclarations_WithParameters(string, bool)
  nameWithType: ParserTest.Parses_FunctionDeclarations_WithParameters(string, bool)
  fullName: Heir.Tests.ParserTest.Parses_FunctionDeclarations_WithParameters(string, bool)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_FunctionDeclarations_WithParameters
    path: Heir.Tests/ParserTest.cs
    startLine: 90
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "fn add(x: int, y = 1): int -> x + y;", true })]

      [InlineData(new object[] { "fn add(x: int, y: int = 1): int { return x + y; }", false })]

      public void Parses_FunctionDeclarations_WithParameters(string input, bool noTypeOnY)
    parameters:
    - id: input
      type: System.String
    - id: noTypeOnY
      type: System.Boolean
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "fn add(x: int, y = 1): int -> x + y;", True })>

      <InlineData(New Object() { "fn add(x: int, y: int = 1): int { return x + y; }", False })>

      Public Sub Parses_FunctionDeclarations_WithParameters(input As String, noTypeOnY As Boolean)
  overload: Heir.Tests.ParserTest.Parses_FunctionDeclarations_WithParameters*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.Parses_FunctionDeclarations_WithParameters(String, Boolean)
  fullName.vb: Heir.Tests.ParserTest.Parses_FunctionDeclarations_WithParameters(String, Boolean)
  name.vb: Parses_FunctionDeclarations_WithParameters(String, Boolean)
- uid: Heir.Tests.ParserTest.Parses_FunctionDeclarations(System.String)
  commentId: M:Heir.Tests.ParserTest.Parses_FunctionDeclarations(System.String)
  id: Parses_FunctionDeclarations(System.String)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_FunctionDeclarations(string)
  nameWithType: ParserTest.Parses_FunctionDeclarations(string)
  fullName: Heir.Tests.ParserTest.Parses_FunctionDeclarations(string)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_FunctionDeclarations
    path: Heir.Tests/ParserTest.cs
    startLine: 136
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "fn abc: int -> 123;" })]

      [InlineData(new object[] { "fn abc: int { return 123; }" })]

      public void Parses_FunctionDeclarations(string input)
    parameters:
    - id: input
      type: System.String
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "fn abc: int -> 123;" })>

      <InlineData(New Object() { "fn abc: int { return 123; }" })>

      Public Sub Parses_FunctionDeclarations(input As String)
  overload: Heir.Tests.ParserTest.Parses_FunctionDeclarations*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.Parses_FunctionDeclarations(String)
  fullName.vb: Heir.Tests.ParserTest.Parses_FunctionDeclarations(String)
  name.vb: Parses_FunctionDeclarations(String)
- uid: Heir.Tests.ParserTest.Parses_MemberAccess
  commentId: M:Heir.Tests.ParserTest.Parses_MemberAccess
  id: Parses_MemberAccess
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_MemberAccess()
  nameWithType: ParserTest.Parses_MemberAccess()
  fullName: Heir.Tests.ParserTest.Parses_MemberAccess()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_MemberAccess
    path: Heir.Tests/ParserTest.cs
    startLine: 164
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_MemberAccess()
    content.vb: >-
      <Fact>

      Public Sub Parses_MemberAccess()
  overload: Heir.Tests.ParserTest.Parses_MemberAccess*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_ElementAccess
  commentId: M:Heir.Tests.ParserTest.Parses_ElementAccess
  id: Parses_ElementAccess
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_ElementAccess()
  nameWithType: ParserTest.Parses_ElementAccess()
  fullName: Heir.Tests.ParserTest.Parses_ElementAccess()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_ElementAccess
    path: Heir.Tests/ParserTest.cs
    startLine: 182
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_ElementAccess()
    content.vb: >-
      <Fact>

      Public Sub Parses_ElementAccess()
  overload: Heir.Tests.ParserTest.Parses_ElementAccess*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_Invocation(System.String,System.Int32)
  commentId: M:Heir.Tests.ParserTest.Parses_Invocation(System.String,System.Int32)
  id: Parses_Invocation(System.String,System.Int32)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_Invocation(string, int)
  nameWithType: ParserTest.Parses_Invocation(string, int)
  fullName: Heir.Tests.ParserTest.Parses_Invocation(string, int)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_Invocation
    path: Heir.Tests/ParserTest.cs
    startLine: 203
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "abc();", 0 })]

      [InlineData(new object[] { "abc(69);", 1 })]

      [InlineData(new object[] { "abc(69, 420);", 2 })]

      public void Parses_Invocation(string input, int expectedArgumentCount)
    parameters:
    - id: input
      type: System.String
    - id: expectedArgumentCount
      type: System.Int32
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "abc();", 0 })>

      <InlineData(New Object() { "abc(69);", 1 })>

      <InlineData(New Object() { "abc(69, 420);", 2 })>

      Public Sub Parses_Invocation(input As String, expectedArgumentCount As Integer)
  overload: Heir.Tests.ParserTest.Parses_Invocation*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.Parses_Invocation(String, Integer)
  fullName.vb: Heir.Tests.ParserTest.Parses_Invocation(String, Integer)
  name.vb: Parses_Invocation(String, Integer)
- uid: Heir.Tests.ParserTest.Parses_ReturnStatements
  commentId: M:Heir.Tests.ParserTest.Parses_ReturnStatements
  id: Parses_ReturnStatements
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_ReturnStatements()
  nameWithType: ParserTest.Parses_ReturnStatements()
  fullName: Heir.Tests.ParserTest.Parses_ReturnStatements()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_ReturnStatements
    path: Heir.Tests/ParserTest.cs
    startLine: 226
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_ReturnStatements()
    content.vb: >-
      <Fact>

      Public Sub Parses_ReturnStatements()
  overload: Heir.Tests.ParserTest.Parses_ReturnStatements*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_IntersectionTypes
  commentId: M:Heir.Tests.ParserTest.Parses_IntersectionTypes
  id: Parses_IntersectionTypes
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_IntersectionTypes()
  nameWithType: ParserTest.Parses_IntersectionTypes()
  fullName: Heir.Tests.ParserTest.Parses_IntersectionTypes()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_IntersectionTypes
    path: Heir.Tests/ParserTest.cs
    startLine: 241
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_IntersectionTypes()
    content.vb: >-
      <Fact>

      Public Sub Parses_IntersectionTypes()
  overload: Heir.Tests.ParserTest.Parses_IntersectionTypes*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_UnionTypes
  commentId: M:Heir.Tests.ParserTest.Parses_UnionTypes
  id: Parses_UnionTypes
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_UnionTypes()
  nameWithType: ParserTest.Parses_UnionTypes()
  fullName: Heir.Tests.ParserTest.Parses_UnionTypes()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_UnionTypes
    path: Heir.Tests/ParserTest.cs
    startLine: 266
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_UnionTypes()
    content.vb: >-
      <Fact>

      Public Sub Parses_UnionTypes()
  overload: Heir.Tests.ParserTest.Parses_UnionTypes*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_ParenthesizedTypes
  commentId: M:Heir.Tests.ParserTest.Parses_ParenthesizedTypes
  id: Parses_ParenthesizedTypes
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_ParenthesizedTypes()
  nameWithType: ParserTest.Parses_ParenthesizedTypes()
  fullName: Heir.Tests.ParserTest.Parses_ParenthesizedTypes()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_ParenthesizedTypes
    path: Heir.Tests/ParserTest.cs
    startLine: 297
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_ParenthesizedTypes()
    content.vb: >-
      <Fact>

      Public Sub Parses_ParenthesizedTypes()
  overload: Heir.Tests.ParserTest.Parses_ParenthesizedTypes*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_VariableDeclarations
  commentId: M:Heir.Tests.ParserTest.Parses_VariableDeclarations
  id: Parses_VariableDeclarations
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_VariableDeclarations()
  nameWithType: ParserTest.Parses_VariableDeclarations()
  fullName: Heir.Tests.ParserTest.Parses_VariableDeclarations()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_VariableDeclarations
    path: Heir.Tests/ParserTest.cs
    startLine: 319
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_VariableDeclarations()
    content.vb: >-
      <Fact>

      Public Sub Parses_VariableDeclarations()
  overload: Heir.Tests.ParserTest.Parses_VariableDeclarations*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_MutableVariableDeclarations
  commentId: M:Heir.Tests.ParserTest.Parses_MutableVariableDeclarations
  id: Parses_MutableVariableDeclarations
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_MutableVariableDeclarations()
  nameWithType: ParserTest.Parses_MutableVariableDeclarations()
  fullName: Heir.Tests.ParserTest.Parses_MutableVariableDeclarations()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_MutableVariableDeclarations
    path: Heir.Tests/ParserTest.cs
    startLine: 338
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_MutableVariableDeclarations()
    content.vb: >-
      <Fact>

      Public Sub Parses_MutableVariableDeclarations()
  overload: Heir.Tests.ParserTest.Parses_MutableVariableDeclarations*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_UnaryOperators(System.String,Heir.Syntax.SyntaxKind)
  commentId: M:Heir.Tests.ParserTest.Parses_UnaryOperators(System.String,Heir.Syntax.SyntaxKind)
  id: Parses_UnaryOperators(System.String,Heir.Syntax.SyntaxKind)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_UnaryOperators(string, SyntaxKind)
  nameWithType: ParserTest.Parses_UnaryOperators(string, SyntaxKind)
  fullName: Heir.Tests.ParserTest.Parses_UnaryOperators(string, Heir.Syntax.SyntaxKind)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_UnaryOperators
    path: Heir.Tests/ParserTest.cs
    startLine: 352
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "!true", SyntaxKind.Bang })]

      [InlineData(new object[] { "++a", SyntaxKind.PlusPlus })]

      [InlineData(new object[] { "--b", SyntaxKind.MinusMinus })]

      [InlineData(new object[] { "-10", SyntaxKind.Minus })]

      [InlineData(new object[] { "~14", SyntaxKind.Tilde })]

      public void Parses_UnaryOperators(string input, SyntaxKind operatorKind)
    parameters:
    - id: input
      type: System.String
    - id: operatorKind
      type: Heir.Syntax.SyntaxKind
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "!true", SyntaxKind.Bang })>

      <InlineData(New Object() { "++a", SyntaxKind.PlusPlus })>

      <InlineData(New Object() { "--b", SyntaxKind.MinusMinus })>

      <InlineData(New Object() { "-10", SyntaxKind.Minus })>

      <InlineData(New Object() { "~14", SyntaxKind.Tilde })>

      Public Sub Parses_UnaryOperators(input As String, operatorKind As SyntaxKind)
  overload: Heir.Tests.ParserTest.Parses_UnaryOperators*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.Parses_UnaryOperators(String, SyntaxKind)
  fullName.vb: Heir.Tests.ParserTest.Parses_UnaryOperators(String, Heir.Syntax.SyntaxKind)
  name.vb: Parses_UnaryOperators(String, SyntaxKind)
- uid: Heir.Tests.ParserTest.Parses_BinaryOperators(System.String,Heir.Syntax.SyntaxKind)
  commentId: M:Heir.Tests.ParserTest.Parses_BinaryOperators(System.String,Heir.Syntax.SyntaxKind)
  id: Parses_BinaryOperators(System.String,Heir.Syntax.SyntaxKind)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_BinaryOperators(string, SyntaxKind)
  nameWithType: ParserTest.Parses_BinaryOperators(string, SyntaxKind)
  fullName: Heir.Tests.ParserTest.Parses_BinaryOperators(string, Heir.Syntax.SyntaxKind)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_BinaryOperators
    path: Heir.Tests/ParserTest.cs
    startLine: 371
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "1 + 2", SyntaxKind.Plus })]

      [InlineData(new object[] { "3 - 2", SyntaxKind.Minus })]

      [InlineData(new object[] { "3 * 4", SyntaxKind.Star })]

      [InlineData(new object[] { "6 % 4", SyntaxKind.Percent })]

      [InlineData(new object[] { "10 ^ 2", SyntaxKind.Carat })]

      [InlineData(new object[] { "2 & 7", SyntaxKind.Ampersand })]

      [InlineData(new object[] { "9 | 4", SyntaxKind.Pipe })]

      [InlineData(new object[] { "5 ~ 3", SyntaxKind.Tilde })]

      [InlineData(new object[] { "true && false", SyntaxKind.AmpersandAmpersand })]

      [InlineData(new object[] { "true || false", SyntaxKind.PipePipe })]

      public void Parses_BinaryOperators(string input, SyntaxKind operatorKind)
    parameters:
    - id: input
      type: System.String
    - id: operatorKind
      type: Heir.Syntax.SyntaxKind
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "1 + 2", SyntaxKind.Plus })>

      <InlineData(New Object() { "3 - 2", SyntaxKind.Minus })>

      <InlineData(New Object() { "3 * 4", SyntaxKind.Star })>

      <InlineData(New Object() { "6 % 4", SyntaxKind.Percent })>

      <InlineData(New Object() { "10 ^ 2", SyntaxKind.Carat })>

      <InlineData(New Object() { "2 & 7", SyntaxKind.Ampersand })>

      <InlineData(New Object() { "9 | 4", SyntaxKind.Pipe })>

      <InlineData(New Object() { "5 ~ 3", SyntaxKind.Tilde })>

      <InlineData(New Object() { "true && false", SyntaxKind.AmpersandAmpersand })>

      <InlineData(New Object() { "true || false", SyntaxKind.PipePipe })>

      Public Sub Parses_BinaryOperators(input As String, operatorKind As SyntaxKind)
  overload: Heir.Tests.ParserTest.Parses_BinaryOperators*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.Parses_BinaryOperators(String, SyntaxKind)
  fullName.vb: Heir.Tests.ParserTest.Parses_BinaryOperators(String, Heir.Syntax.SyntaxKind)
  name.vb: Parses_BinaryOperators(String, SyntaxKind)
- uid: Heir.Tests.ParserTest.Parses_AssignmentOperators(System.String,Heir.Syntax.SyntaxKind)
  commentId: M:Heir.Tests.ParserTest.Parses_AssignmentOperators(System.String,Heir.Syntax.SyntaxKind)
  id: Parses_AssignmentOperators(System.String,Heir.Syntax.SyntaxKind)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_AssignmentOperators(string, SyntaxKind)
  nameWithType: ParserTest.Parses_AssignmentOperators(string, SyntaxKind)
  fullName: Heir.Tests.ParserTest.Parses_AssignmentOperators(string, Heir.Syntax.SyntaxKind)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_AssignmentOperators
    path: Heir.Tests/ParserTest.cs
    startLine: 397
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "a = 2", SyntaxKind.Equals })]

      [InlineData(new object[] { "a += 2", SyntaxKind.PlusEquals })]

      [InlineData(new object[] { "a //= 2", SyntaxKind.SlashSlashEquals })]

      public void Parses_AssignmentOperators(string input, SyntaxKind operatorKind)
    parameters:
    - id: input
      type: System.String
    - id: operatorKind
      type: Heir.Syntax.SyntaxKind
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "a = 2", SyntaxKind.Equals })>

      <InlineData(New Object() { "a += 2", SyntaxKind.PlusEquals })>

      <InlineData(New Object() { "a //= 2", SyntaxKind.SlashSlashEquals })>

      Public Sub Parses_AssignmentOperators(input As String, operatorKind As SyntaxKind)
  overload: Heir.Tests.ParserTest.Parses_AssignmentOperators*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.Parses_AssignmentOperators(String, SyntaxKind)
  fullName.vb: Heir.Tests.ParserTest.Parses_AssignmentOperators(String, Heir.Syntax.SyntaxKind)
  name.vb: Parses_AssignmentOperators(String, SyntaxKind)
- uid: Heir.Tests.ParserTest.Parses_OperatorPrecedence
  commentId: M:Heir.Tests.ParserTest.Parses_OperatorPrecedence
  id: Parses_OperatorPrecedence
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_OperatorPrecedence()
  nameWithType: ParserTest.Parses_OperatorPrecedence()
  fullName: Heir.Tests.ParserTest.Parses_OperatorPrecedence()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_OperatorPrecedence
    path: Heir.Tests/ParserTest.cs
    startLine: 414
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_OperatorPrecedence()
    content.vb: >-
      <Fact>

      Public Sub Parses_OperatorPrecedence()
  overload: Heir.Tests.ParserTest.Parses_OperatorPrecedence*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_ObjectLiterals(System.String,Heir.Syntax.SyntaxKind,System.Int32)
  commentId: M:Heir.Tests.ParserTest.Parses_ObjectLiterals(System.String,Heir.Syntax.SyntaxKind,System.Int32)
  id: Parses_ObjectLiterals(System.String,Heir.Syntax.SyntaxKind,System.Int32)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_ObjectLiterals(string, SyntaxKind, int)
  nameWithType: ParserTest.Parses_ObjectLiterals(string, SyntaxKind, int)
  fullName: Heir.Tests.ParserTest.Parses_ObjectLiterals(string, Heir.Syntax.SyntaxKind, int)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_ObjectLiterals
    path: Heir.Tests/ParserTest.cs
    startLine: 483
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "{ a: true }", SyntaxKind.StringLiteral, 1 })]

      [InlineData(new object[] { "{ [\"a\"]: true }", SyntaxKind.StringLiteral, 1 })]

      [InlineData(new object[] { "{ [1]: true }", SyntaxKind.IntLiteral, 1 })]

      [InlineData(new object[] { "{}", SyntaxKind.Comma, 0 })]

      public void Parses_ObjectLiterals(string input, SyntaxKind keyLiteralKind, int propertyCount)
    parameters:
    - id: input
      type: System.String
    - id: keyLiteralKind
      type: Heir.Syntax.SyntaxKind
    - id: propertyCount
      type: System.Int32
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "{ a: true }", SyntaxKind.StringLiteral, 1 })>

      <InlineData(New Object() { "{ [""a""]: true }", SyntaxKind.StringLiteral, 1 })>

      <InlineData(New Object() { "{ [1]: true }", SyntaxKind.IntLiteral, 1 })>

      <InlineData(New Object() { "{}", SyntaxKind.Comma, 0 })>

      Public Sub Parses_ObjectLiterals(input As String, keyLiteralKind As SyntaxKind, propertyCount As Integer)
  overload: Heir.Tests.ParserTest.Parses_ObjectLiterals*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.Parses_ObjectLiterals(String, SyntaxKind, Integer)
  fullName.vb: Heir.Tests.ParserTest.Parses_ObjectLiterals(String, Heir.Syntax.SyntaxKind, Integer)
  name.vb: Parses_ObjectLiterals(String, SyntaxKind, Integer)
- uid: Heir.Tests.ParserTest.Parses_Literals(System.String)
  commentId: M:Heir.Tests.ParserTest.Parses_Literals(System.String)
  id: Parses_Literals(System.String)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_Literals(string)
  nameWithType: ParserTest.Parses_Literals(string)
  fullName: Heir.Tests.ParserTest.Parses_Literals(string)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_Literals
    path: Heir.Tests/ParserTest.cs
    startLine: 514
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "\"abc\"" })]

      [InlineData(new object[] { "'a'" })]

      [InlineData(new object[] { "123" })]

      [InlineData(new object[] { "69" })]

      [InlineData(new object[] { "0b1101" })]

      [InlineData(new object[] { "0o420" })]

      [InlineData(new object[] { "0x03E" })]

      [InlineData(new object[] { "123.456" })]

      [InlineData(new object[] { "69.420" })]

      [InlineData(new object[] { "true" })]

      [InlineData(new object[] { "false" })]

      [InlineData(new object[] { "none" })]

      public void Parses_Literals(string input)
    parameters:
    - id: input
      type: System.String
    content.vb: >-
      <Theory>

      <InlineData(New Object() { """abc""" })>

      <InlineData(New Object() { "'a'" })>

      <InlineData(New Object() { "123" })>

      <InlineData(New Object() { "69" })>

      <InlineData(New Object() { "0b1101" })>

      <InlineData(New Object() { "0o420" })>

      <InlineData(New Object() { "0x03E" })>

      <InlineData(New Object() { "123.456" })>

      <InlineData(New Object() { "69.420" })>

      <InlineData(New Object() { "true" })>

      <InlineData(New Object() { "false" })>

      <InlineData(New Object() { "none" })>

      Public Sub Parses_Literals(input As String)
  overload: Heir.Tests.ParserTest.Parses_Literals*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.Parses_Literals(String)
  fullName.vb: Heir.Tests.ParserTest.Parses_Literals(String)
  name.vb: Parses_Literals(String)
- uid: Heir.Tests.ParserTest.Parses_ParenthesizedExpressions
  commentId: M:Heir.Tests.ParserTest.Parses_ParenthesizedExpressions
  id: Parses_ParenthesizedExpressions
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_ParenthesizedExpressions()
  nameWithType: ParserTest.Parses_ParenthesizedExpressions()
  fullName: Heir.Tests.ParserTest.Parses_ParenthesizedExpressions()
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_ParenthesizedExpressions
    path: Heir.Tests/ParserTest.cs
    startLine: 540
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Parses_ParenthesizedExpressions()
    content.vb: >-
      <Fact>

      Public Sub Parses_ParenthesizedExpressions()
  overload: Heir.Tests.ParserTest.Parses_ParenthesizedExpressions*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.ParserTest.Parses_Identifiers(System.String)
  commentId: M:Heir.Tests.ParserTest.Parses_Identifiers(System.String)
  id: Parses_Identifiers(System.String)
  parent: Heir.Tests.ParserTest
  langs:
  - csharp
  - vb
  name: Parses_Identifiers(string)
  nameWithType: ParserTest.Parses_Identifiers(string)
  fullName: Heir.Tests.ParserTest.Parses_Identifiers(string)
  type: Method
  source:
    remote:
      path: Heir.Tests/ParserTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_Identifiers
    path: Heir.Tests/ParserTest.cs
    startLine: 554
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "abc" })]

      [InlineData(new object[] { "abc123" })]

      [InlineData(new object[] { "abc_123" })]

      public void Parses_Identifiers(string input)
    parameters:
    - id: input
      type: System.String
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "abc" })>

      <InlineData(New Object() { "abc123" })>

      <InlineData(New Object() { "abc_123" })>

      Public Sub Parses_Identifiers(input As String)
  overload: Heir.Tests.ParserTest.Parses_Identifiers*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: ParserTest.Parses_Identifiers(String)
  fullName.vb: Heir.Tests.ParserTest.Parses_Identifiers(String)
  name.vb: Parses_Identifiers(String)
references:
- uid: Heir.Tests
  commentId: N:Heir.Tests
  href: Heir.html
  name: Heir.Tests
  nameWithType: Heir.Tests
  fullName: Heir.Tests
  spec.csharp:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Tests
    name: Tests
    href: Heir.Tests.html
  spec.vb:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Tests
    name: Tests
    href: Heir.Tests.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Heir.Tests.ParserTest.ThrowsWith*
  commentId: Overload:Heir.Tests.ParserTest.ThrowsWith
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_ThrowsWith_System_String_Heir_DiagnosticCode_
  name: ThrowsWith
  nameWithType: ParserTest.ThrowsWith
  fullName: Heir.Tests.ParserTest.ThrowsWith
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Heir.DiagnosticCode
  commentId: T:Heir.DiagnosticCode
  parent: Heir
  href: Heir.DiagnosticCode.html
  name: DiagnosticCode
  nameWithType: DiagnosticCode
  fullName: Heir.DiagnosticCode
- uid: Heir
  commentId: N:Heir
  href: Heir.html
  name: Heir
  nameWithType: Heir
  fullName: Heir
- uid: Heir.Tests.ParserTest.WarnsWith*
  commentId: Overload:Heir.Tests.ParserTest.WarnsWith
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_WarnsWith_System_String_Heir_DiagnosticCode_
  name: WarnsWith
  nameWithType: ParserTest.WarnsWith
  fullName: Heir.Tests.ParserTest.WarnsWith
- uid: Heir.Tests.ParserTest.DoesNotThrowWith*
  commentId: Overload:Heir.Tests.ParserTest.DoesNotThrowWith
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_DoesNotThrowWith_System_String_
  name: DoesNotThrowWith
  nameWithType: ParserTest.DoesNotThrowWith
  fullName: Heir.Tests.ParserTest.DoesNotThrowWith
- uid: Heir.Tests.ParserTest.Parses_IfStatements*
  commentId: Overload:Heir.Tests.ParserTest.Parses_IfStatements
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_IfStatements
  name: Parses_IfStatements
  nameWithType: ParserTest.Parses_IfStatements
  fullName: Heir.Tests.ParserTest.Parses_IfStatements
- uid: Heir.Tests.ParserTest.Parses_FunctionDeclarations_WithParameters*
  commentId: Overload:Heir.Tests.ParserTest.Parses_FunctionDeclarations_WithParameters
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_FunctionDeclarations_WithParameters_System_String_System_Boolean_
  name: Parses_FunctionDeclarations_WithParameters
  nameWithType: ParserTest.Parses_FunctionDeclarations_WithParameters
  fullName: Heir.Tests.ParserTest.Parses_FunctionDeclarations_WithParameters
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Heir.Tests.ParserTest.Parses_FunctionDeclarations*
  commentId: Overload:Heir.Tests.ParserTest.Parses_FunctionDeclarations
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_FunctionDeclarations_System_String_
  name: Parses_FunctionDeclarations
  nameWithType: ParserTest.Parses_FunctionDeclarations
  fullName: Heir.Tests.ParserTest.Parses_FunctionDeclarations
- uid: Heir.Tests.ParserTest.Parses_MemberAccess*
  commentId: Overload:Heir.Tests.ParserTest.Parses_MemberAccess
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_MemberAccess
  name: Parses_MemberAccess
  nameWithType: ParserTest.Parses_MemberAccess
  fullName: Heir.Tests.ParserTest.Parses_MemberAccess
- uid: Heir.Tests.ParserTest.Parses_ElementAccess*
  commentId: Overload:Heir.Tests.ParserTest.Parses_ElementAccess
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_ElementAccess
  name: Parses_ElementAccess
  nameWithType: ParserTest.Parses_ElementAccess
  fullName: Heir.Tests.ParserTest.Parses_ElementAccess
- uid: Heir.Tests.ParserTest.Parses_Invocation*
  commentId: Overload:Heir.Tests.ParserTest.Parses_Invocation
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_Invocation_System_String_System_Int32_
  name: Parses_Invocation
  nameWithType: ParserTest.Parses_Invocation
  fullName: Heir.Tests.ParserTest.Parses_Invocation
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Heir.Tests.ParserTest.Parses_ReturnStatements*
  commentId: Overload:Heir.Tests.ParserTest.Parses_ReturnStatements
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_ReturnStatements
  name: Parses_ReturnStatements
  nameWithType: ParserTest.Parses_ReturnStatements
  fullName: Heir.Tests.ParserTest.Parses_ReturnStatements
- uid: Heir.Tests.ParserTest.Parses_IntersectionTypes*
  commentId: Overload:Heir.Tests.ParserTest.Parses_IntersectionTypes
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_IntersectionTypes
  name: Parses_IntersectionTypes
  nameWithType: ParserTest.Parses_IntersectionTypes
  fullName: Heir.Tests.ParserTest.Parses_IntersectionTypes
- uid: Heir.Tests.ParserTest.Parses_UnionTypes*
  commentId: Overload:Heir.Tests.ParserTest.Parses_UnionTypes
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_UnionTypes
  name: Parses_UnionTypes
  nameWithType: ParserTest.Parses_UnionTypes
  fullName: Heir.Tests.ParserTest.Parses_UnionTypes
- uid: Heir.Tests.ParserTest.Parses_ParenthesizedTypes*
  commentId: Overload:Heir.Tests.ParserTest.Parses_ParenthesizedTypes
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_ParenthesizedTypes
  name: Parses_ParenthesizedTypes
  nameWithType: ParserTest.Parses_ParenthesizedTypes
  fullName: Heir.Tests.ParserTest.Parses_ParenthesizedTypes
- uid: Heir.Tests.ParserTest.Parses_VariableDeclarations*
  commentId: Overload:Heir.Tests.ParserTest.Parses_VariableDeclarations
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_VariableDeclarations
  name: Parses_VariableDeclarations
  nameWithType: ParserTest.Parses_VariableDeclarations
  fullName: Heir.Tests.ParserTest.Parses_VariableDeclarations
- uid: Heir.Tests.ParserTest.Parses_MutableVariableDeclarations*
  commentId: Overload:Heir.Tests.ParserTest.Parses_MutableVariableDeclarations
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_MutableVariableDeclarations
  name: Parses_MutableVariableDeclarations
  nameWithType: ParserTest.Parses_MutableVariableDeclarations
  fullName: Heir.Tests.ParserTest.Parses_MutableVariableDeclarations
- uid: Heir.Tests.ParserTest.Parses_UnaryOperators*
  commentId: Overload:Heir.Tests.ParserTest.Parses_UnaryOperators
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_UnaryOperators_System_String_Heir_Syntax_SyntaxKind_
  name: Parses_UnaryOperators
  nameWithType: ParserTest.Parses_UnaryOperators
  fullName: Heir.Tests.ParserTest.Parses_UnaryOperators
- uid: Heir.Syntax.SyntaxKind
  commentId: T:Heir.Syntax.SyntaxKind
  parent: Heir.Syntax
  href: Heir.Syntax.SyntaxKind.html
  name: SyntaxKind
  nameWithType: SyntaxKind
  fullName: Heir.Syntax.SyntaxKind
- uid: Heir.Syntax
  commentId: N:Heir.Syntax
  href: Heir.html
  name: Heir.Syntax
  nameWithType: Heir.Syntax
  fullName: Heir.Syntax
  spec.csharp:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Syntax
    name: Syntax
    href: Heir.Syntax.html
  spec.vb:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Syntax
    name: Syntax
    href: Heir.Syntax.html
- uid: Heir.Tests.ParserTest.Parses_BinaryOperators*
  commentId: Overload:Heir.Tests.ParserTest.Parses_BinaryOperators
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_BinaryOperators_System_String_Heir_Syntax_SyntaxKind_
  name: Parses_BinaryOperators
  nameWithType: ParserTest.Parses_BinaryOperators
  fullName: Heir.Tests.ParserTest.Parses_BinaryOperators
- uid: Heir.Tests.ParserTest.Parses_AssignmentOperators*
  commentId: Overload:Heir.Tests.ParserTest.Parses_AssignmentOperators
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_AssignmentOperators_System_String_Heir_Syntax_SyntaxKind_
  name: Parses_AssignmentOperators
  nameWithType: ParserTest.Parses_AssignmentOperators
  fullName: Heir.Tests.ParserTest.Parses_AssignmentOperators
- uid: Heir.Tests.ParserTest.Parses_OperatorPrecedence*
  commentId: Overload:Heir.Tests.ParserTest.Parses_OperatorPrecedence
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_OperatorPrecedence
  name: Parses_OperatorPrecedence
  nameWithType: ParserTest.Parses_OperatorPrecedence
  fullName: Heir.Tests.ParserTest.Parses_OperatorPrecedence
- uid: Heir.Tests.ParserTest.Parses_ObjectLiterals*
  commentId: Overload:Heir.Tests.ParserTest.Parses_ObjectLiterals
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_ObjectLiterals_System_String_Heir_Syntax_SyntaxKind_System_Int32_
  name: Parses_ObjectLiterals
  nameWithType: ParserTest.Parses_ObjectLiterals
  fullName: Heir.Tests.ParserTest.Parses_ObjectLiterals
- uid: Heir.Tests.ParserTest.Parses_Literals*
  commentId: Overload:Heir.Tests.ParserTest.Parses_Literals
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_Literals_System_String_
  name: Parses_Literals
  nameWithType: ParserTest.Parses_Literals
  fullName: Heir.Tests.ParserTest.Parses_Literals
- uid: Heir.Tests.ParserTest.Parses_ParenthesizedExpressions*
  commentId: Overload:Heir.Tests.ParserTest.Parses_ParenthesizedExpressions
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_ParenthesizedExpressions
  name: Parses_ParenthesizedExpressions
  nameWithType: ParserTest.Parses_ParenthesizedExpressions
  fullName: Heir.Tests.ParserTest.Parses_ParenthesizedExpressions
- uid: Heir.Tests.ParserTest.Parses_Identifiers*
  commentId: Overload:Heir.Tests.ParserTest.Parses_Identifiers
  href: Heir.Tests.ParserTest.html#Heir_Tests_ParserTest_Parses_Identifiers_System_String_
  name: Parses_Identifiers
  nameWithType: ParserTest.Parses_Identifiers
  fullName: Heir.Tests.ParserTest.Parses_Identifiers
