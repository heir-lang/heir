### YamlMime:ManagedReference
items:
- uid: Heir.Tests.BinderTest
  commentId: T:Heir.Tests.BinderTest
  id: BinderTest
  parent: Heir.Tests
  children:
  - Heir.Tests.BinderTest.Binds_ElementAccess
  - Heir.Tests.BinderTest.Binds_FunctionDeclarations(System.String)
  - Heir.Tests.BinderTest.Binds_FunctionDeclarations_WithParameters(System.String)
  - Heir.Tests.BinderTest.Binds_Identifiers
  - Heir.Tests.BinderTest.Binds_IfStatements
  - Heir.Tests.BinderTest.Binds_Invocation(System.String,System.Int32)
  - Heir.Tests.BinderTest.Binds_Literals(System.String)
  - Heir.Tests.BinderTest.Binds_MemberAccess
  - Heir.Tests.BinderTest.Binds_PrimitiveBinaryOperations(System.String,Heir.Types.PrimitiveTypeKind)
  - Heir.Tests.BinderTest.Binds_PrimitiveUnaryOperations(System.String,Heir.Types.PrimitiveTypeKind)
  - Heir.Tests.BinderTest.Binds_ReturnStatements
  - Heir.Tests.BinderTest.Binds_UnionBinaryOperations(System.String,Heir.Types.PrimitiveTypeKind,Heir.Types.PrimitiveTypeKind)
  - Heir.Tests.BinderTest.Binds_UnionUnaryOperations(System.String,Heir.Types.PrimitiveTypeKind,Heir.Types.PrimitiveTypeKind)
  - Heir.Tests.BinderTest.Binds_VariableDeclarations
  - Heir.Tests.BinderTest.Infers_VariableDeclarationTypes
  - Heir.Tests.BinderTest.Parses_ObjectLiterals(System.String,System.Object)
  - Heir.Tests.BinderTest.ThrowsWith(System.String,Heir.DiagnosticCode)
  langs:
  - csharp
  - vb
  name: BinderTest
  nameWithType: BinderTest
  fullName: Heir.Tests.BinderTest
  type: Class
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: BinderTest
    path: Heir.Tests/BinderTest.cs
    startLine: 7
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: public class BinderTest
    content.vb: Public Class BinderTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Heir.Tests.BinderTest.ThrowsWith(System.String,Heir.DiagnosticCode)
  commentId: M:Heir.Tests.BinderTest.ThrowsWith(System.String,Heir.DiagnosticCode)
  id: ThrowsWith(System.String,Heir.DiagnosticCode)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: ThrowsWith(string, DiagnosticCode)
  nameWithType: BinderTest.ThrowsWith(string, DiagnosticCode)
  fullName: Heir.Tests.BinderTest.ThrowsWith(string, Heir.DiagnosticCode)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: ThrowsWith
    path: Heir.Tests/BinderTest.cs
    startLine: 9
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "\"a\" + 1", DiagnosticCode.H007 })]

      [InlineData(new object[] { "true * false", DiagnosticCode.H007 })]

      [InlineData(new object[] { "let x = 1; x = 2;", DiagnosticCode.H006C })]

      public void ThrowsWith(string input, DiagnosticCode expectedErrorCode)
    parameters:
    - id: input
      type: System.String
    - id: expectedErrorCode
      type: Heir.DiagnosticCode
    content.vb: >-
      <Theory>

      <InlineData(New Object() { """a"" + 1", DiagnosticCode.H007 })>

      <InlineData(New Object() { "true * false", DiagnosticCode.H007 })>

      <InlineData(New Object() { "let x = 1; x = 2;", DiagnosticCode.H006C })>

      Public Sub ThrowsWith(input As String, expectedErrorCode As DiagnosticCode)
  overload: Heir.Tests.BinderTest.ThrowsWith*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.ThrowsWith(String, DiagnosticCode)
  fullName.vb: Heir.Tests.BinderTest.ThrowsWith(String, Heir.DiagnosticCode)
  name.vb: ThrowsWith(String, DiagnosticCode)
- uid: Heir.Tests.BinderTest.Binds_MemberAccess
  commentId: M:Heir.Tests.BinderTest.Binds_MemberAccess
  id: Binds_MemberAccess
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_MemberAccess()
  nameWithType: BinderTest.Binds_MemberAccess()
  fullName: Heir.Tests.BinderTest.Binds_MemberAccess()
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_MemberAccess
    path: Heir.Tests/BinderTest.cs
    startLine: 20
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Binds_MemberAccess()
    content.vb: >-
      <Fact>

      Public Sub Binds_MemberAccess()
  overload: Heir.Tests.BinderTest.Binds_MemberAccess*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.BinderTest.Binds_ElementAccess
  commentId: M:Heir.Tests.BinderTest.Binds_ElementAccess
  id: Binds_ElementAccess
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_ElementAccess()
  nameWithType: BinderTest.Binds_ElementAccess()
  fullName: Heir.Tests.BinderTest.Binds_ElementAccess()
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_ElementAccess
    path: Heir.Tests/BinderTest.cs
    startLine: 48
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Binds_ElementAccess()
    content.vb: >-
      <Fact>

      Public Sub Binds_ElementAccess()
  overload: Heir.Tests.BinderTest.Binds_ElementAccess*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.BinderTest.Binds_IfStatements
  commentId: M:Heir.Tests.BinderTest.Binds_IfStatements
  id: Binds_IfStatements
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_IfStatements()
  nameWithType: BinderTest.Binds_IfStatements()
  fullName: Heir.Tests.BinderTest.Binds_IfStatements()
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_IfStatements
    path: Heir.Tests/BinderTest.cs
    startLine: 79
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Binds_IfStatements()
    content.vb: >-
      <Fact>

      Public Sub Binds_IfStatements()
  overload: Heir.Tests.BinderTest.Binds_IfStatements*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.BinderTest.Binds_FunctionDeclarations_WithParameters(System.String)
  commentId: M:Heir.Tests.BinderTest.Binds_FunctionDeclarations_WithParameters(System.String)
  id: Binds_FunctionDeclarations_WithParameters(System.String)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_FunctionDeclarations_WithParameters(string)
  nameWithType: BinderTest.Binds_FunctionDeclarations_WithParameters(string)
  fullName: Heir.Tests.BinderTest.Binds_FunctionDeclarations_WithParameters(string)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_FunctionDeclarations_WithParameters
    path: Heir.Tests/BinderTest.cs
    startLine: 125
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "fn add(x: int, y = 1): int { return x + y; }" })]

      [InlineData(new object[] { "fn add(x: int, y = 1): int -> x + y;" })]

      [InlineData(new object[] { "fn add(x: int, y = 1) { return x + y; }" })]

      [InlineData(new object[] { "fn add(x: int, y = 1) -> x + y;" })]

      [InlineData(new object[] { "fn add(x: int, y: int = 1) { return x + y; }" })]

      public void Binds_FunctionDeclarations_WithParameters(string input)
    parameters:
    - id: input
      type: System.String
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "fn add(x: int, y = 1): int { return x + y; }" })>

      <InlineData(New Object() { "fn add(x: int, y = 1): int -> x + y;" })>

      <InlineData(New Object() { "fn add(x: int, y = 1) { return x + y; }" })>

      <InlineData(New Object() { "fn add(x: int, y = 1) -> x + y;" })>

      <InlineData(New Object() { "fn add(x: int, y: int = 1) { return x + y; }" })>

      Public Sub Binds_FunctionDeclarations_WithParameters(input As String)
  overload: Heir.Tests.BinderTest.Binds_FunctionDeclarations_WithParameters*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.Binds_FunctionDeclarations_WithParameters(String)
  fullName.vb: Heir.Tests.BinderTest.Binds_FunctionDeclarations_WithParameters(String)
  name.vb: Binds_FunctionDeclarations_WithParameters(String)
- uid: Heir.Tests.BinderTest.Binds_FunctionDeclarations(System.String)
  commentId: M:Heir.Tests.BinderTest.Binds_FunctionDeclarations(System.String)
  id: Binds_FunctionDeclarations(System.String)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_FunctionDeclarations(string)
  nameWithType: BinderTest.Binds_FunctionDeclarations(string)
  fullName: Heir.Tests.BinderTest.Binds_FunctionDeclarations(string)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_FunctionDeclarations
    path: Heir.Tests/BinderTest.cs
    startLine: 186
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "fn abc: int { return 123; }" })]

      [InlineData(new object[] { "fn abc: int -> 123;" })]

      [InlineData(new object[] { "fn abc { return 123; }" })]

      [InlineData(new object[] { "fn abc -> 123;" })]

      public void Binds_FunctionDeclarations(string input)
    parameters:
    - id: input
      type: System.String
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "fn abc: int { return 123; }" })>

      <InlineData(New Object() { "fn abc: int -> 123;" })>

      <InlineData(New Object() { "fn abc { return 123; }" })>

      <InlineData(New Object() { "fn abc -> 123;" })>

      Public Sub Binds_FunctionDeclarations(input As String)
  overload: Heir.Tests.BinderTest.Binds_FunctionDeclarations*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.Binds_FunctionDeclarations(String)
  fullName.vb: Heir.Tests.BinderTest.Binds_FunctionDeclarations(String)
  name.vb: Binds_FunctionDeclarations(String)
- uid: Heir.Tests.BinderTest.Binds_Invocation(System.String,System.Int32)
  commentId: M:Heir.Tests.BinderTest.Binds_Invocation(System.String,System.Int32)
  id: Binds_Invocation(System.String,System.Int32)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_Invocation(string, int)
  nameWithType: BinderTest.Binds_Invocation(string, int)
  fullName: Heir.Tests.BinderTest.Binds_Invocation(string, int)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_Invocation
    path: Heir.Tests/BinderTest.cs
    startLine: 215
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "fn abc(x = 0, y = 0) {} abc();", 0 })]

      [InlineData(new object[] { "fn abc(x = 0, y = 0) {} abc(69);", 1 })]

      [InlineData(new object[] { "fn abc(x = 0, y = 0) {} abc(69, 420);", 2 })]

      public void Binds_Invocation(string input, int expectedArgumentCount)
    parameters:
    - id: input
      type: System.String
    - id: expectedArgumentCount
      type: System.Int32
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "fn abc(x = 0, y = 0) {} abc();", 0 })>

      <InlineData(New Object() { "fn abc(x = 0, y = 0) {} abc(69);", 1 })>

      <InlineData(New Object() { "fn abc(x = 0, y = 0) {} abc(69, 420);", 2 })>

      Public Sub Binds_Invocation(input As String, expectedArgumentCount As Integer)
  overload: Heir.Tests.BinderTest.Binds_Invocation*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.Binds_Invocation(String, Integer)
  fullName.vb: Heir.Tests.BinderTest.Binds_Invocation(String, Integer)
  name.vb: Binds_Invocation(String, Integer)
- uid: Heir.Tests.BinderTest.Binds_ReturnStatements
  commentId: M:Heir.Tests.BinderTest.Binds_ReturnStatements
  id: Binds_ReturnStatements
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_ReturnStatements()
  nameWithType: BinderTest.Binds_ReturnStatements()
  fullName: Heir.Tests.BinderTest.Binds_ReturnStatements()
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_ReturnStatements
    path: Heir.Tests/BinderTest.cs
    startLine: 247
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Binds_ReturnStatements()
    content.vb: >-
      <Fact>

      Public Sub Binds_ReturnStatements()
  overload: Heir.Tests.BinderTest.Binds_ReturnStatements*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.BinderTest.Binds_Identifiers
  commentId: M:Heir.Tests.BinderTest.Binds_Identifiers
  id: Binds_Identifiers
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_Identifiers()
  nameWithType: BinderTest.Binds_Identifiers()
  fullName: Heir.Tests.BinderTest.Binds_Identifiers()
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_Identifiers
    path: Heir.Tests/BinderTest.cs
    startLine: 262
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Binds_Identifiers()
    content.vb: >-
      <Fact>

      Public Sub Binds_Identifiers()
  overload: Heir.Tests.BinderTest.Binds_Identifiers*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.BinderTest.Binds_VariableDeclarations
  commentId: M:Heir.Tests.BinderTest.Binds_VariableDeclarations
  id: Binds_VariableDeclarations
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_VariableDeclarations()
  nameWithType: BinderTest.Binds_VariableDeclarations()
  fullName: Heir.Tests.BinderTest.Binds_VariableDeclarations()
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_VariableDeclarations
    path: Heir.Tests/BinderTest.cs
    startLine: 280
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Binds_VariableDeclarations()
    content.vb: >-
      <Fact>

      Public Sub Binds_VariableDeclarations()
  overload: Heir.Tests.BinderTest.Binds_VariableDeclarations*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.BinderTest.Infers_VariableDeclarationTypes
  commentId: M:Heir.Tests.BinderTest.Infers_VariableDeclarationTypes
  id: Infers_VariableDeclarationTypes
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Infers_VariableDeclarationTypes()
  nameWithType: BinderTest.Infers_VariableDeclarationTypes()
  fullName: Heir.Tests.BinderTest.Infers_VariableDeclarationTypes()
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Infers_VariableDeclarationTypes
    path: Heir.Tests/BinderTest.cs
    startLine: 297
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Fact]

      public void Infers_VariableDeclarationTypes()
    content.vb: >-
      <Fact>

      Public Sub Infers_VariableDeclarationTypes()
  overload: Heir.Tests.BinderTest.Infers_VariableDeclarationTypes*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: Heir.Tests.BinderTest.Parses_ObjectLiterals(System.String,System.Object)
  commentId: M:Heir.Tests.BinderTest.Parses_ObjectLiterals(System.String,System.Object)
  id: Parses_ObjectLiterals(System.String,System.Object)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Parses_ObjectLiterals(string, object?)
  nameWithType: BinderTest.Parses_ObjectLiterals(string, object?)
  fullName: Heir.Tests.BinderTest.Parses_ObjectLiterals(string, object?)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Parses_ObjectLiterals
    path: Heir.Tests/BinderTest.cs
    startLine: 316
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "{ a: true }", "a" })]

      [InlineData(new object[] { "{ [\"a\"]: true }", "a" })]

      [InlineData(new object[] { "{ [1]: true }", 1 })]

      public void Parses_ObjectLiterals(string input, object? keyValue)
    parameters:
    - id: input
      type: System.String
    - id: keyValue
      type: System.Object
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "{ a: true }", "a" })>

      <InlineData(New Object() { "{ [""a""]: true }", "a" })>

      <InlineData(New Object() { "{ [1]: true }", 1 })>

      Public Sub Parses_ObjectLiterals(input As String, keyValue As Object)
  overload: Heir.Tests.BinderTest.Parses_ObjectLiterals*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.Parses_ObjectLiterals(String, Object)
  fullName.vb: Heir.Tests.BinderTest.Parses_ObjectLiterals(String, Object)
  name.vb: Parses_ObjectLiterals(String, Object)
- uid: Heir.Tests.BinderTest.Binds_Literals(System.String)
  commentId: M:Heir.Tests.BinderTest.Binds_Literals(System.String)
  id: Binds_Literals(System.String)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_Literals(string)
  nameWithType: BinderTest.Binds_Literals(string)
  fullName: Heir.Tests.BinderTest.Binds_Literals(string)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_Literals
    path: Heir.Tests/BinderTest.cs
    startLine: 344
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "\"abc\"" })]

      [InlineData(new object[] { "'a'" })]

      [InlineData(new object[] { "123" })]

      [InlineData(new object[] { "69" })]

      [InlineData(new object[] { "0b1101" })]

      [InlineData(new object[] { "0o420" })]

      [InlineData(new object[] { "0x03E" })]

      [InlineData(new object[] { "123.456" })]

      [InlineData(new object[] { "69.420" })]

      [InlineData(new object[] { "true" })]

      [InlineData(new object[] { "false" })]

      [InlineData(new object[] { "none" })]

      public void Binds_Literals(string input)
    parameters:
    - id: input
      type: System.String
    content.vb: >-
      <Theory>

      <InlineData(New Object() { """abc""" })>

      <InlineData(New Object() { "'a'" })>

      <InlineData(New Object() { "123" })>

      <InlineData(New Object() { "69" })>

      <InlineData(New Object() { "0b1101" })>

      <InlineData(New Object() { "0o420" })>

      <InlineData(New Object() { "0x03E" })>

      <InlineData(New Object() { "123.456" })>

      <InlineData(New Object() { "69.420" })>

      <InlineData(New Object() { "true" })>

      <InlineData(New Object() { "false" })>

      <InlineData(New Object() { "none" })>

      Public Sub Binds_Literals(input As String)
  overload: Heir.Tests.BinderTest.Binds_Literals*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.Binds_Literals(String)
  fullName.vb: Heir.Tests.BinderTest.Binds_Literals(String)
  name.vb: Binds_Literals(String)
- uid: Heir.Tests.BinderTest.Binds_PrimitiveBinaryOperations(System.String,Heir.Types.PrimitiveTypeKind)
  commentId: M:Heir.Tests.BinderTest.Binds_PrimitiveBinaryOperations(System.String,Heir.Types.PrimitiveTypeKind)
  id: Binds_PrimitiveBinaryOperations(System.String,Heir.Types.PrimitiveTypeKind)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_PrimitiveBinaryOperations(string, PrimitiveTypeKind)
  nameWithType: BinderTest.Binds_PrimitiveBinaryOperations(string, PrimitiveTypeKind)
  fullName: Heir.Tests.BinderTest.Binds_PrimitiveBinaryOperations(string, Heir.Types.PrimitiveTypeKind)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_PrimitiveBinaryOperations
    path: Heir.Tests/BinderTest.cs
    startLine: 371
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "true && false", PrimitiveTypeKind.Bool })]

      [InlineData(new object[] { "8 // 3", PrimitiveTypeKind.Int })]

      [InlineData(new object[] { "\"a\" + \"b\"", PrimitiveTypeKind.String })]

      [InlineData(new object[] { "'a' + 'b'", PrimitiveTypeKind.Char })]

      public void Binds_PrimitiveBinaryOperations(string input, PrimitiveTypeKind returnTypeKind)
    parameters:
    - id: input
      type: System.String
    - id: returnTypeKind
      type: Heir.Types.PrimitiveTypeKind
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "true && false", PrimitiveTypeKind.Bool })>

      <InlineData(New Object() { "8 // 3", PrimitiveTypeKind.Int })>

      <InlineData(New Object() { """a"" + ""b""", PrimitiveTypeKind.String })>

      <InlineData(New Object() { "'a' + 'b'", PrimitiveTypeKind.Char })>

      Public Sub Binds_PrimitiveBinaryOperations(input As String, returnTypeKind As PrimitiveTypeKind)
  overload: Heir.Tests.BinderTest.Binds_PrimitiveBinaryOperations*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.Binds_PrimitiveBinaryOperations(String, PrimitiveTypeKind)
  fullName.vb: Heir.Tests.BinderTest.Binds_PrimitiveBinaryOperations(String, Heir.Types.PrimitiveTypeKind)
  name.vb: Binds_PrimitiveBinaryOperations(String, PrimitiveTypeKind)
- uid: Heir.Tests.BinderTest.Binds_UnionBinaryOperations(System.String,Heir.Types.PrimitiveTypeKind,Heir.Types.PrimitiveTypeKind)
  commentId: M:Heir.Tests.BinderTest.Binds_UnionBinaryOperations(System.String,Heir.Types.PrimitiveTypeKind,Heir.Types.PrimitiveTypeKind)
  id: Binds_UnionBinaryOperations(System.String,Heir.Types.PrimitiveTypeKind,Heir.Types.PrimitiveTypeKind)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_UnionBinaryOperations(string, PrimitiveTypeKind, PrimitiveTypeKind)
  nameWithType: BinderTest.Binds_UnionBinaryOperations(string, PrimitiveTypeKind, PrimitiveTypeKind)
  fullName: Heir.Tests.BinderTest.Binds_UnionBinaryOperations(string, Heir.Types.PrimitiveTypeKind, Heir.Types.PrimitiveTypeKind)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_UnionBinaryOperations
    path: Heir.Tests/BinderTest.cs
    startLine: 394
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "7 / 4", PrimitiveTypeKind.Int, PrimitiveTypeKind.Float })]

      [InlineData(new object[] { "\"a\" + 'b'", PrimitiveTypeKind.String, PrimitiveTypeKind.Char })]

      public void Binds_UnionBinaryOperations(string input, PrimitiveTypeKind typeAKind, PrimitiveTypeKind typeBKind)
    parameters:
    - id: input
      type: System.String
    - id: typeAKind
      type: Heir.Types.PrimitiveTypeKind
    - id: typeBKind
      type: Heir.Types.PrimitiveTypeKind
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "7 / 4", PrimitiveTypeKind.Int, PrimitiveTypeKind.Float })>

      <InlineData(New Object() { """a"" + 'b'", PrimitiveTypeKind.String, PrimitiveTypeKind.Char })>

      Public Sub Binds_UnionBinaryOperations(input As String, typeAKind As PrimitiveTypeKind, typeBKind As PrimitiveTypeKind)
  overload: Heir.Tests.BinderTest.Binds_UnionBinaryOperations*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.Binds_UnionBinaryOperations(String, PrimitiveTypeKind, PrimitiveTypeKind)
  fullName.vb: Heir.Tests.BinderTest.Binds_UnionBinaryOperations(String, Heir.Types.PrimitiveTypeKind, Heir.Types.PrimitiveTypeKind)
  name.vb: Binds_UnionBinaryOperations(String, PrimitiveTypeKind, PrimitiveTypeKind)
- uid: Heir.Tests.BinderTest.Binds_PrimitiveUnaryOperations(System.String,Heir.Types.PrimitiveTypeKind)
  commentId: M:Heir.Tests.BinderTest.Binds_PrimitiveUnaryOperations(System.String,Heir.Types.PrimitiveTypeKind)
  id: Binds_PrimitiveUnaryOperations(System.String,Heir.Types.PrimitiveTypeKind)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_PrimitiveUnaryOperations(string, PrimitiveTypeKind)
  nameWithType: BinderTest.Binds_PrimitiveUnaryOperations(string, PrimitiveTypeKind)
  fullName: Heir.Tests.BinderTest.Binds_PrimitiveUnaryOperations(string, Heir.Types.PrimitiveTypeKind)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_PrimitiveUnaryOperations
    path: Heir.Tests/BinderTest.cs
    startLine: 421
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "!false", PrimitiveTypeKind.Bool })]

      [InlineData(new object[] { "~6", PrimitiveTypeKind.Int })]

      public void Binds_PrimitiveUnaryOperations(string input, PrimitiveTypeKind returnTypeKind)
    parameters:
    - id: input
      type: System.String
    - id: returnTypeKind
      type: Heir.Types.PrimitiveTypeKind
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "!false", PrimitiveTypeKind.Bool })>

      <InlineData(New Object() { "~6", PrimitiveTypeKind.Int })>

      Public Sub Binds_PrimitiveUnaryOperations(input As String, returnTypeKind As PrimitiveTypeKind)
  overload: Heir.Tests.BinderTest.Binds_PrimitiveUnaryOperations*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.Binds_PrimitiveUnaryOperations(String, PrimitiveTypeKind)
  fullName.vb: Heir.Tests.BinderTest.Binds_PrimitiveUnaryOperations(String, Heir.Types.PrimitiveTypeKind)
  name.vb: Binds_PrimitiveUnaryOperations(String, PrimitiveTypeKind)
- uid: Heir.Tests.BinderTest.Binds_UnionUnaryOperations(System.String,Heir.Types.PrimitiveTypeKind,Heir.Types.PrimitiveTypeKind)
  commentId: M:Heir.Tests.BinderTest.Binds_UnionUnaryOperations(System.String,Heir.Types.PrimitiveTypeKind,Heir.Types.PrimitiveTypeKind)
  id: Binds_UnionUnaryOperations(System.String,Heir.Types.PrimitiveTypeKind,Heir.Types.PrimitiveTypeKind)
  parent: Heir.Tests.BinderTest
  langs:
  - csharp
  - vb
  name: Binds_UnionUnaryOperations(string, PrimitiveTypeKind, PrimitiveTypeKind)
  nameWithType: BinderTest.Binds_UnionUnaryOperations(string, PrimitiveTypeKind, PrimitiveTypeKind)
  fullName: Heir.Tests.BinderTest.Binds_UnionUnaryOperations(string, Heir.Types.PrimitiveTypeKind, Heir.Types.PrimitiveTypeKind)
  type: Method
  source:
    remote:
      path: Heir.Tests/BinderTest.cs
      branch: master
      repo: git@github.com:heir-lang/heir.git
    id: Binds_UnionUnaryOperations
    path: Heir.Tests/BinderTest.cs
    startLine: 441
  assemblies:
  - Heir.Tests
  namespace: Heir.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[] { "-69.420", PrimitiveTypeKind.Int, PrimitiveTypeKind.Float })]

      [InlineData(new object[] { "++6", PrimitiveTypeKind.Int, PrimitiveTypeKind.Float })]

      public void Binds_UnionUnaryOperations(string input, PrimitiveTypeKind typeAKind, PrimitiveTypeKind typeBKind)
    parameters:
    - id: input
      type: System.String
    - id: typeAKind
      type: Heir.Types.PrimitiveTypeKind
    - id: typeBKind
      type: Heir.Types.PrimitiveTypeKind
    content.vb: >-
      <Theory>

      <InlineData(New Object() { "-69.420", PrimitiveTypeKind.Int, PrimitiveTypeKind.Float })>

      <InlineData(New Object() { "++6", PrimitiveTypeKind.Int, PrimitiveTypeKind.Float })>

      Public Sub Binds_UnionUnaryOperations(input As String, typeAKind As PrimitiveTypeKind, typeBKind As PrimitiveTypeKind)
  overload: Heir.Tests.BinderTest.Binds_UnionUnaryOperations*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: BinderTest.Binds_UnionUnaryOperations(String, PrimitiveTypeKind, PrimitiveTypeKind)
  fullName.vb: Heir.Tests.BinderTest.Binds_UnionUnaryOperations(String, Heir.Types.PrimitiveTypeKind, Heir.Types.PrimitiveTypeKind)
  name.vb: Binds_UnionUnaryOperations(String, PrimitiveTypeKind, PrimitiveTypeKind)
references:
- uid: Heir.Tests
  commentId: N:Heir.Tests
  href: Heir.html
  name: Heir.Tests
  nameWithType: Heir.Tests
  fullName: Heir.Tests
  spec.csharp:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Tests
    name: Tests
    href: Heir.Tests.html
  spec.vb:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Tests
    name: Tests
    href: Heir.Tests.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Heir.Tests.BinderTest.ThrowsWith*
  commentId: Overload:Heir.Tests.BinderTest.ThrowsWith
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_ThrowsWith_System_String_Heir_DiagnosticCode_
  name: ThrowsWith
  nameWithType: BinderTest.ThrowsWith
  fullName: Heir.Tests.BinderTest.ThrowsWith
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Heir.DiagnosticCode
  commentId: T:Heir.DiagnosticCode
  parent: Heir
  href: Heir.DiagnosticCode.html
  name: DiagnosticCode
  nameWithType: DiagnosticCode
  fullName: Heir.DiagnosticCode
- uid: Heir
  commentId: N:Heir
  href: Heir.html
  name: Heir
  nameWithType: Heir
  fullName: Heir
- uid: Heir.Tests.BinderTest.Binds_MemberAccess*
  commentId: Overload:Heir.Tests.BinderTest.Binds_MemberAccess
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_MemberAccess
  name: Binds_MemberAccess
  nameWithType: BinderTest.Binds_MemberAccess
  fullName: Heir.Tests.BinderTest.Binds_MemberAccess
- uid: Heir.Tests.BinderTest.Binds_ElementAccess*
  commentId: Overload:Heir.Tests.BinderTest.Binds_ElementAccess
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_ElementAccess
  name: Binds_ElementAccess
  nameWithType: BinderTest.Binds_ElementAccess
  fullName: Heir.Tests.BinderTest.Binds_ElementAccess
- uid: Heir.Tests.BinderTest.Binds_IfStatements*
  commentId: Overload:Heir.Tests.BinderTest.Binds_IfStatements
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_IfStatements
  name: Binds_IfStatements
  nameWithType: BinderTest.Binds_IfStatements
  fullName: Heir.Tests.BinderTest.Binds_IfStatements
- uid: Heir.Tests.BinderTest.Binds_FunctionDeclarations_WithParameters*
  commentId: Overload:Heir.Tests.BinderTest.Binds_FunctionDeclarations_WithParameters
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_FunctionDeclarations_WithParameters_System_String_
  name: Binds_FunctionDeclarations_WithParameters
  nameWithType: BinderTest.Binds_FunctionDeclarations_WithParameters
  fullName: Heir.Tests.BinderTest.Binds_FunctionDeclarations_WithParameters
- uid: Heir.Tests.BinderTest.Binds_FunctionDeclarations*
  commentId: Overload:Heir.Tests.BinderTest.Binds_FunctionDeclarations
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_FunctionDeclarations_System_String_
  name: Binds_FunctionDeclarations
  nameWithType: BinderTest.Binds_FunctionDeclarations
  fullName: Heir.Tests.BinderTest.Binds_FunctionDeclarations
- uid: Heir.Tests.BinderTest.Binds_Invocation*
  commentId: Overload:Heir.Tests.BinderTest.Binds_Invocation
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_Invocation_System_String_System_Int32_
  name: Binds_Invocation
  nameWithType: BinderTest.Binds_Invocation
  fullName: Heir.Tests.BinderTest.Binds_Invocation
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Heir.Tests.BinderTest.Binds_ReturnStatements*
  commentId: Overload:Heir.Tests.BinderTest.Binds_ReturnStatements
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_ReturnStatements
  name: Binds_ReturnStatements
  nameWithType: BinderTest.Binds_ReturnStatements
  fullName: Heir.Tests.BinderTest.Binds_ReturnStatements
- uid: Heir.Tests.BinderTest.Binds_Identifiers*
  commentId: Overload:Heir.Tests.BinderTest.Binds_Identifiers
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_Identifiers
  name: Binds_Identifiers
  nameWithType: BinderTest.Binds_Identifiers
  fullName: Heir.Tests.BinderTest.Binds_Identifiers
- uid: Heir.Tests.BinderTest.Binds_VariableDeclarations*
  commentId: Overload:Heir.Tests.BinderTest.Binds_VariableDeclarations
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_VariableDeclarations
  name: Binds_VariableDeclarations
  nameWithType: BinderTest.Binds_VariableDeclarations
  fullName: Heir.Tests.BinderTest.Binds_VariableDeclarations
- uid: Heir.Tests.BinderTest.Infers_VariableDeclarationTypes*
  commentId: Overload:Heir.Tests.BinderTest.Infers_VariableDeclarationTypes
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Infers_VariableDeclarationTypes
  name: Infers_VariableDeclarationTypes
  nameWithType: BinderTest.Infers_VariableDeclarationTypes
  fullName: Heir.Tests.BinderTest.Infers_VariableDeclarationTypes
- uid: Heir.Tests.BinderTest.Parses_ObjectLiterals*
  commentId: Overload:Heir.Tests.BinderTest.Parses_ObjectLiterals
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Parses_ObjectLiterals_System_String_System_Object_
  name: Parses_ObjectLiterals
  nameWithType: BinderTest.Parses_ObjectLiterals
  fullName: Heir.Tests.BinderTest.Parses_ObjectLiterals
- uid: Heir.Tests.BinderTest.Binds_Literals*
  commentId: Overload:Heir.Tests.BinderTest.Binds_Literals
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_Literals_System_String_
  name: Binds_Literals
  nameWithType: BinderTest.Binds_Literals
  fullName: Heir.Tests.BinderTest.Binds_Literals
- uid: Heir.Tests.BinderTest.Binds_PrimitiveBinaryOperations*
  commentId: Overload:Heir.Tests.BinderTest.Binds_PrimitiveBinaryOperations
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_PrimitiveBinaryOperations_System_String_Heir_Types_PrimitiveTypeKind_
  name: Binds_PrimitiveBinaryOperations
  nameWithType: BinderTest.Binds_PrimitiveBinaryOperations
  fullName: Heir.Tests.BinderTest.Binds_PrimitiveBinaryOperations
- uid: Heir.Types.PrimitiveTypeKind
  commentId: T:Heir.Types.PrimitiveTypeKind
  parent: Heir.Types
  href: Heir.Types.PrimitiveTypeKind.html
  name: PrimitiveTypeKind
  nameWithType: PrimitiveTypeKind
  fullName: Heir.Types.PrimitiveTypeKind
- uid: Heir.Types
  commentId: N:Heir.Types
  href: Heir.html
  name: Heir.Types
  nameWithType: Heir.Types
  fullName: Heir.Types
  spec.csharp:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Types
    name: Types
    href: Heir.Types.html
  spec.vb:
  - uid: Heir
    name: Heir
    href: Heir.html
  - name: .
  - uid: Heir.Types
    name: Types
    href: Heir.Types.html
- uid: Heir.Tests.BinderTest.Binds_UnionBinaryOperations*
  commentId: Overload:Heir.Tests.BinderTest.Binds_UnionBinaryOperations
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_UnionBinaryOperations_System_String_Heir_Types_PrimitiveTypeKind_Heir_Types_PrimitiveTypeKind_
  name: Binds_UnionBinaryOperations
  nameWithType: BinderTest.Binds_UnionBinaryOperations
  fullName: Heir.Tests.BinderTest.Binds_UnionBinaryOperations
- uid: Heir.Tests.BinderTest.Binds_PrimitiveUnaryOperations*
  commentId: Overload:Heir.Tests.BinderTest.Binds_PrimitiveUnaryOperations
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_PrimitiveUnaryOperations_System_String_Heir_Types_PrimitiveTypeKind_
  name: Binds_PrimitiveUnaryOperations
  nameWithType: BinderTest.Binds_PrimitiveUnaryOperations
  fullName: Heir.Tests.BinderTest.Binds_PrimitiveUnaryOperations
- uid: Heir.Tests.BinderTest.Binds_UnionUnaryOperations*
  commentId: Overload:Heir.Tests.BinderTest.Binds_UnionUnaryOperations
  href: Heir.Tests.BinderTest.html#Heir_Tests_BinderTest_Binds_UnionUnaryOperations_System_String_Heir_Types_PrimitiveTypeKind_Heir_Types_PrimitiveTypeKind_
  name: Binds_UnionUnaryOperations
  nameWithType: BinderTest.Binds_UnionUnaryOperations
  fullName: Heir.Tests.BinderTest.Binds_UnionUnaryOperations
